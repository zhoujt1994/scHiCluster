{
  "Tan2021/dipc_clustering": [
    {
      "source": "import time\nimport numpy as np\nimport pandas as pd\nfrom glob import glob\nimport anndata\nimport scanpy as sc\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm\nfrom matplotlib import cm as cm\nimport seaborn as sns\nfrom scipy.sparse import csr_matrix\nfrom ALLCools.plot import *\nfrom ALLCools.clustering import *\nfrom sklearn.decomposition import TruncatedSVD\nfrom sklearn.preprocessing import normalize\n\nmpl.style.use('default')\nmpl.rcParams['pdf.fonttype'] = 42\nmpl.rcParams['ps.fonttype'] = 42\nmpl.rcParams['font.family'] = 'sans-serif'\nmpl.rcParams['font.sans-serif'] = 'Helvetica'\n",
      "names": [],
      "example": {
        "document": "Tan2021/dipc_clustering",
        "ref_id": "dipc-clustering-at-100kb-resolution",
        "headings": [
          "DipC clustering at 100kb resolution"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "indir = '/data/test_schicluster/Tan2021/scool/dataset/'",
      "names": [],
      "example": {
        "document": "Tan2021/dipc_clustering",
        "ref_id": "dipc-clustering-at-100kb-resolution",
        "headings": [
          "DipC clustering at 100kb resolution"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "chrom_sizes = pd.read_csv('/data/ref/mm10/genome/mm10.autosome.chrom.sizes', index_col=0, header=None, sep='\\t')[1]\nchrom_sizes",
      "names": [],
      "example": {
        "document": "Tan2021/dipc_clustering",
        "ref_id": "dipc-clustering-at-100kb-resolution",
        "headings": [
          "DipC clustering at 100kb resolution"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "celllist = pd.read_csv(f'{indir}../impute/100K/cell_table.tsv', sep='\\t', index_col=0, header=None)\ncelllist\n",
      "names": [],
      "example": {
        "document": "Tan2021/dipc_clustering",
        "ref_id": "dipc-clustering-at-100kb-resolution",
        "headings": [
          "DipC clustering at 100kb resolution"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "meta = pd.read_csv('meta.txt', sep='\\t', header=0, index_col=0)\nmeta",
      "names": [],
      "example": {
        "document": "Tan2021/dipc_clustering",
        "ref_id": "dipc-clustering-at-100kb-resolution",
        "headings": [
          "DipC clustering at 100kb resolution"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "start_time = time.time()\nmatrix = []\ndim = 50\nfor chrom in chrom_sizes.index:\n    tmp = np.load(f'{indir}embedding/raw/{chrom}.npz')['arr_0']\n    dim = min(dim, tmp.shape[0] - 1, tmp.shape[1] - 1)\n    model = TruncatedSVD(n_components=dim, algorithm='arpack')\n    tmp_reduce = model.fit_transform(tmp)\n    matrix.append(tmp_reduce / model.singular_values_)\n    print(chrom, time.time() - start_time)\n",
      "names": [],
      "example": {
        "document": "Tan2021/dipc_clustering",
        "ref_id": "dipc-clustering-at-100kb-resolution",
        "headings": [
          "DipC clustering at 100kb resolution"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "model = TruncatedSVD(n_components=dim, algorithm='arpack')\nmatrix_reduce = model.fit_transform(np.concatenate(matrix, axis=1))\nmatrix_reduce = matrix_reduce / model.singular_values_\n",
      "names": [],
      "example": {
        "document": "Tan2021/dipc_clustering",
        "ref_id": "dipc-clustering-at-100kb-resolution",
        "headings": [
          "DipC clustering at 100kb resolution"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "adata = anndata.AnnData(X=np.ones((celllist.shape[0],1)), \n                        obs=meta.loc[celllist.index])\nadata\n",
      "names": [],
      "example": {
        "document": "Tan2021/dipc_clustering",
        "ref_id": "dipc-clustering-at-100kb-resolution",
        "headings": [
          "DipC clustering at 100kb resolution"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "adata.obs.index.name = 'cell_name'\nadata.obs['age'] = adata.obs['age'].str[1:].astype(int)\nadata.obs['contacts'] = adata.obs['contacts'].str.replace(',','').astype(int)\n",
      "names": [],
      "example": {
        "document": "Tan2021/dipc_clustering",
        "ref_id": "dipc-clustering-at-100kb-resolution",
        "headings": [
          "DipC clustering at 100kb resolution"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "adata.obs = adata.obs[['tissue', 'treatment', 'age', 'sex', 'father', 'mother',\n                       'restriction enzyme', 'cell-type cluster', 'contacts']]",
      "names": [],
      "example": {
        "document": "Tan2021/dipc_clustering",
        "ref_id": "dipc-clustering-at-100kb-resolution",
        "headings": [
          "DipC clustering at 100kb resolution"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "adata.obsm['dipc_pca_all'] = matrix_reduce.copy()",
      "names": [],
      "example": {
        "document": "Tan2021/dipc_clustering",
        "ref_id": "dipc-clustering-at-100kb-resolution",
        "headings": [
          "DipC clustering at 100kb resolution"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "significant_pc_test(adata, p_cutoff=0.1, update=False, obsm='dipc_pca_all')\n",
      "names": [],
      "example": {
        "document": "Tan2021/dipc_clustering",
        "ref_id": "dipc-clustering-at-100kb-resolution",
        "headings": [
          "DipC clustering at 100kb resolution"
        ]
      },
      "doc_lineno": 130002
    },
    {
      "source": "adata.obsm['X_pca'] = normalize(adata.obsm['dipc_pca_all'][:, :20], axis=1)\n",
      "names": [],
      "example": {
        "document": "Tan2021/dipc_clustering",
        "ref_id": "dipc-clustering-at-100kb-resolution",
        "headings": [
          "DipC clustering at 100kb resolution"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "def dump_embedding(adata, name, n_dim=2):\n    # put manifold coordinates into adata.obs\n    for i in range(n_dim):\n        adata.obs[f'{name}_{i}'] = adata.obsm[f'X_{name}'][:, i]\n    return adata\n",
      "names": [],
      "example": {
        "document": "Tan2021/dipc_clustering",
        "ref_id": "dipc-clustering-at-100kb-resolution",
        "headings": [
          "DipC clustering at 100kb resolution"
        ]
      },
      "doc_lineno": 150002
    },
    {
      "source": "knn = 25\nsc.pp.neighbors(adata, n_neighbors=knn, use_rep='X_pca')\nsc.tl.umap(adata, maxiter=200, random_state=0)\nadata = dump_embedding(adata, 'umap')\n",
      "names": [],
      "example": {
        "document": "Tan2021/dipc_clustering",
        "ref_id": "dipc-clustering-at-100kb-resolution",
        "headings": [
          "DipC clustering at 100kb resolution"
        ]
      },
      "doc_lineno": 160002
    },
    {
      "source": "sc.tl.leiden(adata, resolution=1.0, random_state=0)",
      "names": [],
      "example": {
        "document": "Tan2021/dipc_clustering",
        "ref_id": "dipc-clustering-at-100kb-resolution",
        "headings": [
          "DipC clustering at 100kb resolution"
        ]
      },
      "doc_lineno": 170002
    },
    {
      "source": "fig, axes = plt.subplots(2, 2, figsize=(12, 8), dpi=300, constrained_layout=True)\n_ = continuous_scatter(ax=axes[0,0],\n                       data=adata.obs,\n                       hue='contacts',\n                       coord_base='umap',\n                       #max_points=None,\n                       labelsize=10,\n                       s=4)\n_ = categorical_scatter(data=adata.obs,\n                        ax=axes[0,1],\n                        coord_base='umap',\n                        hue='age',\n                        palette='hls',\n                        labelsize=10,\n                        show_legend=True)\n_ = categorical_scatter(ax=axes[1,0],\n                        data=adata.obs,\n                        hue='tissue',\n                        coord_base='umap',\n                        # text_anno='region',\n                        # palette='tab10',\n                        labelsize=10,\n                        show_legend=True\n                       )\n_ = categorical_scatter(ax=axes[1,1],\n                        data=adata.obs,\n                        hue='cell-type cluster',\n                        coord_base='umap',\n                        # text_anno='cell-type cluster',\n                        palette='tab20',\n                        labelsize=10,\n                        show_legend=True\n                       )\n",
      "names": [],
      "example": {
        "document": "Tan2021/dipc_clustering",
        "ref_id": "dipc-clustering-at-100kb-resolution",
        "headings": [
          "DipC clustering at 100kb resolution"
        ]
      },
      "doc_lineno": 180002
    },
    {
      "source": "fig, ax = plt.subplots(figsize=(6, 4), dpi=300, constrained_layout=True)\n_ = categorical_scatter(data=adata.obs,\n                        ax=ax,\n                        coord_base='umap',\n                        hue='leiden',\n                        text_anno='leiden',\n                        palette='tab20',\n                        labelsize=10,\n                        # show_legend=True\n                       )\n",
      "names": [],
      "example": {
        "document": "Tan2021/dipc_clustering",
        "ref_id": "dipc-clustering-at-100kb-resolution",
        "headings": [
          "DipC clustering at 100kb resolution"
        ]
      },
      "doc_lineno": 190002
    },
    {
      "source": "adata.write_h5ad('Tan2021_dipc.h5ad')\n",
      "names": [],
      "example": {
        "document": "Tan2021/dipc_clustering",
        "ref_id": "dipc-clustering-at-100kb-resolution",
        "headings": [
          "DipC clustering at 100kb resolution"
        ]
      },
      "doc_lineno": 200002
    }
  ],
  "Tan2021/imputation": [],
  "Tan2021/intro": [],
  "Tan2021/loop_blacklist": [
    {
      "source": "import cooler\nimport numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm as cm\nimport seaborn as sns\nfrom scipy.sparse import csr_matrix\n\nmpl.style.use('default')\nmpl.rcParams['pdf.fonttype'] = 42\nmpl.rcParams['ps.fonttype'] = 42\nmpl.rcParams['font.family'] = 'sans-serif'\nmpl.rcParams['font.sans-serif'] = 'Helvetica'\n",
      "names": [],
      "example": {
        "document": "Tan2021/loop_blacklist",
        "ref_id": "generate-blacklist-for-loop-calling",
        "headings": [
          "Generate blacklist for loop calling"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "chrom_size_path = '/data/ref/mm10/genome/mm10.main20.chrom.sizes'\nchrom_sizes = pd.read_csv(chrom_size_path, sep='\\t', header=None, index_col=0)\n",
      "names": [],
      "example": {
        "document": "Tan2021/loop_blacklist",
        "ref_id": "generate-blacklist-for-loop-calling",
        "headings": [
          "Generate blacklist for loop calling"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "cool = cooler.Cooler('merged_raw/Tan2021.raw.mcool::/resolutions/10000')\n",
      "names": [],
      "example": {
        "document": "Tan2021/loop_blacklist",
        "ref_id": "generate-blacklist-for-loop-calling",
        "headings": [
          "Generate blacklist for loop calling"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "data = cool.pixels()[:]\ndata = csr_matrix((data['count'], (data['bin1_id'], data['bin2_id'])), shape=cool.shape)\n",
      "names": [],
      "example": {
        "document": "Tan2021/loop_blacklist",
        "ref_id": "generate-blacklist-for-loop-calling",
        "headings": [
          "Generate blacklist for loop calling"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "bin_df = cool.bins()[:]\nbin_df['rowsum'] = data.sum(axis=0).A1",
      "names": [],
      "example": {
        "document": "Tan2021/loop_blacklist",
        "ref_id": "generate-blacklist-for-loop-calling",
        "headings": [
          "Generate blacklist for loop calling"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "sns.histplot(bin_df.loc[bin_df['rowsum']>0, 'rowsum'], bins=100, log_scale=10, binrange=(2.5,4.5))",
      "names": [],
      "example": {
        "document": "Tan2021/loop_blacklist",
        "ref_id": "generate-blacklist-for-loop-calling",
        "headings": [
          "Generate blacklist for loop calling"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "((bin_df['rowsum']<1e3)).sum()",
      "names": [],
      "example": {
        "document": "Tan2021/loop_blacklist",
        "ref_id": "generate-blacklist-for-loop-calling",
        "headings": [
          "Generate blacklist for loop calling"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "bin_df[['chrom', 'start', 'end']].to_csv('mm10.main.10kb.bed', sep='\\t', header=False, index=False)\nbin_df.loc[bin_df['rowsum']<1e3, ['chrom', 'start', 'end']].to_csv('mm10.main.rowsum1000.10kb.bed', sep='\\t', header=False, index=False)\n",
      "names": [],
      "example": {
        "document": "Tan2021/loop_blacklist",
        "ref_id": "generate-blacklist-for-loop-calling",
        "headings": [
          "Generate blacklist for loop calling"
        ]
      },
      "doc_lineno": 90002
    }
  ],
  "Tan2021/prepare": [
    {
      "source": "import os\nimport numpy as np\nimport pandas as pd\nfrom glob import glob\nimport schicluster\nPACKAGE_DIR = schicluster.__path__[0]\n",
      "names": [
        {
          "import_components": [
            "schicluster"
          ],
          "code_str": "schicluster",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "schicluster"
        }
      ],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "prepare-pseudobulk-analyses",
        "headings": [
          "Prepare pseudobulk analyses"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "metadata = pd.read_csv('Tan2021_dipc_cluster.csv.gz', header=0, index_col=0)\nmetadata['rnatype'] = [xx.replace(' ', '_').replace('/', '').replace(',', '').replace('.', '') for xx in metadata['rnatype'].values]\nmetadata\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "prepare-pseudobulk-analyses",
        "headings": [
          "Prepare pseudobulk analyses"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "def prepare_dir(output_dir, chunk_df, template, params):\n\n    os.makedirs(output_dir, exist_ok=True)\n    cell_table_path = f'{output_dir}cell_table.csv'\n    chunk_df.to_csv(cell_table_path, header=False, index=True)\n    params_str = '\\n'.join(f'{k} = {v}' for k, v in params.items())\n\n    with open(f'{output_dir}Snakefile_master', 'w') as f:\n        f.write(params_str + template)\n    return\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "prepare-pseudobulk-analyses",
        "headings": [
          "Prepare pseudobulk analyses"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "cell_table = pd.read_csv('contact_table.tsv', sep='\\t', header=None, index_col=0, names=['cell_id','csv_path'])\ncell_table = cell_table.loc[metadata.index]\ncell_table\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "raw",
        "headings": [
          "Prepare pseudobulk analyses",
          "Raw"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "cell_table['cluster'] = metadata['rnatype'].copy()\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "raw",
        "headings": [
          "Prepare pseudobulk analyses",
          "Raw"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "leg = {}\nchunk_size = 200\noutdir = '/home/jzhou_salk_edu/sky_workdir/test_schicluster/Tan2021/merged_raw/'\nfor cluster, sub_df in cell_table.groupby('cluster'):\n    legtmp = []\n    # group = cluster.replace(' ', '_').replace('/', '').replace(',', '').replace('.', '')\n    os.makedirs(f'{outdir}{cluster}', exist_ok=True)\n    if sub_df.shape[0]>1500:\n        tmp = sub_df.loc[np.random.choice(sub_df.index, 1500, False)]\n    else:\n        tmp = sub_df.copy()\n    for i,chunk_start in enumerate(np.arange(0, tmp.shape[0], chunk_size)):\n        os.makedirs(f'{outdir}{cluster}_chunk{i}', exist_ok=True)\n        tmp['csv_path'].iloc[chunk_start:(chunk_start+chunk_size)].to_csv(f'{outdir}{cluster}_chunk{i}/cell_table.tsv', sep='\\t', header=False, index=True)\n        legtmp.append(f'{cluster}_chunk{i}')\n    tmp['csv_path'].to_csv(f'{outdir}{cluster}/cell_table.tsv', sep='\\t', header=False, index=True)\n    leg[cluster] = legtmp\n    print(cluster, tmp.shape[0])\n    ",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "raw",
        "headings": [
          "Prepare pseudobulk analyses",
          "Raw"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "f1 = open(f'{outdir}snakemake_cmd_step1.txt', 'w')\nf2 = open(f'{outdir}snakemake_cmd_step2.txt', 'w')\nfor ct in leg:\n    for group in leg[ct]:\n        cmd = f'hicluster merge-cell-raw --cell_table {outdir}{group}/cell_table.tsv --chrom_size_path /data/ref/mm10/genome/mm10.main.chrom.sizes --output_file {outdir}{group}/raw.cool --chr1 1 --pos1 2 --chr2 3 --pos2 4'\n        f1.write(cmd + '\\n')\n    if len(leg[ct])<2:\n        group = leg[ct][0]\n        cmd = f'rsync -arv {outdir}{group}/raw.cool {outdir}{ct}/{ct}.raw.cool'\n        f2.write(cmd + '\\n')\n    else:\n        cmd = f'cooler merge {outdir}{ct}/{ct}.raw.cool'\n        for group in leg[ct]:\n            cmd += f' {outdir}{group}/raw.cool'\n        f2.write(cmd + '\\n')\n        \nf1.close()\nf2.close()\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "note",
        "headings": [
          "Prepare pseudobulk analyses",
          "Raw",
          "Note"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "from gliderport.preset import notebook_snakemake\n\nnotebook_snakemake(\n    work_dir=f\"merged_raw/\",\n    notebook_dir=\"merged_raw/template_step1/\",\n    groups=np.concatenate([leg[xx] for xx in leg]).tolist(),\n    default_cpu=1,\n    default_mem_gb=5,\n    redo_prepare=True,\n)\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "id1",
        "headings": [
          "Prepare pseudobulk analyses",
          "Raw",
          "Note"
        ]
      },
      "doc_lineno": 130002
    },
    {
      "source": "!snakemake --snakefile Snakefile -j 8 --keep-going",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "id1",
        "headings": [
          "Prepare pseudobulk analyses",
          "Raw",
          "Note"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "notebook_snakemake(\n    work_dir=f\"merged_raw/\",\n    notebook_dir=\"merged_raw/template_step2/\",\n    groups=list(leg.keys()),\n    default_cpu=1,\n    default_mem_gb=5,\n    redo_prepare=True,\n)\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "id1",
        "headings": [
          "Prepare pseudobulk analyses",
          "Raw",
          "Note"
        ]
      },
      "doc_lineno": 150002
    },
    {
      "source": "!snakemake --snakefile Snakefile -j 8 --keep-going",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "id1",
        "headings": [
          "Prepare pseudobulk analyses",
          "Raw",
          "Note"
        ]
      },
      "doc_lineno": 160002
    },
    {
      "source": "coollist = glob('/data/test_schicluster/Tan2021/scool/impute/10K/*/*.cool')\ncell_table = pd.DataFrame(coollist, index=[xx.split('/')[-1].replace('.cool', '') for xx in coollist], columns=['cool_path'])\ncell_table = cell_table.loc[metadata.index]\ncell_table['cluster'] = metadata['rnatype'].copy()\ncell_table['cool_path'] = cell_table['cool_path'].str.replace('/data/test_schicluster', '/anvil/scratch/x-zhou')\ncell_table\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "loop",
        "headings": [
          "Prepare pseudobulk analyses",
          "Loop"
        ]
      },
      "doc_lineno": 190002
    },
    {
      "source": "outdir = 'Tan2021_loop/'\nloop_dir = f'/anvil/scratch/x-zhou/{outdir}'\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "loop",
        "headings": [
          "Prepare pseudobulk analyses",
          "Loop"
        ]
      },
      "doc_lineno": 200002
    },
    {
      "source": "params = {\n    'cpu': 96,\n    'resolution': 10000,\n    'chrom_size_path': f'\"{loop_dir}mm10.main20.chrom.sizes\"',\n    'black_list_path': f'\"{loop_dir}mm10.dipc.rowsum1000.blf50.merged.bed\"',\n}",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "loop",
        "headings": [
          "Prepare pseudobulk analyses",
          "Loop"
        ]
      },
      "doc_lineno": 210002
    },
    {
      "source": "with open(f'{PACKAGE_DIR}/loop/snakemake_template_loop.txt') as tmp:\n    GENERATE_MATRIX_CHUNK_TEMPLATE = tmp.read()\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "loop",
        "headings": [
          "Prepare pseudobulk analyses",
          "Loop"
        ]
      },
      "doc_lineno": 220002
    },
    {
      "source": "for cluster, sub_df in cell_table.groupby('cluster'):\n    if sub_df.shape[0]>1500:\n        tmp = sub_df.loc[np.random.choice(sub_df.index, 1500, False)]\n    else:\n        tmp = sub_df.copy()\n    prepare_dir(f'{outdir}{cluster}/', tmp, GENERATE_MATRIX_CHUNK_TEMPLATE, params)\n    ",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "loop",
        "headings": [
          "Prepare pseudobulk analyses",
          "Loop"
        ]
      },
      "doc_lineno": 230002
    },
    {
      "source": "with open(f'{outdir}snakemake_cmds.txt', 'w') as f:\n    for cluster, sub_df in cell_table.groupby('cluster'):\n        cluster_dir = f'{loop_dir}{cluster}'\n        f.write(f'snakemake -d {cluster_dir} -s {cluster_dir}/Snakefile_master -j {params[\"cpu\"]}\\n')\n        ",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "loop",
        "headings": [
          "Prepare pseudobulk analyses",
          "Loop"
        ]
      },
      "doc_lineno": 240002
    },
    {
      "source": "!cp /data/ref/mm10/genome/mm10.main20.chrom.sizes Tan2021_loop/\n!cp /home/jzhou_salk_edu/sky_workdir/test_schicluster/Tan2021/mm10.dipc.rowsum1000.blf50.merged.bed Tan2021_loop/\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "loop",
        "headings": [
          "Prepare pseudobulk analyses",
          "Loop"
        ]
      },
      "doc_lineno": 250002
    },
    {
      "source": "coollist = glob('/data/test_schicluster/Tan2021/scool/impute/25K/*/*.cool')\ncell_table = pd.DataFrame(coollist, index=[xx.split('/')[-1].replace('.cool', '') for xx in coollist], columns=['cool_path'])\ncell_table = cell_table.loc[metadata.index]\ncell_table['cluster'] = metadata['rnatype'].copy()\n# cell_table['cool_path'] = cell_table['cool_path'].str.replace('/data/test_schicluster', '/anvil/scratch/x-zhou')\ncell_table\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "domain",
        "headings": [
          "Prepare pseudobulk analyses",
          "Domain"
        ]
      },
      "doc_lineno": 280002
    },
    {
      "source": "outdir = '/home/jzhou_salk_edu/sky_workdir/test_schicluster/Tan2021/domain/'\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "domain",
        "headings": [
          "Prepare pseudobulk analyses",
          "Domain"
        ]
      },
      "doc_lineno": 290002
    },
    {
      "source": "for cluster, sub_df in cell_table.groupby('cluster'):\n    os.makedirs(f'{outdir}{cluster}', exist_ok=True)\n    sub_df.to_csv(f'{outdir}{cluster}/cell_table.csv', header=False, index=True)\n    #with open(f'{cluster}/Snakefile_master', 'w') as f:\n    #    f.write(snakemake_str)\n    print(cluster, sub_df.shape[0])\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "domain",
        "headings": [
          "Prepare pseudobulk analyses",
          "Domain"
        ]
      },
      "doc_lineno": 300002
    },
    {
      "source": "params = {\n    'resolution': 25000,\n    'chrom_size_path': '\"/data/ref/mm10/genome/mm10.main20.chrom.sizes\"',\n}\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "domain",
        "headings": [
          "Prepare pseudobulk analyses",
          "Domain"
        ]
      },
      "doc_lineno": 310002
    },
    {
      "source": "chunk_size = 200\nres = 25000\ntotal_chunk_dirs = []\ngroup_chunks = {}\n\nwith open(f'{PACKAGE_DIR}/cool/Snakefile_chunk_template') as tmp:\n    GENERATE_MATRIX_CHUNK_TEMPLATE = tmp.read()\n\nfor group, group_df in cell_table.groupby('cluster'):\n    group_chunks[group] = []\n    if group_df.shape[0] <= chunk_size:\n        this_dir = f'{outdir}{group}_chunk0/'\n        params['cell_table_path'] = f'\"{this_dir}cell_table.csv\"'\n        prepare_dir(this_dir, group_df, GENERATE_MATRIX_CHUNK_TEMPLATE, params)\n        total_chunk_dirs.append(this_dir)\n        group_chunks[group].append(this_dir)\n    else:\n        group_df['chunk'] = [i // chunk_size for i in range(group_df.shape[0])]\n        for chunk, chunk_df in group_df.groupby('chunk'):\n            this_dir = f'{outdir}{group}_chunk{chunk}/'\n            params['cell_table_path'] = f'\"{this_dir}cell_table.csv\"'\n            prepare_dir(this_dir, chunk_df, GENERATE_MATRIX_CHUNK_TEMPLATE, params)\n            total_chunk_dirs.append(this_dir)\n            group_chunks[group].append(this_dir)\n\n            ",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "domain",
        "headings": [
          "Prepare pseudobulk analyses",
          "Domain"
        ]
      },
      "doc_lineno": 320002
    },
    {
      "source": "with open(f'{outdir}snakemake_cmd_step1.txt', 'w') as f:\n    for chunk_dir in total_chunk_dirs:\n        cmd = f'snakemake -d {chunk_dir} --snakefile {chunk_dir}Snakefile_master -j 5 --rerun-incomplete'\n        f.write(cmd + '\\n')\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "domain",
        "headings": [
          "Prepare pseudobulk analyses",
          "Domain"
        ]
      },
      "doc_lineno": 330002
    },
    {
      "source": "params.pop('cell_table_path')\nparams_str = '\\n'.join(f'{k} = {v}' for k, v in params.items())\n\nwith open(f'{PACKAGE_DIR}/cool/Snakefile_group_template') as tmp:\n    GENERATE_MATRIX_GROUP_TEMPLATE = tmp.read()\n\nwith open(f'{outdir}Snakefile', 'w') as f:\n    f.write(params_str + '\\n' + GENERATE_MATRIX_GROUP_TEMPLATE)\n    \nwith open(f'{outdir}snakemake_cmd_step2.txt', 'w') as f:\n    cmd = f'snakemake -d {outdir} --snakefile {outdir}Snakefile -j 10 --rerun-incomplete'\n    f.write(cmd + '\\n')\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "domain",
        "headings": [
          "Prepare pseudobulk analyses",
          "Domain"
        ]
      },
      "doc_lineno": 340002
    },
    {
      "source": "coollist = glob('/data/test_schicluster/Tan2021/scool/impute/100K/*/*.cool')\ncell_table = pd.DataFrame(coollist, index=[xx.split('/')[-1].replace('.cool', '') for xx in coollist], columns=['cool_path'])\ncell_table = cell_table.loc[metadata.index]\ncell_table['cluster'] = metadata['rnatype'].copy()\n# cell_table['cool_path'] = cell_table['cool_path'].str.replace('/data/test_schicluster', '/anvil/scratch/x-zhou')\ncell_table\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "compartment",
        "headings": [
          "Prepare pseudobulk analyses",
          "Compartment"
        ]
      },
      "doc_lineno": 380002
    },
    {
      "source": "outdir = '/home/jzhou_salk_edu/sky_workdir/test_schicluster/Tan2021/compartment/'\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "compartment",
        "headings": [
          "Prepare pseudobulk analyses",
          "Compartment"
        ]
      },
      "doc_lineno": 390002
    },
    {
      "source": "for cluster, sub_df in cell_table.groupby('cluster'):\n    os.makedirs(f'{outdir}{cluster}', exist_ok=True)\n    sub_df.to_csv(f'{outdir}{cluster}/cell_table.csv', header=False, index=True)\n    print(cluster, sub_df.shape[0])\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "compartment",
        "headings": [
          "Prepare pseudobulk analyses",
          "Compartment"
        ]
      },
      "doc_lineno": 400002
    },
    {
      "source": "params = {\n    'resolution': 100000,\n    'chrom_size_path': '\"/data/ref/mm10/genome/mm10.main20.chrom.sizes\"',\n}\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "compartment",
        "headings": [
          "Prepare pseudobulk analyses",
          "Compartment"
        ]
      },
      "doc_lineno": 410002
    },
    {
      "source": "chunk_size = 200\ntotal_chunk_dirs = []\ngroup_chunks = {}\n\nwith open(f'{PACKAGE_DIR}/cool/Snakefile_chunk_template') as tmp:\n    GENERATE_MATRIX_CHUNK_TEMPLATE = tmp.read()\n\nfor group, group_df in cell_table.groupby('cluster'):\n    group_chunks[group] = []\n    if group_df.shape[0] <= chunk_size:\n        this_dir = f'{outdir}{group}_chunk0/'\n        params['cell_table_path'] = f'\"{this_dir}cell_table.csv\"'\n        prepare_dir(this_dir, group_df, GENERATE_MATRIX_CHUNK_TEMPLATE, params)\n        total_chunk_dirs.append(this_dir)\n        group_chunks[group].append(this_dir)\n    else:\n        group_df['chunk'] = [i // chunk_size for i in range(group_df.shape[0])]\n        for chunk, chunk_df in group_df.groupby('chunk'):\n            this_dir = f'{outdir}{group}_chunk{chunk}/'\n            params['cell_table_path'] = f'\"{this_dir}cell_table.csv\"'\n            prepare_dir(this_dir, chunk_df, GENERATE_MATRIX_CHUNK_TEMPLATE, params)\n            total_chunk_dirs.append(this_dir)\n            group_chunks[group].append(this_dir)\n\n            ",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "compartment",
        "headings": [
          "Prepare pseudobulk analyses",
          "Compartment"
        ]
      },
      "doc_lineno": 420002
    },
    {
      "source": "with open(f'{outdir}snakemake_cmd_step1.txt', 'w') as f:\n    for chunk_dir in total_chunk_dirs:\n        cmd = f'snakemake -d {chunk_dir} --snakefile {chunk_dir}Snakefile_master -j 5 --rerun-incomplete'\n        f.write(cmd + '\\n')\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "compartment",
        "headings": [
          "Prepare pseudobulk analyses",
          "Compartment"
        ]
      },
      "doc_lineno": 430002
    },
    {
      "source": "params.pop('cell_table_path')\nparams_str = '\\n'.join(f'{k} = {v}' for k, v in params.items())\n\nwith open(f'{PACKAGE_DIR}/cool/Snakefile_group_template') as tmp:\n    GENERATE_MATRIX_GROUP_TEMPLATE = tmp.read()\n\nwith open(f'{outdir}Snakefile', 'w') as f:\n    f.write(params_str + '\\n' + GENERATE_MATRIX_GROUP_TEMPLATE)\n    \nwith open(f'{outdir}snakemake_cmd_step2.txt', 'w') as f:\n    cmd = f'snakemake -d {outdir} --snakefile {outdir}Snakefile -j 10 --rerun-incomplete'\n    f.write(cmd + '\\n')\n",
      "names": [],
      "example": {
        "document": "Tan2021/prepare",
        "ref_id": "compartment",
        "headings": [
          "Prepare pseudobulk analyses",
          "Compartment"
        ]
      },
      "doc_lineno": 440002
    }
  ],
  "Tan2021/rna_3c_integrate": [
    {
      "source": "import time\nimport numpy as np\nimport pandas as pd\nfrom glob import glob\nimport anndata\nimport scanpy as sc\nimport scanpy.external as sce\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm\nfrom matplotlib import cm as cm\nimport seaborn as sns\nfrom scipy.sparse import csr_matrix\nfrom ALLCools.plot import *\nfrom ALLCools.clustering import *\nfrom ALLCools.integration.seurat_class import SeuratIntegration\nfrom sklearn.decomposition import TruncatedSVD\nfrom sklearn.preprocessing import normalize, OneHotEncoder\nimport pynndescent\n\nmpl.style.use('default')\nmpl.rcParams['pdf.fonttype'] = 42\nmpl.rcParams['ps.fonttype'] = 42\nmpl.rcParams['font.family'] = 'sans-serif'\nmpl.rcParams['font.sans-serif'] = 'Helvetica'\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "gene_hdf = pd.read_hdf(f'/data/test_schicluster/Tan2021/scool/dataset/Tan2021.geneimputescore.hdf', key='data')\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "res = 10000\ngene_meta_path = '/data/ref/mm10/gencode/vm22/gencode.vM22.annotation.gene.flat.tsv.gz'\ngene_meta = pd.read_csv(gene_meta_path, index_col='gene_id', sep='\\t')\ngene_meta['bin_len'] = (gene_meta['end'] // res) - (gene_meta['start'] // res) + 1\n#gene_meta['weight'] = gene_meta['bin_len'] * (gene_meta['bin_len'] + 1) / 2\ngene_meta['weight'] = (gene_meta['bin_len']+2) * (gene_meta['bin_len'] + 1) / 2\n#gene_meta['weight'] = gene_meta['bin_len'].copy()\n\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "indir = '/home/jzhou_salk_edu/sky_workdir/test_schicluster/Tan2021/'\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "chrom_size_path = '/data/ref/mm10/genome/mm10.main.chrom.sizes'\nchromsize = pd.read_csv(chrom_size_path, sep='\\t', header=None, index_col=0)\ngene_meta = gene_meta[gene_meta['chrom'].isin(chromsize.index)]\ngene_meta\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "#gene_hdf = gene_hdf * gene_meta.loc[gene_hdf.columns, 'weight']\n(gene_hdf>0).sum(axis=1)\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "adata = anndata.read_h5ad(f'{indir}Tan2021_dipc.h5ad')\nadata",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "gene3c = anndata.AnnData(gene_hdf.loc[adata.obs.index], obs=adata.obs, var=gene_meta.loc[gene_hdf.columns])\ngene3c\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "chrom_to_remove = ['chrL', 'chrM', 'chrX', 'chrY']\nchrfilter = ~gene3c.var['chrom'].isin(chrom_to_remove)\ngene3c = gene3c[:, chrfilter]\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "genefilter = ((gene3c.X>0).sum(axis=0)>10)\ngene3c = gene3c[:, genefilter]\ngene3c\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "gene3c.var.index.name = 'gene_id'\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "gene3c.raw = gene3c.copy()\n#sc.pp.highly_variable_genes(gene3c, n_top_genes=2000, flavor='seurat_v3')\ngene3c.write_h5ad(f'cell_{gene3c.shape[0]}_gene3C.h5ad')\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 130002
    },
    {
      "source": "# gene3c = anndata.read_h5ad(f'{indir}cell_8225_gene3C_impute.h5ad')\ngene3c = anndata.read_h5ad(glob(f'cell_*_gene3C.h5ad')[0])\ngene3c",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "gene_meta",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 150002
    },
    {
      "source": "gene3c.var.index = gene_meta.loc[gene3c.var.index, 'gene_name']\ngene3c.var_names_make_unique()",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 160002
    },
    {
      "source": "sc.pp.normalize_total(gene3c, target_sum=np.median(gene3c.X.sum(axis=1)))\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 170002
    },
    {
      "source": "expr = anndata.read_h5ad(f'{indir}Tan2021_rna.h5ad')\nexpr",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 180002
    },
    {
      "source": "expr = anndata.AnnData(X=expr.raw.X, obs=expr.obs, var=expr.raw.var, raw=expr.raw, obsm=expr.obsm, uns=expr.uns, obsp=expr.obsp)\nexpr = expr[:, expr.var.index.isin(gene3c.var.index)]\nexpr",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 190002
    },
    {
      "source": "gene3c = gene3c[:, gene3c.var.index.isin(expr.var.index)]\ngene3c",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 200002
    },
    {
      "source": "tmp = np.std(gene3c.X, axis=0)\nfrom scipy.stats import rankdata\ntmp = rankdata(-tmp)\ngene3c.var['highly_variable'] = (tmp<2000)\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 210002
    },
    {
      "source": "gene3c = gene3c[:, gene3c.var['highly_variable']]\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 220002
    },
    {
      "source": "expr = expr[:, gene3c.var.index]\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 230002
    },
    {
      "source": "# sc.pp.highly_variable_genes(expr, n_top_genes=2000)\n# expr = expr[:, expr.var.highly_variable]\nsc.pp.regress_out(expr, ['nUMI'])\nsc.pp.scale(expr, max_value=10)\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 240002
    },
    {
      "source": "dim = 50\nmodel = TruncatedSVD(n_components=dim, algorithm='arpack')\nmatrix_reduce = model.fit_transform(expr.X)\nmatrix_reduce = matrix_reduce / model.singular_values_\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 250002
    },
    {
      "source": "expr.obsm['rna_pca_all'] = matrix_reduce.copy()\nsignificant_pc_test(expr, p_cutoff=0.1, update=False, obsm='rna_pca_all')\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 260002
    },
    {
      "source": "def dump_embedding(adata, name, n_dim=2):\n    # put manifold coordinates into adata.obs\n    for i in range(n_dim):\n        adata.obs[f'{name}_{i}'] = adata.obsm[f'X_{name}'][:, i]\n    return adata\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 270002
    },
    {
      "source": "knn = 25\nexpr.obsm['X_pca'] = normalize(expr.obsm['rna_pca_all'][:, :30], axis=1)\nsc.pp.neighbors(expr, n_neighbors=knn, use_rep='X_pca')\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 280002
    },
    {
      "source": "sc.tl.umap(expr, maxiter=200, random_state=0)\nexpr = dump_embedding(expr, 'umap')\nexpr.obsm['rna_u30_umap'] = expr.obsm['X_umap'].copy()\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 290002
    },
    {
      "source": "fig, axes = plt.subplots(2, 2, figsize=(12, 8), dpi=300, constrained_layout=True)\n_ = continuous_scatter(ax=axes[0,0],\n                       data=expr.obs,\n                       hue='nUMI',\n                       coord_base='umap',\n                       max_points=None,\n                       labelsize=10,\n                       )\n_ = categorical_scatter(data=expr.obs,\n                        ax=axes[0,1],\n                        coord_base='umap',\n                        hue='age',\n                        palette='rainbow',\n                        labelsize=10,\n                        show_legend=True)\n_ = categorical_scatter(ax=axes[1,0],\n                        data=expr.obs,\n                        hue='region',\n                        coord_base='umap',\n                        # text_anno='region',\n                        # palette='tab10',\n                        labelsize=10,\n                        show_legend=True\n                       )\n_ = categorical_scatter(ax=axes[1,1],\n                        data=expr.obs,\n                        hue='cluster',\n                        coord_base='umap',\n                        # text_anno='cluster',\n                        palette='tab20',\n                        labelsize=10,\n                        # show_legend=True\n                       )\n\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 300002
    },
    {
      "source": "gene3c",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 310002
    },
    {
      "source": "sc.pp.regress_out(gene3c, ['contacts'])\nsc.pp.scale(gene3c, max_value=10)\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 330002
    },
    {
      "source": "gene3c.obsm['X_pca'] = model.transform(gene3c.X) / model.singular_values_\ngene3c.obsm['X_pca'] = normalize(gene3c.obsm['X_pca'][:, :30], axis=1)\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 340002
    },
    {
      "source": "expr.obs['Modality'] = 'RNA'\ngene3c.obs['Modality'] = '3C'",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 350002
    },
    {
      "source": "adata_list = [expr, gene3c]\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 360002
    },
    {
      "source": "integrator = SeuratIntegration()",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 370002
    },
    {
      "source": "anchor = integrator.find_anchor(adata_list,\n                                k_local=None,\n                                key_local='X_pca',\n                                k_anchor=5,\n                                key_anchor='X',\n                                dim_red='cca',\n                                max_cc_cells=50000,\n                                k_score=30,\n                                k_filter=None,\n                                scale1=False,\n                                scale2=False,\n                                #scale =[False, True]\n                                n_components=30,\n                                n_features=200,\n                                alignments=[[[0], [1]]])\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 380002
    },
    {
      "source": "start_time = time.time()\ncorrected = integrator.integrate(key_correct='X_pca',\n                                 row_normalize=True,\n                                 n_components=30,\n                                 k_weight=100,\n                                 sd=1,\n                                 alignments=[[[0], [1]]])\n\nprint(time.time() - start_time)\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 390002
    },
    {
      "source": "ncell = np.sum([xx.shape[0] for xx in adata_list])\nadata_merge = anndata.AnnData(\n    X=np.ones((ncell, 1)), obs=pd.concat([xx.obs for xx in adata_list], axis=0)\n)\nadata_merge\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 400002
    },
    {
      "source": "adata_merge.obsm['u30_seuratcc30nofilter'] = np.concatenate(corrected, axis=0)\nadata_merge.obsm['X_pca'] = normalize(adata_merge.obsm['u30_seuratcc30nofilter'][:, :30], axis=1)\n# sce.pp.harmony_integrate(adata_merge, 'Modality', max_iter_harmony=30, random_state=0)\n# adata_merge.obsm['log_reghvg_cca_u25hm'] = adata_merge.obsm['X_pca_harmony'].copy()\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 410002
    },
    {
      "source": "knn = 25\nsc.pp.neighbors(adata_merge, n_neighbors=knn, use_rep='u30_seuratcc30nofilter')\nsc.tl.umap(adata_merge, maxiter=200, random_state=0)\nadata_merge = dump_embedding(adata_merge, 'umap')\nadata_merge.obsm['u30_seuratcc30nofilter_u30_umap'] = adata_merge.obsm['X_umap'].copy()\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 420002
    },
    {
      "source": "legage = np.sort(adata_merge.obs['age'].unique())\npalage = {xx:yy for xx,yy in zip(legage, sns.color_palette('hls', len(legage)))}\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 430002
    },
    {
      "source": "# adata_merge.obsm['X_umap'] = adata_merge.obsm['u50_seuratcc30nofilter_u30_umap'].copy()\n# dump_embedding(adata_merge, 'umap')\n\nfig, axes = plt.subplots(2, 2, figsize=(12, 8), dpi=300, constrained_layout=True)\ntmp = adata_merge.obs.loc[adata_merge.obs['Modality']=='3C']\nax = axes[0,0]\nax.scatter(adata_merge.obs['umap_0'], adata_merge.obs['umap_1'], c='#e0e0e0', edgecolors='none', s=1, rasterized=True)\n_ = categorical_scatter(data=tmp,\n                        ax=ax,\n                        coord_base='umap',\n                        hue='age',\n                        palette=palage,\n                        labelsize=10,\n                        show_legend=True)\n\nax = axes[0,1]\nax.scatter(adata_merge.obs['umap_0'], adata_merge.obs['umap_1'], c='#e0e0e0', edgecolors='none', s=1, rasterized=True)\n_ = categorical_scatter(data=tmp,\n                        ax=ax,\n                        coord_base='umap',\n                        hue='leiden',\n                        text_anno='leiden',\n                        palette='tab20',\n                        labelsize=10,\n                        #show_legend=True\n                       )\n\ntmp = adata_merge.obs.loc[adata_merge.obs['Modality']=='RNA']\nax = axes[1,0]\nax.scatter(adata_merge.obs['umap_0'], adata_merge.obs['umap_1'], c='#e0e0e0', edgecolors='none', s=1, rasterized=True)\n_ = categorical_scatter(data=tmp,\n                        ax=ax,\n                        coord_base='umap',\n                        hue='age',\n                        palette=palage,\n                        labelsize=10,\n                        show_legend=True)\n\nax = axes[1,1]\nax.scatter(adata_merge.obs['umap_0'], adata_merge.obs['umap_1'], c='#e0e0e0', edgecolors='none', s=1, rasterized=True)\n_ = categorical_scatter(data=tmp,\n                        ax=ax,\n                        coord_base='umap',\n                        hue='cluster',\n                        # text_anno='cluster',\n                        palette='tab20',\n                        labelsize=10,\n                        #show_legend=True\n                       )\n\n\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 440002
    },
    {
      "source": "adata_merge.obs.loc[:,adata_merge.obs.dtypes == 'object'] = adata_merge.obs.loc[:,adata_merge.obs.dtypes == 'object'].astype(str)\nadata_merge.write_h5ad('Tan2021_rna3c.h5ad')\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 450002
    },
    {
      "source": "rna_cell = (adata_merge.obs['Modality']=='RNA')\nhic_cell = (adata_merge.obs['Modality']=='3C')\nprint(rna_cell.sum(), hic_cell.sum())\n\nstart_time = time.time()\nindex = pynndescent.NNDescent(adata_merge.obsm['X_pca'][rna_cell], metric='euclidean', n_neighbors=50, random_state=0, n_jobs=-1)\nprint(time.time() - start_time)\nG, D = index.query(adata_merge.obsm['X_pca'][hic_cell], k=15)\nprint(time.time() - start_time)\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 460002
    },
    {
      "source": "chunk_size = 50000\nsd = 1\nstart_time = time.time()\ncellfilter = D[:, -1] == 0\nD = 1 - D / D[:, -1][:, None]\nD[cellfilter] = 1\nD = 1 - np.exp(-D * (sd**2) / 4)\nD = D / (np.sum(D, axis=1) + 1e-6)[:, None]\nprint(time.time() - start_time)\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 470002
    },
    {
      "source": "rna_cell = rna_cell.index[rna_cell]\nhic_cell = hic_cell.index[hic_cell]\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 480002
    },
    {
      "source": "enc = OneHotEncoder()\n# enc.fit(adata_merge.obs.loc[aibs_cell, ['L3']].values.astype(str))\nlabelref = enc.fit_transform(adata_merge.obs.loc[rna_cell, 'cluster'].astype(str)[:, None])\ncluster = pd.DataFrame(index=hic_cell, columns=['rnatype', 'score'], dtype=str)\nfor chunk_start in range(0, len(hic_cell), chunk_size):\n    result = (\n        D[chunk_start : (chunk_start + chunk_size), :, None]\n        * labelref[G[chunk_start : (chunk_start + chunk_size)].flatten()]\n        .toarray()\n        .reshape((-1, 15, enc.categories_[0].shape[0]))\n    ).sum(axis=1)\n    result = pd.DataFrame(\n        result,\n        columns=enc.categories_[0],\n        index=hic_cell[chunk_start : (chunk_start + chunk_size)],\n    )\n    result = result.loc[:, result.columns != \"nan\"]\n    cluster.loc[result.index, \"rnatype\"] = result.idxmax(axis=1).values\n    cluster.loc[result.index, \"score\"] = result.max(axis=1).values\n    print(chunk_start)\n\nprint(time.time() - start_time)\ncluster.to_hdf(\"DipC_rnacluster.hdf\", key=\"data\")\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 490002
    },
    {
      "source": "cluster['dipctype'] = adata_merge.obs.loc[hic_cell, 'cell-type cluster']\nadata_merge.obs.loc[hic_cell, 'cluster'] = cluster['rnatype']",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 500002
    },
    {
      "source": "# adata_merge.obsm['X_umap'] = adata_merge.obsm['u50_seuratcc30nofilter_u30_umap'].copy()\n# dump_embedding(adata_merge, 'umap')\n\nfig, axes = plt.subplots(2, 2, figsize=(12, 8), dpi=300, constrained_layout=True)\ntmp = adata_merge.obs.loc[adata_merge.obs['Modality']=='3C']\nax = axes[0,0]\nax.scatter(adata_merge.obs['umap_0'], adata_merge.obs['umap_1'], c='#e0e0e0', edgecolors='none', s=1, rasterized=True)\n_ = categorical_scatter(data=tmp,\n                        ax=ax,\n                        coord_base='umap',\n                        hue='age',\n                        palette=palage,\n                        labelsize=10,\n                        show_legend=True)\n\nax = axes[0,1]\nax.scatter(adata_merge.obs['umap_0'], adata_merge.obs['umap_1'], c='#e0e0e0', edgecolors='none', s=1, rasterized=True)\n_ = categorical_scatter(data=tmp,\n                        ax=ax,\n                        coord_base='umap',\n                        hue='cluster',\n                        # text_anno='celltype',\n                        palette='tab20',\n                        labelsize=10,\n                        #show_legend=True\n                       )\n\ntmp = adata_merge.obs.loc[adata_merge.obs['Modality']=='RNA']\nax = axes[1,0]\nax.scatter(adata_merge.obs['umap_0'], adata_merge.obs['umap_1'], c='#e0e0e0', edgecolors='none', s=1, rasterized=True)\n_ = categorical_scatter(data=tmp,\n                        ax=ax,\n                        coord_base='umap',\n                        hue='age',\n                        palette=palage,\n                        labelsize=10,\n                        show_legend=True)\n\nax = axes[1,1]\nax.scatter(adata_merge.obs['umap_0'], adata_merge.obs['umap_1'], c='#e0e0e0', edgecolors='none', s=1, rasterized=True)\n_ = categorical_scatter(data=tmp,\n                        ax=ax,\n                        coord_base='umap',\n                        hue='cluster',\n                        # text_anno='cluster',\n                        palette='tab20',\n                        labelsize=10,\n                        #show_legend=True\n                       )\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 510002
    },
    {
      "source": "cf_matrix = cluster[['dipctype','rnatype']].value_counts().unstack().fillna(0)\ncf_matrix = cf_matrix / np.sqrt(cf_matrix.sum(axis=1)[:,None]) / np.sqrt(cf_matrix.sum(axis=0))",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 520002
    },
    {
      "source": "idx = pd.Series(np.arange(cf_matrix.shape[1]), cf_matrix.columns)",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 530002
    },
    {
      "source": "fig, ax = plt.subplots(figsize=(8,4), dpi=300)\nsns.heatmap(cf_matrix.iloc[np.argsort(idx[np.argmax(cf_matrix.values, axis=1)])], ax=ax)\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 540002
    },
    {
      "source": "cluster['rnatype'].value_counts()",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 550002
    },
    {
      "source": "cluster.to_csv('Tan2021_dipc_cluster.csv.gz', )",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 560002
    },
    {
      "source": "cluster['dipcleiden'] = adata_merge.obs.loc[hic_cell, 'leiden']\ncf_matrix = cluster[['dipcleiden','rnatype']].value_counts().unstack().fillna(0)\ncf_matrix = cf_matrix / np.sqrt(cf_matrix.sum(axis=1)[:,None]) / np.sqrt(cf_matrix.sum(axis=0))\nidx = pd.Series(np.arange(cf_matrix.shape[1]), cf_matrix.columns)\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 580002
    },
    {
      "source": "sns.clustermap(cf_matrix, figsize=(8,8))\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_3c_integrate",
        "ref_id": "assign-dipc-cells-to-rna-clusters",
        "headings": [
          "Assign DipC cells to RNA clusters"
        ]
      },
      "doc_lineno": 590002
    }
  ],
  "Tan2021/rna_clustering": [
    {
      "source": "import numpy as np\nimport pandas as pd\nfrom glob import glob\nimport anndata\nimport scanpy as sc\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm\nfrom matplotlib import cm as cm\nimport seaborn as sns\nfrom scipy.sparse import csr_matrix\nfrom ALLCools.plot import *\nfrom ALLCools.clustering import *\nfrom sklearn.decomposition import TruncatedSVD\nfrom sklearn.preprocessing import normalize\n\nmpl.style.use('default')\nmpl.rcParams['pdf.fonttype'] = 42\nmpl.rcParams['ps.fonttype'] = 42\nmpl.rcParams['font.family'] = 'sans-serif'\nmpl.rcParams['font.sans-serif'] = 'Helvetica'\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_clustering",
        "ref_id": "scrna-malbac-clustering",
        "headings": [
          "scRNA(MALBAC) clustering"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "indir = '/home/jzhou_salk_edu/sky_workdir/test_schicluster/Tan2021/'\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_clustering",
        "ref_id": "scrna-malbac-clustering",
        "headings": [
          "scRNA(MALBAC) clustering"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "data = pd.read_csv(f'{indir}other_data/GSE162509_UMIcount_mouse_decon_filtered_genes.tsv.gz', index_col=0, header=0, sep='\\t')\ndata\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_clustering",
        "ref_id": "scrna-malbac-clustering",
        "headings": [
          "scRNA(MALBAC) clustering"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "meta = pd.read_csv(f'{indir}other_data/GSE162509_mapStat_mouse_filter.txt.gz', sep='\\t', index_col=0, header=0)\nmeta",
      "names": [],
      "example": {
        "document": "Tan2021/rna_clustering",
        "ref_id": "scrna-malbac-clustering",
        "headings": [
          "scRNA(MALBAC) clustering"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "gene_meta = pd.read_csv('/data/ref/mm10/gencode/vm22/gencode.vM22.annotation.gene.flat.tsv.gz', header=0, index_col=None, sep='\\t')\ngene_meta",
      "names": [],
      "example": {
        "document": "Tan2021/rna_clustering",
        "ref_id": "scrna-malbac-clustering",
        "headings": [
          "scRNA(MALBAC) clustering"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "gene_meta = gene_meta.loc[~gene_meta['gene_name'].duplicated()]\ngene_meta = gene_meta.set_index('gene_name')[['chrom', 'start', 'end', 'gene_id', 'strand']]\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_clustering",
        "ref_id": "scrna-malbac-clustering",
        "headings": [
          "scRNA(MALBAC) clustering"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "data = data.loc[:, data.columns.isin(gene_meta.index)]",
      "names": [],
      "example": {
        "document": "Tan2021/rna_clustering",
        "ref_id": "scrna-malbac-clustering",
        "headings": [
          "scRNA(MALBAC) clustering"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "adata = anndata.AnnData(csr_matrix(data.values), \n                        obs=meta.loc[data.index, ['Genes', 'nUMI']],\n                        var=gene_meta.loc[data.columns]\n                      )\nadata",
      "names": [],
      "example": {
        "document": "Tan2021/rna_clustering",
        "ref_id": "scrna-malbac-clustering",
        "headings": [
          "scRNA(MALBAC) clustering"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "adata.write_h5ad('Tan2021_rna.h5ad')\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_clustering",
        "ref_id": "scrna-malbac-clustering",
        "headings": [
          "scRNA(MALBAC) clustering"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "adata = anndata.read_h5ad('Tan2021_rna.h5ad')\nadata",
      "names": [],
      "example": {
        "document": "Tan2021/rna_clustering",
        "ref_id": "scrna-malbac-clustering",
        "headings": [
          "scRNA(MALBAC) clustering"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "cluster = pd.read_csv(f'{indir}metadata_major_cell_types.txt', sep='\\t', header=None, index_col=0)[1]\ncluster_neu = pd.read_csv(f'{indir}metadata_neuron_cell_types.txt', sep='\\t', header=None, index_col=0)[1]\ncluster.loc[cluster_neu.index] = cluster_neu.copy()\ncluster.value_counts()",
      "names": [],
      "example": {
        "document": "Tan2021/rna_clustering",
        "ref_id": "scrna-malbac-clustering",
        "headings": [
          "scRNA(MALBAC) clustering"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "adata.obs['region'] = [xx.split('-')[0].split('_')[-1][-2:] for xx in adata.obs.index]\nadata.obs['age'] = [xx.split('-')[0].split('_')[-1][1:-2] for xx in adata.obs.index]\nadata.obs['age'] = adata.obs['age'].astype(int)\nadata.obs['cluster'] = cluster.copy()",
      "names": [],
      "example": {
        "document": "Tan2021/rna_clustering",
        "ref_id": "scrna-malbac-clustering",
        "headings": [
          "scRNA(MALBAC) clustering"
        ]
      },
      "doc_lineno": 130002
    },
    {
      "source": "sc.pp.filter_genes(adata, min_cells=10)\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_clustering",
        "ref_id": "scrna-malbac-clustering",
        "headings": [
          "scRNA(MALBAC) clustering"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "sc.pp.highly_variable_genes(adata, n_top_genes=3000, flavor='seurat_v3')\nadata.raw = adata.copy()\nadata = adata[:, adata.var['highly_variable']].copy()\nadata.X.data = adata.X.data / np.repeat(adata.obs['nUMI'].values, adata.X.getnnz(axis=1)) * adata.obs['nUMI'].median()\nsc.pp.log1p(adata)\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_clustering",
        "ref_id": "scrna-malbac-clustering",
        "headings": [
          "scRNA(MALBAC) clustering"
        ]
      },
      "doc_lineno": 150002
    },
    {
      "source": "model = TruncatedSVD(n_components=50, algorithm='arpack', random_state=0) \nmodel.fit(adata.X)\nsel_dim = (model.singular_values_ != 0)\nprint(sel_dim.sum())\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_clustering",
        "ref_id": "scrna-malbac-clustering",
        "headings": [
          "scRNA(MALBAC) clustering"
        ]
      },
      "doc_lineno": 160002
    },
    {
      "source": "data = model.transform(adata.X)\nadata.obsm['rna_pca_all'] = data / model.singular_values_\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_clustering",
        "ref_id": "scrna-malbac-clustering",
        "headings": [
          "scRNA(MALBAC) clustering"
        ]
      },
      "doc_lineno": 170002
    },
    {
      "source": "significant_pc_test(adata, p_cutoff=0.1, update=False, obsm='rna_pca_all')\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_clustering",
        "ref_id": "scrna-malbac-clustering",
        "headings": [
          "scRNA(MALBAC) clustering"
        ]
      },
      "doc_lineno": 180002
    },
    {
      "source": "adata.obsm['X_pca'] = normalize(adata.obsm['rna_pca_all'][:, :30], axis=1)\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_clustering",
        "ref_id": "scrna-malbac-clustering",
        "headings": [
          "scRNA(MALBAC) clustering"
        ]
      },
      "doc_lineno": 190002
    },
    {
      "source": "def dump_embedding(adata, name, n_dim=2):\n    # put manifold coordinates into adata.obs\n    for i in range(n_dim):\n        adata.obs[f'{name}_{i}'] = adata.obsm[f'X_{name}'][:, i]\n    return adata\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_clustering",
        "ref_id": "scrna-malbac-clustering",
        "headings": [
          "scRNA(MALBAC) clustering"
        ]
      },
      "doc_lineno": 200002
    },
    {
      "source": "knn = 25\nsc.pp.neighbors(adata, n_neighbors=knn, use_rep='X_pca')\nsc.tl.umap(adata, maxiter=200, random_state=0)\nadata = dump_embedding(adata, 'umap')\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_clustering",
        "ref_id": "scrna-malbac-clustering",
        "headings": [
          "scRNA(MALBAC) clustering"
        ]
      },
      "doc_lineno": 210002
    },
    {
      "source": "fig, axes = plt.subplots(2, 2, figsize=(10, 8), dpi=300, constrained_layout=True)\n_ = continuous_scatter(ax=axes[0,0],\n                       data=adata.obs,\n                       hue='Genes',\n                       coord_base='umap',\n                       #max_points=None,\n                       labelsize=10,\n                       s=4)\n_ = categorical_scatter(data=adata.obs,\n                        ax=axes[0,1],\n                        coord_base='umap',\n                        hue='age',\n                        palette='rainbow',\n                        labelsize=10,\n                        show_legend=True)\n_ = categorical_scatter(ax=axes[1,0],\n                        data=adata.obs,\n                        hue='region',\n                        coord_base='umap',\n                        # text_anno='region',\n                        # palette='tab10',\n                        labelsize=10,\n                        show_legend=True\n                       )\n_ = categorical_scatter(ax=axes[1,1],\n                        data=adata.obs,\n                        hue='cluster',\n                        coord_base='umap',\n                        # text_anno='cluster',\n                        palette='tab20',\n                        labelsize=10,\n                        # show_legend=True\n                       )\n\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_clustering",
        "ref_id": "scrna-malbac-clustering",
        "headings": [
          "scRNA(MALBAC) clustering"
        ]
      },
      "doc_lineno": 220002
    },
    {
      "source": "fig, axes = plt.subplots(2, 2, figsize=(10, 8), dpi=300, constrained_layout=True)\n_ = continuous_scatter(ax=axes[0,0],\n                       data=adata.obs,\n                       hue='Genes',\n                       coord_base='umap',\n                       #max_points=None,\n                       labelsize=10,\n                       s=4)\n_ = categorical_scatter(data=adata.obs,\n                        ax=axes[0,1],\n                        coord_base='umap',\n                        hue='age',\n                        palette='rainbow',\n                        labelsize=10,\n                        show_legend=True)\n_ = categorical_scatter(ax=axes[1,0],\n                        data=adata.obs,\n                        hue='region',\n                        coord_base='umap',\n                        # text_anno='region',\n                        # palette='tab10',\n                        labelsize=10,\n                        show_legend=True\n                       )\n_ = categorical_scatter(ax=axes[1,1],\n                        data=adata.obs,\n                        hue='cluster',\n                        coord_base='umap',\n                        # text_anno='cluster',\n                        palette='tab20',\n                        labelsize=10,\n                        # show_legend=True\n                       )\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_clustering",
        "ref_id": "scrna-malbac-clustering",
        "headings": [
          "scRNA(MALBAC) clustering"
        ]
      },
      "doc_lineno": 230002
    },
    {
      "source": "fig, axes = plt.subplots(2, 2, figsize=(10, 8), dpi=300, constrained_layout=True)\n_ = continuous_scatter(ax=axes[0,0],\n                       data=adata.obs,\n                       hue='Genes',\n                       coord_base='umap',\n                       #max_points=None,\n                       labelsize=10,\n                       s=4)\n_ = categorical_scatter(data=adata.obs,\n                        ax=axes[0,1],\n                        coord_base='umap',\n                        hue='age',\n                        palette='rainbow',\n                        labelsize=10,\n                        show_legend=True)\n_ = categorical_scatter(ax=axes[1,0],\n                        data=adata.obs,\n                        hue='region',\n                        coord_base='umap',\n                        # text_anno='region',\n                        # palette='tab10',\n                        labelsize=10,\n                        show_legend=True\n                       )\n_ = categorical_scatter(ax=axes[1,1],\n                        data=adata.obs,\n                        hue='cluster',\n                        coord_base='umap',\n                        # text_anno='cluster',\n                        palette='tab20',\n                        labelsize=10,\n                        # show_legend=True\n                       )\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_clustering",
        "ref_id": "scrna-malbac-clustering",
        "headings": [
          "scRNA(MALBAC) clustering"
        ]
      },
      "doc_lineno": 240002
    },
    {
      "source": "adata.write_h5ad('Tan2021_rna.h5ad')\n",
      "names": [],
      "example": {
        "document": "Tan2021/rna_clustering",
        "ref_id": "scrna-malbac-clustering",
        "headings": [
          "scRNA(MALBAC) clustering"
        ]
      },
      "doc_lineno": 250002
    }
  ],
  "api/comp_concatcell_chr/index": [],
  "api/comp_cpg_cell/index": [],
  "api/domain_concatcell_chr/index": [],
  "api/domain_insulation_cell/index": [],
  "api/embed_concatcell_chr/index": [],
  "api/embed_mergechr/index": [],
  "api/gene_score/index": [],
  "api/generatematrix_cell/index": [],
  "api/impute_cell/index": [],
  "api/loop_bkg_cell/index": [],
  "api/loop_mergechr/index": [],
  "api/loop_sumcell_chr/index": [],
  "api/schicluster/__main__/index": [
    {
      "source": "\"\"\"\nscHiCluster is a toolkit for single-cell HiC data preprocessing, imputation, and clustering analysis.\n\nCurrent Tool List in scHiCluster:\n\n\"\"\"",
      "names": [],
      "example": {
        "document": "api/schicluster/__main__/index",
        "ref_id": "module-contents",
        "headings": [
          "schicluster.__main__",
          "Module Contents"
        ]
      },
      "doc_lineno": 30
    }
  ],
  "api/schicluster/_hicluster_internal/index": [
    {
      "source": "\"\"\"\nhic-internal is used for automation, not intend to be used by end user.\nUse hicluster instead.\n\"\"\"",
      "names": [],
      "example": {
        "document": "api/schicluster/_hicluster_internal/index",
        "ref_id": "module-contents",
        "headings": [
          "schicluster._hicluster_internal",
          "Module Contents"
        ]
      },
      "doc_lineno": 21
    }
  ],
  "api/schicluster/_version/index": [],
  "api/schicluster/compartment/call_compartment/index": [],
  "api/schicluster/compartment/index": [],
  "api/schicluster/cool/contact_distance/index": [],
  "api/schicluster/cool/index": [],
  "api/schicluster/cool/merge/index": [],
  "api/schicluster/cool/remove_blacklist/index": [],
  "api/schicluster/cool/scool/index": [],
  "api/schicluster/cool/utilities/index": [],
  "api/schicluster/dev/concat_cell/index": [],
  "api/schicluster/dev/generate_matrix/index": [],
  "api/schicluster/dev/imputecell/index": [],
  "api/schicluster/dev/index": [],
  "api/schicluster/dev/loop_sc/index": [],
  "api/schicluster/dev/merge_cell/index": [],
  "api/schicluster/diff/domain/index": [],
  "api/schicluster/diff/index": [],
  "api/schicluster/diff/loop/index": [],
  "api/schicluster/domain/call_domain/index": [],
  "api/schicluster/domain/index": [],
  "api/schicluster/embedding/calc_embedding/index": [],
  "api/schicluster/embedding/index": [],
  "api/schicluster/impute/impute_chromosome/index": [],
  "api/schicluster/impute/index": [],
  "api/schicluster/impute/merge_cell_to_group/index": [],
  "api/schicluster/impute/snakemake/index": [],
  "api/schicluster/index": [],
  "api/schicluster/loop/compare_loop/index": [],
  "api/schicluster/loop/index": [],
  "api/schicluster/loop/loop_bkg/index": [],
  "api/schicluster/loop/loop_calling/index": [],
  "api/schicluster/loop/merge_cell_to_group/index": [],
  "api/schicluster/loop/merge_group/index": [],
  "api/schicluster/loop/merge_raw_matrix/index": [],
  "api/schicluster/loop/shuffle_fdr/index": [],
  "api/schicluster/loop/snakemake/index": [],
  "api/schicluster/schicluster/index": [],
  "api/schicluster/zarr/cool_ds/index": [],
  "api/schicluster/zarr/index": [],
  "api/schicluster/zarr/loop_ds/index": [],
  "command_line/hicluster_compartment": [],
  "command_line/hicluster_contact_distance": [],
  "command_line/hicluster_cpg_ratio": [],
  "command_line/hicluster_domain": [],
  "command_line/hicluster_embedding": [],
  "command_line/hicluster_filter_contact": [],
  "command_line/hicluster_gene_score": [],
  "command_line/hicluster_merge_cell_raw": [],
  "command_line/hicluster_merge_cool": [],
  "command_line/hicluster_prepare_impute": [],
  "diagram": [],
  "hba/compartment_majortype/01.call": [
    {
      "source": "import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport anndata\nimport scanpy as sc\nfrom glob import glob\nimport time\nimport cooler\nimport hba_data\nfrom itertools import cycle, islice\nfrom sklearn.decomposition import PCA\nfrom scipy.stats import pearsonr\nfrom concurrent.futures import ProcessPoolExecutor, as_completed\n\nmpl.style.use('default')\nmpl.rcParams['pdf.fonttype'] = 42\nmpl.rcParams['ps.fonttype'] = 42\nmpl.rcParams['font.family'] = 'sans-serif'\nmpl.rcParams['font.sans-serif'] = 'Helvetica'\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/01.call",
        "ref_id": "call-compartment",
        "headings": [
          "Call compartment"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "indir = '/home/jzhou_salk_edu/sky_workdir/hba/loop_majortype/'\noutdir = '/home/jzhou_salk_edu/sky_workdir/hba/compartment_majortype/'\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/01.call",
        "ref_id": "call-compartment",
        "headings": [
          "Call compartment"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "res = 100000\nchrom_size_path = '/home/jzhou_salk_edu/sky_workdir/hba/ref/hg38.main.chrom.sizes'\nchrom_sizes = cooler.read_chromsizes(chrom_size_path, all_names=True)\nchrom_sizes = chrom_sizes.iloc[:23]\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/01.call",
        "ref_id": "call-compartment",
        "headings": [
          "Call compartment"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "cpg = pd.read_csv('/home/jzhou_salk_edu/sky_workdir/hba/ref/hg38.100kbin.CpG.txt', header=0, index_col=3, sep='\\t')\ncpg['CpG_density'] = cpg['14_user_patt_count'] / (cpg['13_seq_len'] - cpg['11_num_N'])\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/01.call",
        "ref_id": "call-compartment",
        "headings": [
          "Call compartment"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "Qall = []\nbinall = []\nct = 'merged'\n# cool = cooler.Cooler(f'/gale/netapp/entex/HBA/snm3C/compartment_majortype/{ct}/{ct}.raw.mcool::resolutions/100000')\ncool = cooler.Cooler(f'{indir}{ct}/{ct}/{ct}.raw.mcool::resolutions/100000')\nfig, axes = plt.subplots(5, 5, figsize=(15,15))\nfor i,c in enumerate(chrom_sizes.index):\n    Q = cool.matrix(balance=False, sparse=True).fetch(c).toarray()\n    Q = Q - np.diag(np.diag(Q))\n    rowsum = Q.sum(axis=0)\n    thres = [np.percentile(rowsum[rowsum>0], 50), np.percentile(rowsum[rowsum>0], 99)]\n    thres.append(thres[0]*2-thres[1])\n    ax = axes.flatten()[i]\n    sns.histplot(rowsum, bins=100, ax=ax)\n    for t in thres:\n        ax.plot([t, t], [0, ax.get_ylim()[1]*0.5], c='r')\n    ax.set_title(c)\n    binfilter = (rowsum>thres[-1])\n    binall.append(binfilter)\n    Q = Q[binfilter][:, binfilter]\n    Qall.append(Q)\n    print(c)\n\nfor i in range(chrom_sizes.shape[0], axes.flatten().shape[0]):\n    axes.flatten()[i].axis('off')\n    ",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/01.call",
        "ref_id": "fit-pc-model-with-merged-raw",
        "headings": [
          "Call compartment",
          "Fit PC model with merged raw"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "fig, axes = plt.subplots(5, 5, figsize=(15,15))\nfor i,c in enumerate(chrom_sizes.index):\n    ax = axes.flatten()[i]\n    n_bins = int(chrom_sizes[c] // 100000) + 1\n    tmp = np.zeros((n_bins, n_bins))\n    tmp[np.ix_(binall[i], binall[i])] = Qall[i]\n    ax.imshow(tmp, cmap='bwr', vmin=-np.percentile(Qall[i], 95), vmax=np.percentile(Qall[i], 95))\n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.set_title(c, fontsize=15)\n\nfor i in range(chrom_sizes.shape[0], axes.flatten().shape[0]):\n    axes.flatten()[i].axis('off')\n    \nplt.tight_layout()\n# plt.savefig(f'{indir}/plot/celltype_A_decay.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/01.call",
        "ref_id": "fit-pc-model-with-merged-raw",
        "headings": [
          "Call compartment",
          "Fit PC model with merged raw"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "# comp = pd.read_hdf(f'{indir}compartment_majortype/comp_raw_merged.hdf', key='data')\n\nCall = []\npcall = []\nmodelall = []\nfor k,chrom in enumerate(chrom_sizes.index[:-1]):\n    Q = Qall[k].copy()\n    decay = np.array([np.mean(np.diag(Q, i)) for i in range(Q.shape[0])])\n    E = np.zeros(Q.shape)\n    row, col = np.diag_indices(E.shape[0])\n    E[row, col] = 1\n    for i in range(1, E.shape[0]):\n        E[row[:-i], col[i:]] = (Q[row[:-i], col[i:]] + 1e-5) / (decay[i] + 1e-5)\n    E = E + E.T\n    C = np.corrcoef(np.log2(E + 0.001))\n    Call.append(C)\n    binfilter = binall[k]\n#     tmp = comp.loc[ct, (comp.columns.str.split('_').str[0]==chrom)]\n#     tmp.index = [int(xx.split('_')[1]) for xx in tmp.index]\n#     pcall.append(tmp[np.where(binfilter)[0]].values)\n    pca = PCA(n_components=2)\n    pc = pca.fit_transform(C)\n    cpgtmp = cpg.loc[cpg['#1_usercol']==chrom, 'CpG_density'].values[binfilter]\n#     i = 0\n#     if np.abs(pearsonr(cpgtmp, pc[:,0])[0])>np.abs(pearsonr(cpgtmp, pc[:,1])[0]):\n#         i = 0\n#     else:\n#         i = 1\n    r = []\n    for i in range(2):\n        labels, groups = pd.qcut(pc[:,i], 50, labels=False, retbins=True)\n        sad = np.array([[E[np.ix_(labels==i, labels==j)].sum() for i in range(50)] for j in range(50)])\n        count = np.array([[(labels==i).sum()*(labels==j).sum() for i in range(50)] for j in range(50)])\n        sad = sad / count\n        r.append((sad[:10, :10].sum() + sad[-10:, -10:].sum()) / (sad[:10, -10:].sum() + sad[-10:, :10].sum()))\n    if r[0]>r[1]:\n        i = 0\n    else:\n        i = 1\n    if pearsonr(cpgtmp, pc[:,i])[0]>0:\n        pc = pc[:,i]\n        modelall.append(pca.components_[i])\n    else:\n        pc = -pc[:,i]\n        modelall.append(-pca.components_[i])\n    pcall.append(pc)\n    print(chrom, i)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/01.call",
        "ref_id": "fit-pc-model-with-merged-raw",
        "headings": [
          "Call compartment",
          "Fit PC model with merged raw"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "fig, axes = plt.subplots(2, 22, figsize=(66,4), gridspec_kw={'height_ratios':[5,0.2]}, sharex='col')\nfor i,c in enumerate(chrom_sizes.index[:-1]):\n    ax = axes[0,i]\n    n_bins = int(chrom_sizes[c] // 100000) + 1\n    tmp = np.zeros((n_bins, n_bins))\n    tmp[np.ix_(binall[i], binall[i])] = Call[i]\n    ax.imshow(tmp, cmap='bwr', vmin=np.percentile(Call[i], 5), vmax=np.percentile(Call[i], 95))\n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.set_title(c, fontsize=15)\n\n    ax = axes[1,i]\n    # ax.set_title('PC1', fontsize=10)\n    sns.despine(bottom=True, left=True, ax=ax)\n    tmp = np.zeros(n_bins)\n    tmp[binall[i]] = pcall[i]# / np.std(pcall[i])\n    x, y = np.arange(n_bins), tmp\n    # x, y = np.arange(pcall[i].shape[0]), pcall[i]\n    ax.fill_between(x, y, 0, where=y >= 0, facecolor='C3', interpolate=True)\n    ax.fill_between(x, y, 0, where=y <= 0, facecolor='C0', interpolate=True)\n    ax.set_yticks([])\n    ax.set_ylim([np.percentile(y, 1), np.percentile(y, 99)])\n\nplt.tight_layout()\n# plt.savefig(f'{indir}/plot/celltype_compraw.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/01.call",
        "ref_id": "fit-pc-model-with-merged-raw",
        "headings": [
          "Call compartment",
          "Fit PC model with merged raw"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "np.save(f'{outdir}binfilter_raw.npy', binall)\nnp.save(f'{outdir}pcloading_raw.npy', modelall)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/01.call",
        "ref_id": "fit-pc-model-with-merged-raw",
        "headings": [
          "Call compartment",
          "Fit PC model with merged raw"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "leg = ['L23_IT', 'L4_IT', 'L56_NP', 'L5_ET', 'L5_IT', 'L6_CT', 'L6_IT', 'L6_IT_Car3', 'L6b', \n       'Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb_ChC', 'Sst', \n       'MSN_D1', 'MSN_D2', 'SubCtx', 'Amy', 'CHD7', 'Foxp2', \n       'ASC', 'ODC', 'OPC', 'MGC', 'EC', 'PC', 'VLMC', 'merged']\nlegname = ['L2/3-IT', 'L4-IT', 'L5/6-NP', 'L5-ET', 'L5-IT', 'L6-CT', 'L6-IT', 'L6-IT-Car3', 'L6b', \n       'Lamp5', 'Lamp5-Lhx6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb-ChC', 'Sst', \n       'MSN-D1', 'MSN-D2', 'SubCtx-Cplx', 'Amy-Exc', 'Chd7', 'Foxp2', \n       'ASC', 'ODC', 'OPC', 'MGC', 'EC', 'PC', 'VLMC', 'merged'\n      ]\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/01.call",
        "ref_id": "saddle-plot-of-merged-raw-pc-transformed-compartment",
        "headings": [
          "Call compartment",
          "Saddle plot of merged raw pc transformed compartment"
        ]
      },
      "doc_lineno": 150002
    },
    {
      "source": "# binall = np.load(f'{outdir}binfilter_raw.npy', allow_pickle=True)\n# modelall = np.load(f'{outdir}pcloading_raw.npy', allow_pickle=True)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/01.call",
        "ref_id": "saddle-plot-of-merged-raw-pc-transformed-compartment",
        "headings": [
          "Call compartment",
          "Saddle plot of merged raw pc transformed compartment"
        ]
      },
      "doc_lineno": 160002
    },
    {
      "source": "def compsaddle(cool):\n    sad = np.zeros((50, 50))\n    count = np.zeros((50, 50))\n    comptmp = []\n    for k,chrom in enumerate(chrom_sizes.index[:-1]):\n        Q = cool.matrix(balance=False, sparse=True).fetch(chrom).toarray()\n        Q = Q - np.diag(np.diag(Q))\n        pc = np.zeros(Q.shape[0])\n        binfilter = binall[k]\n        Q = Q[binfilter][:, binfilter]\n        decay = np.array([np.mean(np.diag(Q, i)) for i in range(Q.shape[0])])\n        E = np.zeros(Q.shape)\n        row, col = np.diag_indices(E.shape[0])\n        E[row, col] = 1\n        for i in range(1, E.shape[0]):\n            E[row[:-i], col[i:]] = (Q[row[:-i], col[i:]] + 1e-5) / (decay[i] + 1e-5)\n        E = E + E.T\n        C = np.corrcoef(np.log2(E + 0.001))\n        pc = (C-np.mean(C, axis=0)).dot(modelall[k])\n        comptmp.append(pc)\n        labels, groups = pd.qcut(pc, 50, labels=False, retbins=True)\n        sad += np.array([[E[np.ix_(labels==i, labels==j)].sum() for i in range(50)] for j in range(50)])\n        count += np.array([[(labels==i).sum()*(labels==j).sum() for i in range(50)] for j in range(50)])\n    return np.concatenate(comptmp), sad, count\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/01.call",
        "ref_id": "saddle-plot-of-merged-raw-pc-transformed-compartment",
        "headings": [
          "Call compartment",
          "Saddle plot of merged raw pc transformed compartment"
        ]
      },
      "doc_lineno": 170002
    },
    {
      "source": "mode = 'raw'\nsad = np.zeros((len(leg),50,50))\ncount = np.zeros((len(leg),50,50))\ncomp = []\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/01.call",
        "ref_id": "saddle-plot-of-merged-raw-pc-transformed-compartment",
        "headings": [
          "Call compartment",
          "Saddle plot of merged raw pc transformed compartment"
        ]
      },
      "doc_lineno": 180002
    },
    {
      "source": "cpu = 10\nwith ProcessPoolExecutor(cpu) as executor:\n    futures = {}\n    for t,ct in enumerate(leg):\n        if mode=='impute':\n            cool = cooler.Cooler(f'{indir}{ct}/{ct}.Q.cool')\n        elif mode=='raw':\n            cool = cooler.Cooler(f'{indir}{ct}/{ct}/{ct}.raw.mcool::resolutions/100000')\n        future = executor.submit(\n            compsaddle,\n            cool=cool,\n        )\n        futures[future] = t\n\n    for future in as_completed(futures):\n        t = futures[future]\n        ct = leg[t]\n        xx, yy, zz = future.result()\n        comp.append(pd.Series(xx, name=ct))\n        sad[t] += yy\n        count[t] += zz\n        print(f'{ct} finished')\n        ",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/01.call",
        "ref_id": "saddle-plot-of-merged-raw-pc-transformed-compartment",
        "headings": [
          "Call compartment",
          "Saddle plot of merged raw pc transformed compartment"
        ]
      },
      "doc_lineno": 190002
    },
    {
      "source": "bins_df = cool.bins()[:]\nbins_df.index = bins_df['chrom'].astype(str) + '-' + (bins_df['start'] // res).astype(str)\ncompidx = np.concatenate([bins_df.index[bins_df['chrom']==c][binall[i]] for i,c in enumerate(chrom_sizes.index[:-1])])\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/01.call",
        "ref_id": "saddle-plot-of-merged-raw-pc-transformed-compartment",
        "headings": [
          "Call compartment",
          "Saddle plot of merged raw pc transformed compartment"
        ]
      },
      "doc_lineno": 200002
    },
    {
      "source": "comp = pd.concat(comp, axis=1)\ncomp.index = compidx\ncomp.to_hdf(f'{outdir}comp_{mode}_mergerawpca.hdf', key='data')\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/01.call",
        "ref_id": "saddle-plot-of-merged-raw-pc-transformed-compartment",
        "headings": [
          "Call compartment",
          "Saddle plot of merged raw pc transformed compartment"
        ]
      },
      "doc_lineno": 210002
    },
    {
      "source": "sad = sad / count\nnp.save(f'{outdir}saddle_{mode}_mergerawpca.npy', sad)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/01.call",
        "ref_id": "saddle-plot-of-merged-raw-pc-transformed-compartment",
        "headings": [
          "Call compartment",
          "Saddle plot of merged raw pc transformed compartment"
        ]
      },
      "doc_lineno": 220002
    },
    {
      "source": "ws = 10\ncompstr = [[sad[i][:ws, :ws].mean(), sad[i][-ws:, -ws:].mean(), sad[i][:ws, -ws:].mean(), sad[i][-ws:, :ws].mean(), \n            (sad[i][:ws, :ws].sum() + sad[i][-ws:, -ws:].sum()) / (sad[i][:ws, -ws:].sum() + sad[i][-ws:, :ws].sum())]\n            for i in range(len(leg))]\ncompstr = pd.DataFrame(compstr, index=leg, columns=['BB', 'AA', 'BA', 'AB', 'strength'])\ncompstr.sort_values('strength')\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/01.call",
        "ref_id": "saddle-plot-of-merged-raw-pc-transformed-compartment",
        "headings": [
          "Call compartment",
          "Saddle plot of merged raw pc transformed compartment"
        ]
      },
      "doc_lineno": 230002
    },
    {
      "source": "# raw\nvmin, vmax = -0.8, 0.8\nfig, axes = plt.subplots(((len(leg))//6+1), 6, figsize=(15,15), dpi=300)\nfig.subplots_adjust(hspace=0.2, wspace=0.1)\nfor i,xx in enumerate(leg):\n    ax = axes.flatten()[i]\n    plot = ax.imshow(np.log2(sad[i]+0.001), cmap='coolwarm', vmin=vmin, vmax=vmax)\n    # plot = ax.imshow(sad[i], cmap='coolwarm', vmin=0, vmax=2)\n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.set_title(legname[i], fontsize=15)\n    ax.text(40, 45, np.around(compstr.loc[xx, 'AA']/compstr.loc[xx, 'AB'], decimals=3), ha='center', va='center', fontsize=15)\n    ax.text(10, 5, np.around(compstr.loc[xx, 'BB']/compstr.loc[xx, 'BA'], decimals=3), ha='center', va='center', fontsize=15)\n\ncbar = plt.colorbar(plot, ax=axes.flatten()[len(leg)])\ncbar.set_ticks([vmin,vmax])\ncbar.set_label('Normalized Interaction')\n\nfor ax in axes.flatten()[len(leg):]:\n    ax.axis('off')\n    \n# plt.tight_layout()\n# plt.savefig(f'{indir}/plot/celltype_saddle_raw.pdf', transparent=True)\n\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/01.call",
        "ref_id": "saddle-plot-of-merged-raw-pc-transformed-compartment",
        "headings": [
          "Call compartment",
          "Saddle plot of merged raw pc transformed compartment"
        ]
      },
      "doc_lineno": 240002
    }
  ],
  "hba/compartment_majortype/02.comC": [
    {
      "source": "import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport anndata\nimport scanpy as sc\nfrom glob import glob\nimport time\nimport cooler\nimport hba_data\nfrom itertools import cycle, islice\nfrom sklearn.decomposition import PCA\nfrom scipy.stats import pearsonr\nfrom concurrent.futures import ProcessPoolExecutor, as_completed\n\nmpl.style.use('default')\nmpl.rcParams['pdf.fonttype'] = 42\nmpl.rcParams['ps.fonttype'] = 42\nmpl.rcParams['font.family'] = 'sans-serif'\nmpl.rcParams['font.sans-serif'] = 'Helvetica'\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/02.comC",
        "ref_id": "compare-compartment-with-comethylation",
        "headings": [
          "Compare compartment with comethylation"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "indir = '/data/hba/compartment_majortype/'\noutdir = '/home/jzhou_salk_edu/sky_workdir/hba/compartment_majortype/'\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/02.comC",
        "ref_id": "compare-compartment-with-comethylation",
        "headings": [
          "Compare compartment with comethylation"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "leg = ['L23_IT', 'L4_IT', 'L56_NP', 'L5_ET', 'L5_IT', 'L6_CT', 'L6_IT', 'L6_IT_Car3', 'L6b', \n       'Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb_ChC', 'Sst', \n       'MSN_D1', 'MSN_D2', 'SubCtx', 'Amy', 'CHD7', 'Foxp2', \n       'ASC', 'ODC', 'OPC', 'MGC', 'EC', 'PC', 'VLMC', 'merged']\nlegname = ['L2/3-IT', 'L4-IT', 'L5/6-NP', 'L5-ET', 'L5-IT', 'L6-CT', 'L6-IT', 'L6-IT-Car3', 'L6b', \n       'Lamp5', 'Lamp5-Lhx6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb-ChC', 'Sst', \n       'MSN-D1', 'MSN-D2', 'SubCtx-Cplx', 'Amy-Exc', 'Chd7', 'Foxp2', \n       'ASC', 'ODC', 'OPC', 'MGC', 'EC', 'PC', 'VLMC', 'merged'\n      ]\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/02.comC",
        "ref_id": "compare-compartment-with-comethylation",
        "headings": [
          "Compare compartment with comethylation"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "res = 100000\nchrom_size_path = '/home/jzhou_salk_edu/sky_workdir/hba/ref/hg38.main.chrom.sizes'\nchrom_sizes = cooler.read_chromsizes(chrom_size_path, all_names=True)\nchrom_sizes = chrom_sizes.iloc[:23]\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/02.comC",
        "ref_id": "compare-compartment-with-comethylation",
        "headings": [
          "Compare compartment with comethylation"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "mode = 'raw'\ncomp = pd.read_hdf(f'{outdir}comp_{mode}_mergerawpca.hdf', key='data')\ncomp",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/02.comC",
        "ref_id": "compare-compartment-with-comethylation",
        "headings": [
          "Compare compartment with comethylation"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "def saddle(cool, comp):\n    sad = np.zeros((50, 50))\n    count = np.zeros((50, 50))\n    for chrom in chrom_sizes.index[:-1]:\n        Q = cool.matrix(balance=False, sparse=True).fetch(chrom).toarray()\n        Q = Q - np.diag(np.diag(Q))\n        pc = comp.loc[(comp.index.str.split('-').str[0]==chrom)]\n        pc.index = [int(xx.split('-')[1]) for xx in pc.index]\n        Q = Q[np.ix_(pc.index, pc.index)]\n        labels, groups = pd.qcut(pc, 50, labels=False, retbins=True)\n        sad += np.array([[Q[np.ix_(labels==i, labels==j)].sum() for i in range(50)] for j in range(50)])\n        count += np.array([[(labels==i).sum()*(labels==j).sum() for i in range(50)] for j in range(50)])\n    return sad, count\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/02.comC",
        "ref_id": "mcg",
        "headings": [
          "Compare compartment with comethylation",
          "mCG"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "sad = np.zeros((len(leg),50,50))\ncount = np.zeros((len(leg),50,50))\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/02.comC",
        "ref_id": "mcg",
        "headings": [
          "Compare compartment with comethylation",
          "mCG"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "cpu = 10\nwith ProcessPoolExecutor(cpu) as executor:\n    futures = {}\n    for t,ct in enumerate(leg):\n        cool = cooler.Cooler(f'{indir}{ct}/{ct}.CGcorr.cool')\n        future = executor.submit(\n            saddle,\n            cool=cool,\n            comp=comp[ct],\n        )\n        futures[future] = t\n\n    for future in as_completed(futures):\n        t = futures[future]\n        yy, zz = future.result()\n        sad[t] += yy\n        count[t] += zz\n        print(f'{leg[t]} finished')\n        ",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/02.comC",
        "ref_id": "mcg",
        "headings": [
          "Compare compartment with comethylation",
          "mCG"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "sad = sad / count\nnp.save(f'{outdir}saddle_{mode}_mergerawpca_CGcorr.npy', sad)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/02.comC",
        "ref_id": "mcg",
        "headings": [
          "Compare compartment with comethylation",
          "mCG"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "# raw\nvmin, vmax = 0, 0.1\nfig, axes = plt.subplots(((len(leg)-1)//6+1), 6, figsize=(15,12), gridspec_kw={'wspace':0.01}, dpi=300)\nfig.subplots_adjust(hspace=0.01, wspace=0.01)\nfor i,xx in enumerate(leg):\n    ax = axes.flatten()[i]\n    # plot = ax.imshow(np.log2(sad[i]+0.001), cmap='coolwarm', vmin=vmin, vmax=vmax)\n    plot = ax.imshow(sad[i], cmap='coolwarm')\n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.set_title(xx, fontsize=15)\n    # ax.text(24.5, 24.5, np.around(compstr.loc[xx, 'strength'], decimals=3), ha='center', va='center', fontsize=15)\n    cbar = plt.colorbar(plot, ax=ax, shrink=0.3, fraction=0.3)\n    plot.set_clim(np.around([cbar.vmin, cbar.vmax], decimals=2))\n    cbar.set_ticks([cbar.vmin, cbar.vmax])\n    \n# cbar = plt.colorbar(plot, ax=axes.flatten()[len(leg)])\n# cbar.set_ticks([vmin,vmax])\n# cbar.set_label('CG corr')\n\nfor ax in axes.flatten()[len(leg):]:\n    ax.axis('off')\n    \n# plt.tight_layout()\n# plt.savefig(f'{indir}/plot/celltype_saddle_impute.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/02.comC",
        "ref_id": "mcg",
        "headings": [
          "Compare compartment with comethylation",
          "mCG"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "sad = np.zeros((len(leg),50,50))\ncount = np.zeros((len(leg),50,50))\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/02.comC",
        "ref_id": "mch",
        "headings": [
          "Compare compartment with comethylation",
          "mCH"
        ]
      },
      "doc_lineno": 150002
    },
    {
      "source": "cpu = 10\nwith ProcessPoolExecutor(cpu) as executor:\n    futures = {}\n    for t,ct in enumerate(leg):\n        cool = cooler.Cooler(f'{indir}{ct}/{ct}.CHcorr.cool')\n        future = executor.submit(\n            saddle,\n            cool=cool,\n            comp=comp[ct],\n        )\n        futures[future] = t\n\n    for future in as_completed(futures):\n        t = futures[future]\n        yy, zz = future.result()\n        sad[t] += yy\n        count[t] += zz\n        print(f'{leg[t]} finished')\n        ",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/02.comC",
        "ref_id": "mch",
        "headings": [
          "Compare compartment with comethylation",
          "mCH"
        ]
      },
      "doc_lineno": 160002
    },
    {
      "source": "sad = sad / count\nnp.save(f'{outdir}saddle_{mode}_mergerawpca_CHcorr.npy', sad)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/02.comC",
        "ref_id": "mch",
        "headings": [
          "Compare compartment with comethylation",
          "mCH"
        ]
      },
      "doc_lineno": 170002
    },
    {
      "source": "# raw\nvmin, vmax = 0, 0.1\nfig, axes = plt.subplots(((len(leg)-1)//6+1), 6, figsize=(15,12), gridspec_kw={'wspace':0.01}, dpi=300)\nfig.subplots_adjust(hspace=0.2, wspace=0.1)\nfor i,xx in enumerate(leg):\n    ax = axes.flatten()[i]\n    # plot = ax.imshow(np.log2(sad[i]+0.001), cmap='coolwarm', vmin=vmin, vmax=vmax)\n    plot = ax.imshow(sad[i], cmap='coolwarm')\n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.set_title(xx, fontsize=15)\n    # ax.text(24.5, 24.5, np.around(compstr.loc[xx, 'strength'], decimals=3), ha='center', va='center', fontsize=15)\n    cbar = plt.colorbar(plot, ax=ax, shrink=0.3, fraction=0.3)\n    plot.set_clim(np.around([cbar.vmin, cbar.vmax], decimals=2))\n    cbar.set_ticks([cbar.vmin, cbar.vmax])\n    \n# cbar = plt.colorbar(plot, ax=axes.flatten()[len(leg)])\n# cbar.set_ticks([vmin,vmax])\n# cbar.set_label('CG corr')\n\nfor ax in axes.flatten()[len(leg):]:\n    ax.axis('off')\n    \n# plt.tight_layout()\n# plt.savefig(f'{indir}/plot/celltype_saddle_impute.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/02.comC",
        "ref_id": "mch",
        "headings": [
          "Compare compartment with comethylation",
          "mCH"
        ]
      },
      "doc_lineno": 180002
    }
  ],
  "hba/compartment_majortype/03.example": [
    {
      "source": "import cooler\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\nfrom scipy.stats import pearsonr\n\nmpl.style.use('default')\nmpl.rcParams['pdf.fonttype'] = 42\nmpl.rcParams['ps.fonttype'] = 42\nmpl.rcParams['font.family'] = 'sans-serif'\nmpl.rcParams['font.sans-serif'] = 'Helvetica'\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/03.example",
        "ref_id": "plot-example",
        "headings": [
          "Plot example"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "indir = '/data/hba/compartment_majortype/'\noutdir = '/home/jzhou_salk_edu/sky_workdir/hba/compartment_majortype/'\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/03.example",
        "ref_id": "plot-example",
        "headings": [
          "Plot example"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "binall = np.load(f'{outdir}binfilter_raw.npy', allow_pickle=True)",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/03.example",
        "ref_id": "plot-example",
        "headings": [
          "Plot example"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "res = 100000\nchrom_size_path = f'/home/jzhou_salk_edu/sky_workdir/hba/ref/hg38.main.chrom.sizes'\nchrom_sizes = cooler.read_chromsizes(chrom_size_path, all_names=True)\nchrom_sizes = chrom_sizes.iloc[:23]\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/03.example",
        "ref_id": "plot-example",
        "headings": [
          "Plot example"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "cpg = pd.read_csv('/home/jzhou_salk_edu/sky_workdir/hba/ref/hg38.100kbin.CpG.txt', header=0, index_col=3, sep='\\t')\ncpg['CpG_density'] = cpg['14_user_patt_count'] / (cpg['13_seq_len'] - cpg['11_num_N'])\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/03.example",
        "ref_id": "plot-example",
        "headings": [
          "Plot example"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "chrom = 'chr5'\nll, rr = 800, 1200\nn_bins = (int(chrom_sizes.loc[chrom]) // res + 1)\nbinfilter = binall[4]\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/03.example",
        "ref_id": "plot-example",
        "headings": [
          "Plot example"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "Qall = []\nfor ct in ['L5_IT', 'Sst', 'ASC', 'MGC']:\n    cool = cooler.Cooler(f'{indir}{ct}/{ct}.Q.cool')\n    Q = cool.matrix(balance=False, sparse=True).fetch(chrom).toarray()\n    Q = Q - np.diag(np.diag(Q))\n    rowsum = Q.sum(axis=0)\n    # thres = np.percentile(rowsum[rowsum>0], 50) * 2 - np.percentile(rowsum[rowsum>0], 99)\n    # binfilter = (rowsum>thres)\n    # binall.append(binfilter)\n    Q = Q[binfilter][:, binfilter]\n    Qall.append(Q)\n    print(ct)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/03.example",
        "ref_id": "plot-example",
        "headings": [
          "Plot example"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "fig, axes = plt.subplots(1, 4, figsize=(12,3))\nfor i in range(4):\n    ax = axes[i]\n    tmp = np.zeros((n_bins, n_bins))\n    tmp[np.ix_(binfilter, binfilter)] = Qall[i]\n    ax.imshow(tmp, cmap='bwr', vmin=-0.0015, vmax=0.0015)\n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.set_title(['L5_IT', 'Sst', 'ASC', 'MGC'][i], fontsize=15)\n\nplt.tight_layout()\n# plt.savefig(f'{indir}/plot/celltype_Q_decay.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/03.example",
        "ref_id": "plot-example",
        "headings": [
          "Plot example"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "fig, axes = plt.subplots(1, 4, figsize=(12,3))\nfor i in range(4):\n    ax = axes[i]\n    tmp = np.zeros((n_bins, n_bins))\n    tmp[np.ix_(binfilter, binfilter)] = Qall[i]\n    ax.imshow(tmp, cmap='afmhot_r', vmin=0, vmax=0.0008)\n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.set_title(['L5_IT', 'Sst', 'ASC', 'MGC'][i], fontsize=15)\n\nplt.tight_layout()\n# plt.savefig(f'{indir}/plot/celltype_Q_decay.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/03.example",
        "ref_id": "plot-example",
        "headings": [
          "Plot example"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "comp = pd.read_hdf(f'{indir}comp_impute_mergerawpca.hdf', key='data')\n\nCall = []\npcall = []\nfor k,ct in enumerate(['L5_IT', 'Sst', 'ASC', 'MGC']):\n    Q = Qall[k].copy()\n    decay = np.array([np.mean(np.diag(Q, i)) for i in range(Q.shape[0])])\n    E = np.zeros(Q.shape)\n    row, col = np.diag_indices(E.shape[0])\n    E[row, col] = 1\n    for i in range(1, E.shape[0]):\n        E[row[:-i], col[i:]] = (Q[row[:-i], col[i:]] + 1e-5) / (decay[i] + 1e-5)\n    E = E + E.T\n    C = np.corrcoef(np.log2(E + 0.001))\n    Call.append(C)\n    tmp = comp.loc[(comp.index.str.split('-').str[0]==chrom), ct]\n    tmp.index = [int(xx.split('-')[1]) for xx in tmp.index]\n    pcall.append(tmp[np.where(binfilter)[0]].values)\n    print(ct)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/03.example",
        "ref_id": "plot-example",
        "headings": [
          "Plot example"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "fig, axes = plt.subplots(2, 4, figsize=(12,4), gridspec_kw={'height_ratios':[4,0.5]}, sharex='col', sharey='row')\nfor i in range(4):\n    ax = axes[0,i]\n    tmp = np.zeros((n_bins, n_bins))\n    tmp[np.ix_(binfilter, binfilter)] = Call[i]\n    ax.imshow(tmp, cmap='bwr', vmin=-0.2, vmax=1)\n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.set_title(['L5_IT', 'Sst', 'ASC', 'MGC'][i], fontsize=15)\n\n    ax = axes[1,i]\n    # ax.set_title('PC1', fontsize=10)\n    sns.despine(bottom=True, ax=ax)\n    tmp = np.zeros(n_bins)\n    tmp[binfilter] = pcall[i]# / np.std(pcall[i])\n    x, y = np.arange(n_bins), tmp\n    # x, y = np.arange(pcall[i].shape[0]), pcall[i]\n    ax.fill_between(x, y, 0, where=y >= 0, facecolor='C3', interpolate=True)\n    ax.fill_between(x, y, 0, where=y <= 0, facecolor='C0', interpolate=True)\n    ax.set_yticks([-15, 15])\n    ax.set_ylim([np.percentile(y, 1), np.percentile(y, 99)])\n\nplt.tight_layout()\n# plt.savefig(f'{indir}/plot/celltype_compimpute.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/03.example",
        "ref_id": "plot-example",
        "headings": [
          "Plot example"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "fig, axes = plt.subplots(2, 4, figsize=(12,4), gridspec_kw={'height_ratios':[4,0.5]}, sharex='col', sharey='row')\nfor i in range(4):\n    ax = axes[0,i]\n    tmp = np.zeros((n_bins, n_bins))\n    tmp[np.ix_(binfilter, binfilter)] = Call[i]    \n    ax.imshow(tmp[ll:rr,ll:rr], cmap='bwr', vmin=0.2, vmax=0.8)\n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.set_title(['L5_IT', 'Sst', 'ASC', 'MGC'][i], fontsize=15)\n\n    ax = axes[1,i]\n    # ax.set_title('PC1', fontsize=10)\n    sns.despine(bottom=True, left=True, ax=ax)\n    tmp = np.zeros(n_bins)\n    tmp[binfilter] = pcall[i]\n    x, y = np.arange(rr-ll), tmp[ll:rr]\n    # x, y = np.arange(rr-ll), pcall[i][ll:rr]\n    ax.fill_between(x, y, 0, where=y >= 0, facecolor='C3', interpolate=True)\n    ax.fill_between(x, y, 0, where=y <= 0, facecolor='C0', interpolate=True)\n    ax.set_yticks([])\n    ax.set_ylim([np.percentile(y, 1), np.percentile(y, 99)])\n\nplt.tight_layout()\n# plt.savefig(f'{indir}/plot/celltype_compimpute_zoomin.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/03.example",
        "ref_id": "plot-example",
        "headings": [
          "Plot example"
        ]
      },
      "doc_lineno": 130002
    },
    {
      "source": "pca = PCA(n_components=2)",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/03.example",
        "ref_id": "plot-example",
        "headings": [
          "Plot example"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "Gall = []\nGpc = []\nfor i,ct in enumerate(['L5_IT', 'Sst', 'ASC', 'MGC']):\n    cool = cooler.Cooler(f'{indir}{ct}/{ct}.CGcorr.cool')\n    Q = cool.matrix(balance=False, sparse=True).fetch(chrom).toarray()\n    Q = Q - np.diag(np.diag(Q))\n    Q = Q[binfilter][:, binfilter]\n    Gall.append(Q)\n    pc = pca.fit_transform(Q)\n    cpgtmp = cpg.loc[cpg['#1_usercol']==chrom, 'CpG_density'].values[binfilter]\n    if pearsonr(cpgtmp, pc[:,0])[0]>0:\n        pc = pc[:,0]\n    else:\n        pc = -pc[:,0]\n    Gpc.append(pc)\n    print(ct)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/03.example",
        "ref_id": "plot-example",
        "headings": [
          "Plot example"
        ]
      },
      "doc_lineno": 150002
    },
    {
      "source": "fig, axes = plt.subplots(2, 4, figsize=(12,4), gridspec_kw={'height_ratios':[4,0.5]}, sharex='col')\nfor i in range(4):\n    ax = axes[0,i]\n    tmp = np.zeros((n_bins, n_bins)) + (np.percentile(Gall[i], 5) + np.percentile(Gall[i], 95)) / 2\n    tmp[np.ix_(binfilter, binfilter)] = Gall[i]\n    ax.imshow(tmp, cmap='bwr', vmin=np.percentile(Gall[i], 30), vmax=np.percentile(Gall[i], 95))\n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.set_title(['L5_IT', 'Sst', 'ASC', 'MGC'][i], fontsize=15)\n\n    ax = axes[1,i]\n    # ax.set_title('PC1', fontsize=10)\n    sns.despine(bottom=True, left=True, ax=ax)\n    tmp = np.zeros(n_bins)\n    tmp[binfilter] = Gpc[i]\n    x, y = np.arange(n_bins), tmp\n    # x, y = np.arange(Gpc[i].shape[0]), Gpc[i]\n    ax.fill_between(x, y, 0, where=y >= 0, facecolor='C3', interpolate=True)\n    ax.fill_between(x, y, 0, where=y <= 0, facecolor='C0', interpolate=True)\n    ax.set_yticks([])\n    ax.set_ylim([np.percentile(y, 1), np.percentile(y, 99)])\n\nplt.tight_layout()\n# plt.savefig(f'{indir}/plot/celltype_CGcorr_impute.pdf', transparent=True)\n\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/03.example",
        "ref_id": "plot-example",
        "headings": [
          "Plot example"
        ]
      },
      "doc_lineno": 160002
    },
    {
      "source": "fig, axes = plt.subplots(2, 4, figsize=(12,4), gridspec_kw={'height_ratios':[4,0.5]}, sharex='col')\nfor i in range(4):\n    ax = axes[0,i]\n    tmp = np.zeros((n_bins, n_bins)) + 0.06\n    tmp[np.ix_(binfilter, binfilter)] = Gall[i]    \n    ax.imshow(tmp[ll:rr, ll:rr], cmap='bwr', vmin=0, vmax=0.12)\n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.set_title(['L5_IT', 'Sst', 'ASC', 'MGC'][i], fontsize=15)\n\n    ax = axes[1,i]\n    # ax.set_title('PC1', fontsize=10)\n    sns.despine(bottom=True, left=True, ax=ax)\n    tmp = np.zeros(n_bins)\n    tmp[binfilter] = Gpc[i]\n    x, y = np.arange(rr-ll), tmp[ll:rr]\n    # x, y = np.arange(Gpc[i][ll:rr].shape[0]), Gpc[i][ll:rr]\n    ax.fill_between(x, y, 0, where=y >= 0, facecolor='C3', interpolate=True)\n    ax.fill_between(x, y, 0, where=y <= 0, facecolor='C0', interpolate=True)\n    ax.set_yticks([])\n    ax.set_ylim([np.percentile(y, 1), np.percentile(y, 99)])\n\nplt.tight_layout()\n# plt.savefig(f'{indir}/plot/celltype_CGcorr_impute_zoomin.pdf', transparent=True)\n\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/03.example",
        "ref_id": "plot-example",
        "headings": [
          "Plot example"
        ]
      },
      "doc_lineno": 170002
    },
    {
      "source": "Hall = []\nHpc = []\nfor i,ct in enumerate(['L5_IT', 'Sst', 'ASC', 'MGC']):\n    cool = cooler.Cooler(f'{indir}{ct}/{ct}.CHcorr.cool')\n    Q = cool.matrix(balance=False, sparse=True).fetch(chrom).toarray()\n    Q = Q - np.diag(np.diag(Q))\n    Q = Q[binfilter][:, binfilter]\n    Hall.append(Q)\n    pc = pca.fit_transform(Q)\n    cpgtmp = cpg.loc[cpg['#1_usercol']==chrom, 'CpG_density'].values[binfilter]\n    if pearsonr(cpgtmp, pc[:,0])[0]>0:\n        pc = pc[:,0]\n    else:\n        pc = -pc[:,0]\n    Hpc.append(pc)\n    print(ct)\n\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/03.example",
        "ref_id": "plot-example",
        "headings": [
          "Plot example"
        ]
      },
      "doc_lineno": 180002
    },
    {
      "source": "fig, axes = plt.subplots(2, 4, figsize=(12,4), gridspec_kw={'height_ratios':[4,0.5]}, sharex='col')\nfor i in range(4):\n    ax = axes[0,i]\n    tmp = np.zeros((n_bins, n_bins)) + 0.05\n    tmp[np.ix_(binfilter, binfilter)] = Hall[i]\n    ax.imshow(tmp, cmap='bwr', vmin=-0.1, vmax=0.2)\n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.set_title(['L5_IT', 'Sst', 'ASC', 'MGC'][i], fontsize=15)\n\n    ax = axes[1,i]\n    # ax.set_title('PC1', fontsize=10)\n    sns.despine(bottom=True, left=True, ax=ax)\n    tmp = np.zeros(n_bins)\n    tmp[binfilter] = Hpc[i]\n    x, y = np.arange(n_bins), tmp\n    # x, y = np.arange(Hpc[i].shape[0]), Hpc[i]\n    ax.fill_between(x, y, 0, where=y >= 0, facecolor='C3', interpolate=True)\n    ax.fill_between(x, y, 0, where=y <= 0, facecolor='C0', interpolate=True)\n    ax.set_yticks([])\n    ax.set_ylim([np.percentile(y, 1), np.percentile(y, 99)])\n\nplt.tight_layout()\n# plt.savefig(f'{indir}/plot/celltype_comp.pdf', transparent=True)\n\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/03.example",
        "ref_id": "plot-example",
        "headings": [
          "Plot example"
        ]
      },
      "doc_lineno": 190002
    },
    {
      "source": "fig, axes = plt.subplots(2, 4, figsize=(12,4), gridspec_kw={'height_ratios':[4,0.5]}, sharex='col')\nfor i in range(4):\n    ax = axes[0,i]\n    tmp = np.zeros((n_bins, n_bins)) + 0.05\n    tmp[np.ix_(binfilter, binfilter)] = Hall[i]    \n    ax.imshow(tmp[ll:rr, ll:rr], cmap='bwr', vmin=-0.1, vmax=0.2)\n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.set_title(['L5_IT', 'Sst', 'ASC', 'MGC'][i], fontsize=15)\n\n    ax = axes[1,i]\n    # ax.set_title('PC1', fontsize=10)\n    sns.despine(bottom=True, left=True, ax=ax)\n    tmp = np.zeros(n_bins)\n    tmp[binfilter] = Hpc[i]\n    x, y = np.arange(rr-ll), tmp[ll:rr]\n    # x, y = np.arange(Gpc[i][ll:rr].shape[0]), Gpc[i][ll:rr]\n    ax.fill_between(x, y, 0, where=y >= 0, facecolor='C3', interpolate=True)\n    ax.fill_between(x, y, 0, where=y <= 0, facecolor='C0', interpolate=True)\n    ax.set_yticks([])\n    ax.set_ylim([np.percentile(y, 1), np.percentile(y, 99)])\n\nplt.tight_layout()\n# plt.savefig(f'{indir}/plot/celltype_CGcorr_impute_zoomin.pdf', transparent=True)\n\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/03.example",
        "ref_id": "plot-example",
        "headings": [
          "Plot example"
        ]
      },
      "doc_lineno": 200002
    }
  ],
  "hba/compartment_majortype/04.diff": [
    {
      "source": "import os\nimport cooler\nimport numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm\nfrom matplotlib import cm as cm\nimport seaborn as sns\n\nmpl.style.use('default')\nmpl.rcParams['pdf.fonttype'] = 42\nmpl.rcParams['ps.fonttype'] = 42\nmpl.rcParams['font.family'] = 'sans-serif'\nmpl.rcParams['font.sans-serif'] = 'Helvetica'\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/04.diff",
        "ref_id": "differential-compartment-calling-with-dchic",
        "headings": [
          "Differential compartment calling with dcHiC"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "leg = ['L23_IT', 'L4_IT', 'L5_IT', 'L6_IT', 'L6_IT_Car3', 'L56_NP', 'L6_CT', 'L6b', 'L5_ET', 'Amy', \n       'Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb_ChC', 'Sst', 'CHD7', \n       'MSN_D1', 'MSN_D2', 'Foxp2', 'SubCtx', \n       'ASC', 'ODC', 'OPC', 'MGC', 'PC', 'EC', 'VLMC'\n      ]\nlegname = ['L2/3-IT', 'L4-IT', 'L5-IT', 'L6-IT', 'L6-IT-Car3', 'L5/6-NP', 'L6-CT', 'L6b', 'L5-ET', 'Amy-Exc', \n       'Lamp5', 'Lamp5-Lhx6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb-ChC', 'Sst', 'Chd7', \n       'MSN-D1', 'MSN-D2', 'Foxp2', 'SubCtx-Cplx', \n       'ASC', 'ODC', 'OPC', 'MGC', 'PC', 'EC', 'VLMC'\n      ]\nleg2name = {xx:yy for xx,yy in zip(leg, legname)}\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/04.diff",
        "ref_id": "differential-compartment-calling-with-dchic",
        "headings": [
          "Differential compartment calling with dcHiC"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "leg = {'exc': ['L23_IT', 'L4_IT', 'L5_IT', 'L6_IT', 'L6_IT_Car3', 'L56_NP', 'L6_CT', 'L6b', 'Amy'], \n       'inh': ['Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb_ChC', 'Sst', 'CHD7'], \n       'msn': ['MSN_D1', 'MSN_D2', 'Foxp2'], \n       'sub': ['SubCtx'], \n       'glia': ['ASC', 'ODC', 'OPC'], \n       'mgc': ['MGC'], \n       'smc': ['PC'], \n       'endo': ['EC'], \n       'fibro': ['VLMC'],\n      }\nleg['neu'] = leg['exc'] + leg['inh'] + leg['msn'] + leg['sub']\nleg['all'] = leg['neu'] + leg['glia'] + leg['mgc'] + leg['smc'] + leg['endo'] + leg['fibro']\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/04.diff",
        "ref_id": "differential-compartment-calling-with-dchic",
        "headings": [
          "Differential compartment calling with dcHiC"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "group_name = 'neu'",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/04.diff",
        "ref_id": "differential-compartment-calling-with-dchic",
        "headings": [
          "Differential compartment calling with dcHiC"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "leg = pd.Index(leg[group_name])\nlegname = leg.map(leg2name)\nres = 100000",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/04.diff",
        "ref_id": "differential-compartment-calling-with-dchic",
        "headings": [
          "Differential compartment calling with dcHiC"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "indir = '/data/hba/compartment_majortype/'\noutdir = f'/home/jzhou_salk_edu/sky_workdir/hba/compartment_majortype/diff/{group_name}/'",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/04.diff",
        "ref_id": "differential-compartment-calling-with-dchic",
        "headings": [
          "Differential compartment calling with dcHiC"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "comp = pd.read_hdf(f'{indir}comp_raw_mergerawpca.hdf')\ncomp",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/04.diff",
        "ref_id": "differential-compartment-calling-with-dchic",
        "headings": [
          "Differential compartment calling with dcHiC"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "binall = np.load(f'{indir}binfilter_raw.npy', allow_pickle=True)\nprint(np.sum([xx.sum() for xx in binall[:-1]]))",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/04.diff",
        "ref_id": "differential-compartment-calling-with-dchic",
        "headings": [
          "Differential compartment calling with dcHiC"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "res = 100000\nbinall = pd.DataFrame(index=comp.index)\nbinall['chrom'] = binall.index.str.split('-').str[0]\nbinall['start'] = binall.index.str.split('-').str[1].astype(int) * res\nbinall['end'] = binall['start'] + res\nbinall",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/04.diff",
        "ref_id": "differential-compartment-calling-with-dchic",
        "headings": [
          "Differential compartment calling with dcHiC"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "chrom_size_path = f'/home/jzhou_salk_edu/sky_workdir/hba/ref/hg38.main.chrom.sizes'\nchrom_sizes = cooler.read_chromsizes(chrom_size_path, all_names=True)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/04.diff",
        "ref_id": "differential-compartment-calling-with-dchic",
        "headings": [
          "Differential compartment calling with dcHiC"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "for xx in leg:\n    os.makedirs(f'{outdir}{xx}_100Kb_pca/intra_pca/{xx}_100Kb_mat/', exist_ok=True)\n    tmp = binall.copy()\n    tmp['pc'] = comp[xx]\n    for c in chrom_sizes.index[:-3]:\n        tmp.loc[tmp['chrom']==c].to_csv(f'{outdir}{xx}_100Kb_pca/intra_pca/{xx}_100Kb_mat/{c}.pc.bedGraph', sep='\\t', header=False, index=False)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/04.diff",
        "ref_id": "differential-compartment-calling-with-dchic",
        "headings": [
          "Differential compartment calling with dcHiC"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "tmp = pd.DataFrame(index=leg)\ntmp['matrix_path'] = '.'\ntmp['bed_path'] = '.'\ntmp['sample'] = tmp.index + '_100Kb'\ntmp['group'] = tmp.index\ntmp.to_csv(f'{outdir}input.txt', sep='\\t', header=False, index=False)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/04.diff",
        "ref_id": "differential-compartment-calling-with-dchic",
        "headings": [
          "Differential compartment calling with dcHiC"
        ]
      },
      "doc_lineno": 130002
    },
    {
      "source": "!Rscript ~/software/dcHiC/dchicf.r --file input.txt --pcatype analyze --dirovwt T --diffdir .",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/04.diff",
        "ref_id": "differential-compartment-calling-with-dchic",
        "headings": [
          "Differential compartment calling with dcHiC"
        ]
      },
      "doc_lineno": 140002
    }
  ],
  "hba/compartment_majortype/05.corr": [
    {
      "source": "import cooler\nimport numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm\nfrom matplotlib import cm as cm\nimport seaborn as sns\nfrom scipy.stats import zscore, pearsonr, norm\n\nmpl.style.use('default')\nmpl.rcParams['pdf.fonttype'] = 42\nmpl.rcParams['ps.fonttype'] = 42\nmpl.rcParams['font.family'] = 'sans-serif'\nmpl.rcParams['font.sans-serif'] = 'Helvetica'\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/05.corr",
        "ref_id": "correlation-between-compartment-and-other-modalities",
        "headings": [
          "Correlation between compartment and other modalities"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "leg = ['L23_IT', 'L4_IT', 'L5_IT', 'L6_IT', 'L6_IT_Car3', 'L56_NP', 'L6_CT', 'L6b', 'L5_ET', 'Amy', \n       'Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb_ChC', 'Sst', 'CHD7', \n       'MSN_D1', 'MSN_D2', 'Foxp2', 'SubCtx', \n       'ASC', 'ODC', 'OPC', 'MGC', 'PC', 'EC', 'VLMC'\n      ]\nlegname = ['L2/3-IT', 'L4-IT', 'L5-IT', 'L6-IT', 'L6-IT-Car3', 'L5/6-NP', 'L6-CT', 'L6b', 'L5-ET', 'Amy-Exc', \n       'Lamp5', 'Lamp5-Lhx6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb-ChC', 'Sst', 'Chd7', \n       'MSN-D1', 'MSN-D2', 'Foxp2', 'SubCtx-Cplx', \n       'ASC', 'ODC', 'OPC', 'MGC', 'PC', 'EC', 'VLMC'\n      ]\nleg2name = {xx:yy for xx,yy in zip(leg, legname)}\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/05.corr",
        "ref_id": "correlation-between-compartment-and-other-modalities",
        "headings": [
          "Correlation between compartment and other modalities"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "leg = {'exc': ['L23_IT', 'L4_IT', 'L5_IT', 'L6_IT', 'L6_IT_Car3', 'L56_NP', 'L6_CT', 'L6b', 'Amy'], \n       'inh': ['Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb_ChC', 'Sst', 'CHD7'], \n       'msn': ['MSN_D1', 'MSN_D2', 'Foxp2'], \n       'sub': ['SubCtx'], \n       'glia': ['ASC', 'ODC', 'OPC'], \n       'mgc': ['MGC'], \n       'smc': ['PC'], \n       'endo': ['EC'], \n       'fibro': ['VLMC'],\n      }\nleg['neu'] = leg['exc'] + leg['inh'] + leg['msn'] + leg['sub']\nleg['all'] = leg['neu'] + leg['glia'] + leg['mgc'] + leg['smc'] + leg['endo'] + leg['fibro']\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/05.corr",
        "ref_id": "correlation-between-compartment-and-other-modalities",
        "headings": [
          "Correlation between compartment and other modalities"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "group_name = 'neu'",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/05.corr",
        "ref_id": "correlation-between-compartment-and-other-modalities",
        "headings": [
          "Correlation between compartment and other modalities"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "leg = pd.Index(leg[group_name])\nlegname = leg.map(leg2name)\nres = 100000",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/05.corr",
        "ref_id": "correlation-between-compartment-and-other-modalities",
        "headings": [
          "Correlation between compartment and other modalities"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "indir = f'/home/jzhou_salk_edu/sky_workdir/hba/compartment_majortype/diff/{group_name}/'\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/05.corr",
        "ref_id": "correlation-between-compartment-and-other-modalities",
        "headings": [
          "Correlation between compartment and other modalities"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "comp = pd.read_csv(f'{indir}DifferentialResult/fdr_result/differential.intra_sample_combined.pcQnm.bedGraph', sep='\\t', header=0, index_col=None)\ncomp.index = comp['chr'] + '_' + (comp['start'] // res).astype(str)\ncomp\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/05.corr",
        "ref_id": "correlation-between-compartment-and-other-modalities",
        "headings": [
          "Correlation between compartment and other modalities"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "binall = comp[['chr', 'start', 'end', 'sample_maha', 'pval', 'padj']]\ncomp = comp[leg]\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/05.corr",
        "ref_id": "correlation-between-compartment-and-other-modalities",
        "headings": [
          "Correlation between compartment and other modalities"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "from ALLCools.mcds import MCDS\nfrom ALLCools.mcds.utilities import calculate_posterior_mc_frac\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/05.corr",
        "ref_id": "correlation-between-compartment-and-other-modalities",
        "headings": [
          "Correlation between compartment and other modalities"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "mcds = MCDS.open('/data/hba/mc_majortype/MajorType.mcds', var_dim='chrom5k')\nmcds['chrom100k'] = mcds['chrom5k_chrom'].to_pandas().astype(str) + '_' + (mcds['chrom5k_start'] // res).to_pandas().astype(str)\nmcds\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/05.corr",
        "ref_id": "correlation-between-compartment-and-other-modalities",
        "headings": [
          "Correlation between compartment and other modalities"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "mc = mcds['chrom5k_da'].sel(count_type='mc', mc_type='CGN').to_pandas().T\nmc['chrom100k'] = mcds['chrom100k'].to_pandas()\nmc = mc.groupby('chrom100k').sum().T\ncov = mcds['chrom5k_da'].sel(count_type='cov', mc_type='CGN').to_pandas().T\ncov['chrom100k'] = mcds['chrom100k'].to_pandas()\ncov = cov.groupby('chrom100k').sum().T\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/05.corr",
        "ref_id": "mcg",
        "headings": [
          "Correlation between compartment and other modalities",
          "mCG"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "binfilter = ['_'.join(xx.split('_')[:-1]) for xx in mc.columns]\nbinfilter = [(len(xx)<6) and (xx not in ['chrM','chrX','chrY']) for xx in binfilter]\nprint(np.sum(binfilter))\nmc = mc.loc[leg, binfilter]\ncov = cov.loc[leg, binfilter]\nprint(mc.shape, cov.shape)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/05.corr",
        "ref_id": "mcg",
        "headings": [
          "Correlation between compartment and other modalities",
          "mCG"
        ]
      },
      "doc_lineno": 150002
    },
    {
      "source": "mcg = calculate_posterior_mc_frac(mc.values, cov.values)\nmcg = pd.DataFrame(mcg, index=leg, columns=mc.columns)\nmcg = mcg[binall.index].T\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/05.corr",
        "ref_id": "mcg",
        "headings": [
          "Correlation between compartment and other modalities",
          "mCG"
        ]
      },
      "doc_lineno": 160002
    },
    {
      "source": "mc = mcds['chrom5k_da'].sel(count_type='mc', mc_type='CHN').to_pandas().T\nmc['chrom100k'] = mcds['chrom100k'].to_pandas()\nmc = mc.groupby('chrom100k').sum().T\ncov = mcds['chrom5k_da'].sel(count_type='cov', mc_type='CHN').to_pandas().T\ncov['chrom100k'] = mcds['chrom100k'].to_pandas()\ncov = cov.groupby('chrom100k').sum().T\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/05.corr",
        "ref_id": "mch",
        "headings": [
          "Correlation between compartment and other modalities",
          "mCH"
        ]
      },
      "doc_lineno": 180002
    },
    {
      "source": "binfilter = ['_'.join(xx.split('_')[:-1]) for xx in mc.columns]\nbinfilter = [(len(xx)<6) and (xx not in ['chrM','chrX','chrY']) for xx in binfilter]\nprint(np.sum(binfilter))\nmc = mc.loc[leg, binfilter]\ncov = cov.loc[leg, binfilter]\nprint(mc.shape, cov.shape)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/05.corr",
        "ref_id": "mch",
        "headings": [
          "Correlation between compartment and other modalities",
          "mCH"
        ]
      },
      "doc_lineno": 190002
    },
    {
      "source": "mch = calculate_posterior_mc_frac(mc.values, cov.values)\nmch = pd.DataFrame(mch, index=leg, columns=mc.columns)\nmch = mch[binall.index].T\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/05.corr",
        "ref_id": "mch",
        "headings": [
          "Correlation between compartment and other modalities",
          "mCH"
        ]
      },
      "doc_lineno": 200002
    },
    {
      "source": "sig = pd.read_hdf('/home/jzhou_salk_edu/sky_workdir/hba/atac_majortype/cluster_atac_signal.hdf')\ncov = pd.read_hdf('/home/jzhou_salk_edu/sky_workdir/hba/atac_majortype/cluster_atac_cov.hdf')",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/05.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between compartment and other modalities",
          "ATAC"
        ]
      },
      "doc_lineno": 220002
    },
    {
      "source": "bins = pd.DataFrame(index=sig.columns)\nbins['chrom'] = bins.index.str.split('_').str[0]\nbins['start'] = (bins.index.str.split('_').str[1].astype(int) - 1) * 5000\nbins['chrom100k'] = bins['chrom'] + '_' + (bins['start'] // res).astype(str)",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/05.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between compartment and other modalities",
          "ATAC"
        ]
      },
      "doc_lineno": 230002
    },
    {
      "source": "sig = sig.groupby(by=bins['chrom100k'], axis=1).sum()\ncov = cov.groupby(by=bins['chrom100k']).sum()\natac = (sig/cov).fillna(0)",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/05.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between compartment and other modalities",
          "ATAC"
        ]
      },
      "doc_lineno": 240002
    },
    {
      "source": "legatac = leg[leg.isin(atac.index)]\natac = atac.loc[legatac, binall.index].T\natac = atac / atac.sum(axis=0)",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/05.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between compartment and other modalities",
          "ATAC"
        ]
      },
      "doc_lineno": 250002
    },
    {
      "source": "outdir = './'",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/05.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between compartment and other modalities",
          "ATAC"
        ]
      },
      "doc_lineno": 270002
    },
    {
      "source": "mcg.to_hdf(f'{outdir}comp_mCG.hdf', key='data')\nmch.to_hdf(f'{outdir}comp_mCH.hdf', key='data')\natac.to_hdf(f'{outdir}comp_ATAC.hdf', key='data')",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/05.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between compartment and other modalities",
          "ATAC"
        ]
      },
      "doc_lineno": 280002
    },
    {
      "source": "binall['mCG_corr'] = [pearsonr(xx, yy)[0] for xx,yy in zip(comp.values, mcg.values)]\nbinall['mCH_corr'] = [pearsonr(xx, yy)[0] for xx,yy in zip(comp.values, mch.values)]\nif atac.shape[1]==comp.shape[1]:\n    binall['ATAC_corr'] = [pearsonr(xx, yy)[0] for xx,yy in zip(comp.values, atac.values)]",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/05.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between compartment and other modalities",
          "ATAC"
        ]
      },
      "doc_lineno": 300002
    },
    {
      "source": "binall['logPadj'] = -np.log10(binall['padj'])\nbinall.loc[binall['logPadj']>300, 'logPadj'] = 300",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/05.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between compartment and other modalities",
          "ATAC"
        ]
      },
      "doc_lineno": 310002
    },
    {
      "source": "binall['mCG_std'] = np.std(mcg, axis=1)\nbinall['mCH_std'] = np.std(mch, axis=1)\nbinall['ATAC_std'] = np.std(atac, axis=1)\nbinall['comp_std'] = np.std(comp, axis=1)\nbinall",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/05.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between compartment and other modalities",
          "ATAC"
        ]
      },
      "doc_lineno": 320002
    },
    {
      "source": "binall.to_hdf(f'{outdir}bin_stats.hdf', key='data')\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/05.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between compartment and other modalities",
          "ATAC"
        ]
      },
      "doc_lineno": 330002
    },
    {
      "source": "fig, axes = plt.subplots(1, 2, figsize=(4, 2), dpi=300)\nax = axes[0]\nsns.histplot(zscore(np.log10(binall['sample_maha'])), bins=100, ax=ax)\nax = axes[1]\nsns.histplot(zscore(binall['sample_maha']), bins=100, binrange=(-1,3), ax=ax)\nplt.tight_layout()\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/05.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between compartment and other modalities",
          "ATAC"
        ]
      },
      "doc_lineno": 340002
    },
    {
      "source": "print(np.sum(zscore(binall['sample_maha'])>norm.isf(0.025)))\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/05.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between compartment and other modalities",
          "ATAC"
        ]
      },
      "doc_lineno": 350002
    },
    {
      "source": "fig, axes = plt.subplots(1, 2, figsize=(4,2), sharey='all', dpi=300)\nax = axes[0]\nsns.histplot(binall, x='comp_std', y='sample_maha', bins=100, ax=ax, log_scale=(False, 10))\nax = axes[1]\nsns.histplot(binall, x='logPadj', y='sample_maha', bins=100, ax=ax, log_scale=(False, 10))\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/05.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between compartment and other modalities",
          "ATAC"
        ]
      },
      "doc_lineno": 360002
    },
    {
      "source": "fig, axes = plt.subplots(1, 2, figsize=(4,2), sharex='all', sharey='all', dpi=300)\nax = axes[0]\nsns.histplot(binall, x='mCG_corr', y='comp_std', bins=100, ax=ax)\nax = axes[1]\nsns.histplot(binall, x='mCH_corr', y='comp_std', bins=100, ax=ax)\nax.set_xticks([-1, 0, 1])\n# plt.savefig(f'majortype_{group_name}_diffcomp_stdcorr.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/05.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between compartment and other modalities",
          "ATAC"
        ]
      },
      "doc_lineno": 370002
    },
    {
      "source": "fig, axes = plt.subplots(1, 2, figsize=(4,2), sharex='all', sharey='all', dpi=300)\nax = axes[0]\nsns.histplot(binall, x='mCG_corr', y='sample_maha', bins=100, log_scale=(False, 10), ax=ax)\nax = axes[1]\nsns.histplot(binall, x='mCH_corr', y='sample_maha', bins=100, log_scale=(False, 10), ax=ax)\nax.set_xticks([-1, 0, 1])\n# plt.savefig(f'majortype_{group_name}_diffcomp_statscorr.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/05.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between compartment and other modalities",
          "ATAC"
        ]
      },
      "doc_lineno": 380002
    }
  ],
  "hba/compartment_majortype/06.plot": [
    {
      "source": "import os\nimport cooler\nimport numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm\nfrom matplotlib import cm as cm\nimport seaborn as sns\nfrom scipy.stats import zscore, pearsonr, norm\n\nmpl.style.use('default')\nmpl.rcParams['pdf.fonttype'] = 42\nmpl.rcParams['ps.fonttype'] = 42\nmpl.rcParams['font.family'] = 'sans-serif'\nmpl.rcParams['font.sans-serif'] = 'Helvetica'\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "plot-correlation-between-compartment-and-mc-atac-rna",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "leg = ['L23_IT', 'L4_IT', 'L5_IT', 'L6_IT', 'L6_IT_Car3', 'L56_NP', 'L6_CT', 'L6b', 'L5_ET', 'Amy', \n       'Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb_ChC', 'Sst', 'CHD7', \n       'MSN_D1', 'MSN_D2', 'Foxp2', 'SubCtx', \n       'ASC', 'ODC', 'OPC', 'MGC', 'PC', 'EC', 'VLMC'\n      ]\nlegname = ['L2/3-IT', 'L4-IT', 'L5-IT', 'L6-IT', 'L6-IT-Car3', 'L5/6-NP', 'L6-CT', 'L6b', 'L5-ET', 'Amy-Exc', \n       'Lamp5', 'Lamp5-Lhx6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb-ChC', 'Sst', 'Chd7', \n       'MSN-D1', 'MSN-D2', 'Foxp2', 'SubCtx-Cplx', \n       'ASC', 'ODC', 'OPC', 'MGC', 'PC', 'EC', 'VLMC'\n      ]\nleg2name = {xx:yy for xx,yy in zip(leg, legname)}\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "plot-correlation-between-compartment-and-mc-atac-rna",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "leg = {'exc': ['L23_IT', 'L4_IT', 'L5_IT', 'L6_IT', 'L6_IT_Car3', 'L56_NP', 'L6_CT', 'L6b', 'Amy'], \n       'inh': ['Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb_ChC', 'Sst', 'CHD7'], \n       'msn': ['MSN_D1', 'MSN_D2', 'Foxp2'], \n       'sub': ['SubCtx'], \n       'glia': ['ASC', 'ODC', 'OPC'], \n       'mgc': ['MGC'], \n       'smc': ['PC'], \n       'endo': ['EC'], \n       'fibro': ['VLMC'],\n      }\nleg['neu'] = leg['exc'] + leg['inh'] + leg['msn'] + leg['sub']\nleg['all'] = leg['neu'] + leg['glia'] + leg['mgc'] + leg['smc'] + leg['endo'] + leg['fibro']\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "plot-correlation-between-compartment-and-mc-atac-rna",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "group_name = 'neu'",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "plot-correlation-between-compartment-and-mc-atac-rna",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "leg = pd.Index(leg[group_name])\nlegname = leg.map(leg2name)\nres = 100000",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "plot-correlation-between-compartment-and-mc-atac-rna",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "indir = f'/home/jzhou_salk_edu/sky_workdir/hba/compartment_majortype/diff/{group_name}/'\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "plot-correlation-between-compartment-and-mc-atac-rna",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "comp = pd.read_csv(f'{indir}DifferentialResult/fdr_result/differential.intra_sample_combined.pcQnm.bedGraph', sep='\\t', header=0, index_col=None)\ncomp.index = comp['chr'] + '_' + (comp['start'] // res).astype(str)\ncomp\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "plot-correlation-between-compartment-and-mc-atac-rna",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "binall = comp[['chr', 'start', 'end', 'sample_maha', 'pval', 'padj']]\ncomp = comp[leg]\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "plot-correlation-between-compartment-and-mc-atac-rna",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "mcg = pd.read_hdf(f'{outdir}comp_mCG.hdf', key='data')\nmch = pd.read_hdf(f'{outdir}comp_mCH.hdf', key='data')\natac = pd.read_hdf(f'{outdir}comp_ATAC.hdf', key='data')\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "plot-correlation-between-compartment-and-mc-atac-rna",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "legatac = atac.columns",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "plot-correlation-between-compartment-and-mc-atac-rna",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "binall = pd.read_hdf(f'{outdir}bin_stats.hdf', key='data')\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "plot-correlation-between-compartment-and-mc-atac-rna",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "# selb = (binall['padj']<1e-3)\nselb = zscore(binall['sample_maha'])>norm.isf(0.025)\nprint(selb.sum())\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "plot-correlation-between-compartment-and-mc-atac-rna",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 130002
    },
    {
      "source": "tmpcg = mcg.loc[selb].values\ntmpcg = zscore(tmpcg, axis=1)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "plot-correlation-between-compartment-and-mc-atac-rna",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "tmpch = mch.loc[selb].values\ntmpch = zscore(tmpch, axis=1)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "plot-correlation-between-compartment-and-mc-atac-rna",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 150002
    },
    {
      "source": "tmpatac = atac.loc[selb].values\ntmpatac = zscore(tmpatac, axis=1)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "plot-correlation-between-compartment-and-mc-atac-rna",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 160002
    },
    {
      "source": "tmp3c = comp.loc[selb].values\ntmp3c = zscore(tmp3c, axis=1)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "plot-correlation-between-compartment-and-mc-atac-rna",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 170002
    },
    {
      "source": "cg = sns.clustermap(tmp3c, cmap='bwr', vmin=-3, vmax=3, metric='cosine', xticklabels=leg, yticklabels=[], figsize=(6,6))\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "plot-correlation-between-compartment-and-mc-atac-rna",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 180002
    },
    {
      "source": "rorder = cg.dendrogram_row.reordered_ind.copy()\ncorder = cg.dendrogram_col.reordered_ind.copy()",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "plot-correlation-between-compartment-and-mc-atac-rna",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 190002
    },
    {
      "source": "idxatac = np.arange(len(leg))[leg.isin(legatac)]\ncorderatac = [xx for xx in corder if xx in idxatac]",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "plot-correlation-between-compartment-and-mc-atac-rna",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 200002
    },
    {
      "source": "fig, axes = plt.subplots(1, 4, sharey='all', figsize=(12,5), dpi=300)\n\nax = axes[0]\nax.imshow(tmp3c[np.ix_(rorder, corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('Compartment Score', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\nax.set_yticks([])\nax.set_ylabel(f'{tmp3c.shape[0]} Diff Comp')\n\nax = axes[1]\nax.imshow(tmpatac[np.ix_(rorder, corderatac)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('ATAC', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(legatac)))\nax.set_xticklabels(legname[corderatac], rotation=90)\n\nax = axes[2]\nax.imshow(tmpcg[np.ix_(rorder, corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('mCG', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\n\nax = axes[3]\nax.imshow(tmpch[np.ix_(rorder, corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('mCH', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\n\n\nplt.tight_layout()\n# plt.savefig(f'majortype_{group_name}_diffcomp_3C_Epi.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "plot-correlation-between-compartment-and-mc-atac-rna",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 210002
    },
    {
      "source": "# fig, ax = plt.subplots(figsize=(2,2), dpi=300)\n# sns.violinplot([binall.loc[selb, 'mCH_corr'], binall.loc[selb, 'mCG_corr']], ax=ax)\n# ax.set_xticklabels(['mCH', 'mCG'])\n\nfig, ax = plt.subplots(figsize=(2,2), dpi=300)\nsns.violinplot([binall.loc[selb, 'mCG_corr'], \n                binall.loc[selb, 'mCH_corr'], \n                binall.loc[selb, 'ATAC_corr']], ax=ax)\nax.set_xticklabels(['mCG', 'mCH', 'ATAC'])\nax.set_ylabel('PCC with Comp Score')\n# plt.savefig(f'majortype_{group_name}_diffcomp_epicorr.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "plot-correlation-between-compartment-and-mc-atac-rna",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 220002
    },
    {
      "source": "print(binall.loc[selb, 'mCG_corr'].median(), \n      binall.loc[selb, 'mCH_corr'].median(),\n      binall.loc[selb, 'ATAC_corr'].median(),\n      selb.sum()\n     )",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "plot-correlation-between-compartment-and-mc-atac-rna",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 230002
    },
    {
      "source": "expr = pd.read_hdf('/home/jzhou_salk_edu/sky_workdir/hba/rna_majortype/cluster_expr.hdf')\nstats = pd.read_hdf(f'/home/jzhou_salk_edu/sky_workdir/hba/rna_majortype/{group_name}_deg_stats.hdf')\ngenefilter = (stats['stats']>0)\nexpr = expr.loc[:, genefilter]\nstats = stats.loc[genefilter]\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "tss-stats-vs-corr",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "TSS stats vs corr"
        ]
      },
      "doc_lineno": 260002
    },
    {
      "source": "data = pd.read_csv(f'/home/jzhou_salk_edu/sky_workdir/hba/ref/hg38.main.100kbin.TSS.slop2k.txt', sep='\\t', header=None, index_col=None)\ndata['bin_id'] = data[0] + '_' + (data[1] // res).astype(str)\ndata = data.rename({6:'gene_id'}, axis=1)\ndata = data.loc[(data['bin_id'].isin(binall.index)) & (data['gene_id'].isin(stats.index))]\ndata['maha'] = binall.loc[data['bin_id'].values, 'sample_maha'].values\ndata['kruskal'] = stats.loc[data['gene_id'].values, 'stats'].values\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "tss-stats-vs-corr",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "TSS stats vs corr"
        ]
      },
      "doc_lineno": 270002
    },
    {
      "source": "tmp3c = comp.loc[data['bin_id'].values].values\ntmp3c = zscore(tmp3c, axis=1)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "tss-stats-vs-corr",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "TSS stats vs corr"
        ]
      },
      "doc_lineno": 280002
    },
    {
      "source": "tmprna = expr.loc[leg, data['gene_id'].values].T.values\ntmprna = zscore(tmprna, axis=1)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "tss-stats-vs-corr",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "TSS stats vs corr"
        ]
      },
      "doc_lineno": 290002
    },
    {
      "source": "data['corr'] = [pearsonr(xx, yy)[0] for xx,yy in zip(tmp3c, tmprna)]",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "tss-stats-vs-corr",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "TSS stats vs corr"
        ]
      },
      "doc_lineno": 300002
    },
    {
      "source": "data = data.drop([0,1,2,3,4,5,7,8], axis=1)\ndata",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "tss-stats-vs-corr",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "TSS stats vs corr"
        ]
      },
      "doc_lineno": 310002
    },
    {
      "source": "fig, ax = plt.subplots(figsize=(3.5,3), dpi=300)\nsns.histplot(data, x='maha', y='kruskal', bins=100, ax=ax, log_scale=(10,10))\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "tss-stats-vs-corr",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "TSS stats vs corr"
        ]
      },
      "doc_lineno": 320002
    },
    {
      "source": "data['maha_group'], groupM = pd.cut(zscore(np.log10(data['maha'])), 100, labels=False, retbins=True)\ndata['kruskal_group'], groupK = pd.cut(zscore(np.log10(data['kruskal'])), 100, labels=False, retbins=True)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "tss-stats-vs-corr",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "TSS stats vs corr"
        ]
      },
      "doc_lineno": 330002
    },
    {
      "source": "tmp = data.groupby(['maha_group','kruskal_group'])['corr'].mean()\ngroupcorr = np.zeros((100, 100)) / 0\ngroupcorr[(tmp.index.get_level_values('kruskal_group'), tmp.index.get_level_values('maha_group'))] = tmp.values\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "tss-stats-vs-corr",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "TSS stats vs corr"
        ]
      },
      "doc_lineno": 340002
    },
    {
      "source": "tmp = data.groupby(['maha_group','kruskal_group'])['corr'].count()\ngroupcount = np.zeros((100, 100))\ngroupcount[(tmp.index.get_level_values('kruskal_group'), tmp.index.get_level_values('maha_group'))] = tmp.values + 1\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "tss-stats-vs-corr",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "TSS stats vs corr"
        ]
      },
      "doc_lineno": 350002
    },
    {
      "source": "cmap = mpl.cm.bwr\ncmap.set_bad('black', 1.0)\n\nfig, axes = plt.subplots(1, 2, figsize=(6,3), sharex='all', sharey='all', dpi=300)\nax = axes[0]\nplot = ax.imshow(groupcorr, vmin=-0.8, vmax=0.8, cmap=cmap)\n\ncbar = fig.colorbar(plot, ax=ax, shrink=0.5, fraction=0.1)\ncbar.set_ticks([-0.8, 0.8])\nax.set_xlabel('Zscore Maha')\nax.set_ylabel('Zscore Kruskal')\n\nax = axes[1]\nplot = ax.imshow(groupcount, cmap='Reds', norm=LogNorm(vmin=1))\nfig.colorbar(plot, ax=ax, shrink=0.5, fraction=0.1)\nax.set_xticks(np.arange(-0.5, 100.5, 20))\nax.set_yticks(np.arange(-0.5, 100.5, 20))\nax.set_xticklabels(np.around(groupM[np.arange(0,100.5,20).astype(int)], decimals=1))\nax.set_yticklabels(np.around(groupK[np.arange(0,100.5,20).astype(int)], decimals=1))\n\nax.set_xlabel('Zscore Maha')\nplt.tight_layout()\n# plt.savefig(f'majortype_{group_name}_comp_rna_stats_tss_corr.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "tss-stats-vs-corr",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "TSS stats vs corr"
        ]
      },
      "doc_lineno": 360002
    },
    {
      "source": "corr_all = []",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "differential-loop-vs-all-gene-tss",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Differential Loop vs All Gene TSS"
        ]
      },
      "doc_lineno": 390002
    },
    {
      "source": "selp = data['bin_id'].isin(selb.index[selb])\ndata = data.loc[selp]",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "differential-loop-vs-all-gene-tss",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Differential Loop vs All Gene TSS"
        ]
      },
      "doc_lineno": 400002
    },
    {
      "source": "tmp3c = tmp3c[selp]\ntmprna = tmprna[selp]",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "differential-loop-vs-all-gene-tss",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Differential Loop vs All Gene TSS"
        ]
      },
      "doc_lineno": 410002
    },
    {
      "source": "cg = sns.clustermap(tmp3c, cmap='bwr', vmin=-3, vmax=3, metric='cosine', xticklabels=leg, yticklabels=[], figsize=(6,6))\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "differential-loop-vs-all-gene-tss",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Differential Loop vs All Gene TSS"
        ]
      },
      "doc_lineno": 420002
    },
    {
      "source": "rorder = cg.dendrogram_row.reordered_ind.copy()\ncorder = cg.dendrogram_col.reordered_ind.copy()",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "differential-loop-vs-all-gene-tss",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Differential Loop vs All Gene TSS"
        ]
      },
      "doc_lineno": 430002
    },
    {
      "source": "fig, axes = plt.subplots(1, 2, sharey='all', figsize=(6,5), dpi=300)\n\nax = axes[0]\nax.imshow(tmp3c[np.ix_(rorder, corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('Interaction', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\nax.set_yticks([])\nax.set_ylabel(f'{np.unique(data[\"bin_id\"]).shape[0]} Diff Comp')\n\nax = axes[1]\nax.imshow(tmprna[np.ix_(rorder, corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('RNA', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\nax.set_ylabel(f'{np.unique(data[\"gene_id\"]).shape[0]} Gene')\n\nplt.tight_layout()\n# plt.savefig(f'majortype_{group_name}_diffcomp_3C_RNA_alltss.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "differential-loop-vs-all-gene-tss",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Differential Loop vs All Gene TSS"
        ]
      },
      "doc_lineno": 440002
    },
    {
      "source": "corr_all.append(data['corr'].values)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "differential-loop-vs-all-gene-tss",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Differential Loop vs All Gene TSS"
        ]
      },
      "doc_lineno": 450002
    },
    {
      "source": "from scipy.stats import rankdata\n\ndeg = np.zeros(genefilter.shape[0])\nfor i in range(len(leg)-1):\n    for j in range(i+1, len(leg)):\n        tmp = np.load(f'/home/jzhou_salk_edu/sky_workdir/hba/rna_majortype/DEG/{leg[i]}-{leg[j]}.npz')\n        # deg[np.logical_and(np.abs(tmp['fc'])>1, tmp['fdr']<1e-3)] = 1\n        rank = rankdata(tmp['fdr'])\n        deg[rank<=100] = 1\n\nprint(deg.sum())",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "differential-loop-vs-deg-tss",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Differential Loop vs DEG TSS"
        ]
      },
      "doc_lineno": 480002
    },
    {
      "source": "selp = data['gene_id'].isin(genefilter.index[deg==1])\ndata = data.loc[selp]",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "differential-loop-vs-deg-tss",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Differential Loop vs DEG TSS"
        ]
      },
      "doc_lineno": 490002
    },
    {
      "source": "tmp3c = tmp3c[selp]\ntmprna = tmprna[selp]",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "differential-loop-vs-deg-tss",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Differential Loop vs DEG TSS"
        ]
      },
      "doc_lineno": 500002
    },
    {
      "source": "cg = sns.clustermap(tmp3c, cmap='bwr', vmin=-3, vmax=3, metric='cosine', xticklabels=leg, yticklabels=[], figsize=(6,6))\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "differential-loop-vs-deg-tss",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Differential Loop vs DEG TSS"
        ]
      },
      "doc_lineno": 510002
    },
    {
      "source": "rorder = cg.dendrogram_row.reordered_ind.copy()\ncorder = cg.dendrogram_col.reordered_ind.copy()",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "differential-loop-vs-deg-tss",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Differential Loop vs DEG TSS"
        ]
      },
      "doc_lineno": 520002
    },
    {
      "source": "fig, axes = plt.subplots(1, 2, sharey='all', figsize=(6,5), dpi=300)\n\nax = axes[0]\nax.imshow(tmp3c[np.ix_(rorder, corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('Interaction', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\nax.set_yticks([])\nax.set_ylabel(f'{np.unique(data[\"bin_id\"]).shape[0]} Diff Comp')\n\nax = axes[1]\nax.imshow(tmprna[np.ix_(rorder, corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('RNA', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\nax.set_ylabel(f'{np.unique(data[\"gene_id\"]).shape[0]} DEG')\n\nplt.tight_layout()\n# plt.savefig(f'majortype_{group_name}_diffcomp_3C_RNA_degtss.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "differential-loop-vs-deg-tss",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Differential Loop vs DEG TSS"
        ]
      },
      "doc_lineno": 530002
    },
    {
      "source": "corr_all.append(data['corr'].values)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "differential-loop-vs-deg-tss",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Differential Loop vs DEG TSS"
        ]
      },
      "doc_lineno": 540002
    },
    {
      "source": "expr = pd.read_hdf('/home/jzhou_salk_edu/sky_workdir/hba/rna_majortype/cluster_expr.hdf')\nstats = pd.read_hdf(f'/home/jzhou_salk_edu/sky_workdir/hba/rna_majortype/{group_name}_deg_stats.hdf')\ngenefilter = (stats['stats']>0)\nexpr = expr.loc[:, genefilter]\nstats = stats.loc[genefilter]\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "gene-body-stats-vs-corr",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Gene body stats vs corr"
        ]
      },
      "doc_lineno": 570002
    },
    {
      "source": "data = pd.read_csv(f'/home/jzhou_salk_edu/sky_workdir/hba/ref/hg38.main.100kbin.gene.slop2k.txt', sep='\\t', header=None, index_col=None)\ndata['bin_id'] = data[0] + '_' + (data[1] // res).astype(str)\ndata = data.rename({6:'gene_id'}, axis=1)\ndata = data.loc[(data['bin_id'].isin(binall.index)) & (data['gene_id'].isin(stats.index))]\ndata['maha'] = binall.loc[data['bin_id'].values, 'sample_maha'].values\ndata['kruskal'] = stats.loc[data['gene_id'].values, 'stats'].values\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "gene-body-stats-vs-corr",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Gene body stats vs corr"
        ]
      },
      "doc_lineno": 580002
    },
    {
      "source": "tmp3c = comp.loc[data['bin_id'].values].values\ntmp3c = zscore(tmp3c, axis=1)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "gene-body-stats-vs-corr",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Gene body stats vs corr"
        ]
      },
      "doc_lineno": 590002
    },
    {
      "source": "tmprna = expr.loc[leg, data['gene_id'].values].T.values\ntmprna = zscore(tmprna, axis=1)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "gene-body-stats-vs-corr",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Gene body stats vs corr"
        ]
      },
      "doc_lineno": 600002
    },
    {
      "source": "data['corr'] = [pearsonr(xx, yy)[0] for xx,yy in zip(tmp3c, tmprna)]",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "gene-body-stats-vs-corr",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Gene body stats vs corr"
        ]
      },
      "doc_lineno": 610002
    },
    {
      "source": "data = data.drop([0,1,2,3,4,5,7,8], axis=1)\ndata",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "gene-body-stats-vs-corr",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Gene body stats vs corr"
        ]
      },
      "doc_lineno": 620002
    },
    {
      "source": "fig, ax = plt.subplots(figsize=(3.5,3), dpi=300)\nsns.histplot(data, x='maha', y='kruskal', bins=100, ax=ax, log_scale=(10,10))\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "gene-body-stats-vs-corr",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Gene body stats vs corr"
        ]
      },
      "doc_lineno": 630002
    },
    {
      "source": "data['maha_group'], groupM = pd.cut(zscore(np.log10(data['maha'])), 100, labels=False, retbins=True)\ndata['kruskal_group'], groupK = pd.cut(zscore(np.log10(data['kruskal'])), 100, labels=False, retbins=True)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "gene-body-stats-vs-corr",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Gene body stats vs corr"
        ]
      },
      "doc_lineno": 640002
    },
    {
      "source": "tmp = data.groupby(['maha_group','kruskal_group'])['corr'].mean()\ngroupcorr = np.zeros((100, 100)) / 0\ngroupcorr[(tmp.index.get_level_values('kruskal_group'), tmp.index.get_level_values('maha_group'))] = tmp.values\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "gene-body-stats-vs-corr",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Gene body stats vs corr"
        ]
      },
      "doc_lineno": 650002
    },
    {
      "source": "tmp = data.groupby(['maha_group','kruskal_group'])['corr'].count()\ngroupcount = np.zeros((100, 100))\ngroupcount[(tmp.index.get_level_values('kruskal_group'), tmp.index.get_level_values('maha_group'))] = tmp.values + 1\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "gene-body-stats-vs-corr",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Gene body stats vs corr"
        ]
      },
      "doc_lineno": 660002
    },
    {
      "source": "cmap = mpl.cm.bwr\ncmap.set_bad('black', 1.0)\n\nfig, axes = plt.subplots(1, 2, figsize=(6,3), sharex='all', sharey='all', dpi=300)\nax = axes[0]\nplot = ax.imshow(groupcorr, vmin=-0.8, vmax=0.8, cmap=cmap)\n\ncbar = fig.colorbar(plot, ax=ax, shrink=0.5, fraction=0.1)\ncbar.set_ticks([-0.8, 0.8])\nax.set_xlabel('Zscore Maha')\nax.set_ylabel('Zscore Kruskal')\n\nax = axes[1]\nplot = ax.imshow(groupcount, cmap='Reds', norm=LogNorm(vmin=1))\nfig.colorbar(plot, ax=ax, shrink=0.5, fraction=0.1)\nax.set_xticks(np.arange(-0.5, 100.5, 20))\nax.set_yticks(np.arange(-0.5, 100.5, 20))\nax.set_xticklabels(np.around(groupM[np.arange(0,100.5,20).astype(int)], decimals=1))\nax.set_yticklabels(np.around(groupK[np.arange(0,100.5,20).astype(int)], decimals=1))\n\nax.set_xlabel('Zscore Maha')\nplt.tight_layout()\n# plt.savefig(f'majortype_{group_name}_comp_rna_stats_genebody_corr.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "gene-body-stats-vs-corr",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Gene body stats vs corr"
        ]
      },
      "doc_lineno": 670002
    },
    {
      "source": "selp = data['bin_id'].isin(selb.index[selb])\ndata = data.loc[selp]",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "differential-loop-vs-all-gene-body",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Differential Loop vs All Gene Body"
        ]
      },
      "doc_lineno": 700002
    },
    {
      "source": "tmp3c = tmp3c[selp]\ntmprna = tmprna[selp]",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "differential-loop-vs-all-gene-body",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Differential Loop vs All Gene Body"
        ]
      },
      "doc_lineno": 710002
    },
    {
      "source": "cg = sns.clustermap(tmp3c, cmap='bwr', vmin=-3, vmax=3, metric='cosine', xticklabels=leg, yticklabels=[], figsize=(6,6))\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "differential-loop-vs-all-gene-body",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Differential Loop vs All Gene Body"
        ]
      },
      "doc_lineno": 720002
    },
    {
      "source": "rorder = cg.dendrogram_row.reordered_ind.copy()\ncorder = cg.dendrogram_col.reordered_ind.copy()",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "differential-loop-vs-all-gene-body",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Differential Loop vs All Gene Body"
        ]
      },
      "doc_lineno": 730002
    },
    {
      "source": "fig, axes = plt.subplots(1, 2, sharey='all', figsize=(6,5), dpi=300)\n\nax = axes[0]\nax.imshow(tmp3c[np.ix_(rorder, corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('Interaction', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\nax.set_yticks([])\nax.set_ylabel(f'{np.unique(data[\"bin_id\"]).shape[0]} Diff Comp')\n\nax = axes[1]\nax.imshow(tmprna[np.ix_(rorder, corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('RNA', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\nax.set_ylabel(f'{np.unique(data[\"gene_id\"]).shape[0]} Gene')\n\nplt.tight_layout()\n# plt.savefig(f'majortype_{group_name}_diffcomp_3C_RNA_allbody.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "differential-loop-vs-all-gene-body",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Differential Loop vs All Gene Body"
        ]
      },
      "doc_lineno": 740002
    },
    {
      "source": "corr_all.append(data['corr'].values)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "differential-loop-vs-all-gene-body",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Differential Loop vs All Gene Body"
        ]
      },
      "doc_lineno": 750002
    },
    {
      "source": "from scipy.stats import rankdata\n\ndeg = np.zeros(genefilter.shape[0])\nfor i in range(len(leg)-1):\n    for j in range(i+1, len(leg)):\n        tmp = np.load(f'/home/jzhou_salk_edu/sky_workdir/hba/rna_majortype/DEG/{leg[i]}-{leg[j]}.npz')\n        # deg[np.logical_and(np.abs(tmp['fc'])>1, tmp['fdr']<1e-3)] = 1\n        rank = rankdata(tmp['fdr'])\n        deg[rank<=100] = 1\n\nprint(deg.sum())",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "differential-loop-vs-deg-gene-body",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Differential Loop vs DEG Gene Body"
        ]
      },
      "doc_lineno": 780002
    },
    {
      "source": "selp = data['gene_id'].isin(genefilter.index[deg==1])\ndata = data.loc[selp]",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "differential-loop-vs-deg-gene-body",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Differential Loop vs DEG Gene Body"
        ]
      },
      "doc_lineno": 790002
    },
    {
      "source": "tmp3c = tmp3c[selp]\ntmprna = tmprna[selp]",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "differential-loop-vs-deg-gene-body",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Differential Loop vs DEG Gene Body"
        ]
      },
      "doc_lineno": 800002
    },
    {
      "source": "cg = sns.clustermap(tmp3c, cmap='bwr', vmin=-3, vmax=3, metric='cosine', xticklabels=leg, yticklabels=[], figsize=(6,6))\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "differential-loop-vs-deg-gene-body",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Differential Loop vs DEG Gene Body"
        ]
      },
      "doc_lineno": 810002
    },
    {
      "source": "rorder = cg.dendrogram_row.reordered_ind.copy()\ncorder = cg.dendrogram_col.reordered_ind.copy()",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "differential-loop-vs-deg-gene-body",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Differential Loop vs DEG Gene Body"
        ]
      },
      "doc_lineno": 820002
    },
    {
      "source": "fig, axes = plt.subplots(1, 2, sharey='all', figsize=(6,5), dpi=300)\n\nax = axes[0]\nax.imshow(tmp3c[np.ix_(rorder, corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('Interaction', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\nax.set_yticks([])\nax.set_ylabel(f'{np.unique(data[\"bin_id\"]).shape[0]} Diff Comp')\n\nax = axes[1]\nax.imshow(tmprna[np.ix_(rorder, corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('RNA', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\nax.set_ylabel(f'{np.unique(data[\"gene_id\"]).shape[0]} DEG')\n\nplt.tight_layout()\n# plt.savefig(f'majortype_{group_name}_diffcomp_3C_RNA_degbody.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "differential-loop-vs-deg-gene-body",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Differential Loop vs DEG Gene Body"
        ]
      },
      "doc_lineno": 830002
    },
    {
      "source": "corr_all.append(data['corr'].values)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "differential-loop-vs-deg-gene-body",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Differential Loop vs DEG Gene Body"
        ]
      },
      "doc_lineno": 840002
    },
    {
      "source": "np.save(f'{outdir}corr_diffcomp_rna.npy', corr_all)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "differential-loop-vs-deg-gene-body",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Differential Loop vs DEG Gene Body"
        ]
      },
      "doc_lineno": 850002
    },
    {
      "source": "corr_all = np.load(f'{outdir}corr_diffcomp_rna.npy', allow_pickle=True)[[0,2,1,3]]\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "differential-loop-vs-deg-gene-body",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Differential Loop vs DEG Gene Body"
        ]
      },
      "doc_lineno": 860002
    },
    {
      "source": "xleg = [f'{xx}\\n(n={yy.shape[0]})' for xx,yy in zip(['All Gene TSS', 'All Gene Body', 'DEG TSS', 'DEG Body'], corr_all)]\nfig, ax = plt.subplots(figsize=(4.5,2), dpi=300)\nsns.violinplot(corr_all, ax=ax)\nax.set_xticklabels(xleg)\nax.set_ylabel('PCC with Comp Score')\n# plt.tight_layout()\n# plt.savefig(f'majortype_{group_name}_diffcomp_rnacorr.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "differential-loop-vs-deg-gene-body",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Differential Loop vs DEG Gene Body"
        ]
      },
      "doc_lineno": 870002
    },
    {
      "source": "[[xx.shape, np.median(xx)] for xx in corr_all]",
      "names": [],
      "example": {
        "document": "hba/compartment_majortype/06.plot",
        "ref_id": "differential-loop-vs-deg-gene-body",
        "headings": [
          "Plot correlation between compartment and mC/ATAC/RNA",
          "Differential Loop vs DEG Gene Body"
        ]
      },
      "doc_lineno": 880002
    }
  ],
  "hba/compartment_majortype/intro": [],
  "hba/correlation_summary": [
    {
      "source": "import cooler\nimport numpy as np\nimport pandas as pd\nfrom scipy.sparse import triu\nfrom scipy.stats import pearsonr, zscore, norm\nfrom multiprocessing import Pool\nfrom concurrent.futures import ProcessPoolExecutor, as_completed\nfrom ALLCools.mcds import MCDS\nfrom ALLCools.mcds.utilities import calculate_posterior_mc_frac\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm\nfrom matplotlib import cm as cm\nimport seaborn as sns\n\nmpl.style.use('default')\nmpl.rcParams['pdf.fonttype'] = 42\nmpl.rcParams['ps.fonttype'] = 42\nmpl.rcParams['font.family'] = 'sans-serif'\nmpl.rcParams['font.sans-serif'] = 'Helvetica'\n",
      "names": [],
      "example": {
        "document": "hba/correlation_summary",
        "ref_id": "correlation-summary",
        "headings": [
          "Correlation Summary"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "xpos = [0,1,3,4,6,7,8,11,12,14,15,17,18,19]\ncolor = ['C0', 'C1', 'C0', 'C1', 'C2', 'C0', 'C1', 'C0', 'C1', 'C0', 'C1', 'C2', 'C0', 'C1']\n\nfig, axes = plt.subplots(2, 1, figsize=(8,4), dpi=300, sharex='all')\nfor i,group in enumerate(['all', 'neu']):\n    ax = axes[i]\n    \n    corr_all = []\n    corr_all += np.load(f'compartment_majortype/diff/{group}/corr_diffloop_rna.npy', allow_pickle=True)[[0,2,1,3]].tolist()\n    corr_all += np.load(f'domain_majortype/diff/{group}/corr_diffbound_rna.npy', allow_pickle=True)[[0,2,1,3]].tolist()\n    corr_all += np.load(f'loop_majortype/diff/{group}/corr_diffloop_rna.npy', allow_pickle=True)[[0,2,4,1,3,5]].tolist()\n    corr_all = np.array(corr_all)[[0,1,4,5,8,9,10,2,3,6,7,11,12,13]]\n\n    plot = ax.violinplot(dataset=corr_all, positions=xpos, widths=1, showextrema=False, bw_method='scott')\n    for p, c in zip(plot['bodies'], color):\n        p.set_facecolor(c)\n        p.set_alpha(0.5)\n\n    plot = ax.boxplot(corr_all, positions=xpos, showfliers=False, widths=0.2, patch_artist=True, medianprops={'color':'k'})\n    for p in plot['boxes']:\n        p.set_facecolor('#a0a0a0')\n\n    ax.set_ylabel('PCC with Gene Expr')\n    ax.set_title(['All cell type', 'Neuronal cell type'][i], fontsize=12)\n    ax.tick_params(left=True, right=True)\n    \n    print(group, np.around([np.median(xx) for xx in corr_all], decimals=3), [len(xx) for xx in corr_all])\n    \nax.set_xticks([0.5, 3.5, 7, 11.5, 14.5, 18])\nax.set_xticklabels(['Compartment', 'Domain\\n\\nAll Gene', 'Loop', 'Compartment', 'Domain\\n\\nDEG', 'Loop'])\n\nmarkers = [\n    plt.Line2D([0, 0], [0, 0], color=color, marker=\"s\", linestyle=\"\")\n    for color in ['C0','C1','C2']\n]\n\nax.legend(\n    markers, ['TSS ol bin', 'Gene body ol bin', 'Gene body with loop'], fontsize=8, numpoints=1, bbox_to_anchor=(1, 1), loc=\"upper left\"\n)\n\nplt.tight_layout()\n# plt.savefig('RNA_corr.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/correlation_summary",
        "ref_id": "correlation-summary",
        "headings": [
          "Correlation Summary"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "from scipy.stats import ranksums",
      "names": [],
      "example": {
        "document": "hba/correlation_summary",
        "ref_id": "correlation-summary",
        "headings": [
          "Correlation Summary"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "print(ranksums(corr_all[4], corr_all[6]), ranksums(corr_all[11], corr_all[13]))",
      "names": [],
      "example": {
        "document": "hba/correlation_summary",
        "ref_id": "correlation-summary",
        "headings": [
          "Correlation Summary"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "mch_corr, mcg_corr, atac_corr = [], [], []\nfor group in ['all', 'neu']:\n    filelist = [f'compartment_majortype/diff/{group}/bin_stats.hdf', \n                f'domain_majortype/diff/{group}/bin_stats.hdf', \n                f'loop_majortype/diff/{group}/merged_loop.hdf']\n    for i,file in enumerate(filelist):\n        tmp = pd.read_hdf(file)\n        if i==0:\n            selb = zscore(tmp['sample_maha'])>norm.isf(0.025)\n        elif i==1:\n            selb = (tmp['chi2filter'] & tmp['diff_sc'] & tmp['bklfilter'] & tmp['ins_lm'] & (tmp['probdiff']>0.05))\n        else:\n            selb = ((zscore(tmp['Qanova'])>norm.isf(0.15)) & (zscore(tmp['Tanova'])>norm.isf(0.15)))\n        nanfilter = (tmp[['mCG_corr', 'mCH_corr', 'ATAC_corr']].isna().sum(axis=1)==0)\n        tmp = tmp.loc[selb & nanfilter, ['mCG_corr', 'mCH_corr', 'ATAC_corr']].T.values.tolist()\n        mcg_corr.append(tmp[0])\n        mch_corr.append(tmp[1])\n        atac_corr.append(tmp[2])\n",
      "names": [],
      "example": {
        "document": "hba/correlation_summary",
        "ref_id": "correlation-summary",
        "headings": [
          "Correlation Summary"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "xpos = [0,1,2,4,5,6]\ncolor = ['C0', 'C1', 'C2', 'C0', 'C1', 'C2']\n\nfig, axes = plt.subplots(1, 3, figsize=(8,2), dpi=300, sharex='all', sharey='all')\n\nfor i,corr in enumerate([atac_corr, mcg_corr, mch_corr]):\n    ax = axes[i]\n    plot = ax.violinplot(dataset=corr, positions=xpos, widths=1, showextrema=False, bw_method='scott')\n    for p, c in zip(plot['bodies'], color):\n        p.set_facecolor(c)\n        p.set_alpha(0.5)\n\n    plot = ax.boxplot(corr, positions=xpos, showfliers=False, widths=0.2, patch_artist=True, medianprops={'color':'k'})\n    for p in plot['boxes']:\n        p.set_facecolor('#a0a0a0')\n\n    ax.set_title(['ATAC', 'mCG', 'mCH'][i], fontsize=12)\n    ax.tick_params(left=True, right=True)\n    \nax.set_xticks([1,5])\nax.set_xticklabels(['All type', 'Neuronal type'])\naxes[0].set_ylabel('PCC')\n\nmarkers = [\n    plt.Line2D([0, 0], [0, 0], color=color, marker=\"s\", linestyle=\"\")\n    for color in ['C0','C1','C2']\n]\n\nax.legend(\n    markers, ['Compartment', 'Domain', 'Loop'], fontsize=8, numpoints=1, bbox_to_anchor=(1, 1), loc=\"upper left\"\n)\n\n# plt.tight_layout()\n# plt.savefig('Epi_corr.pdf', transparent=True)\n    ",
      "names": [],
      "example": {
        "document": "hba/correlation_summary",
        "ref_id": "correlation-summary",
        "headings": [
          "Correlation Summary"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "for i,corr in enumerate([atac_corr, mcg_corr, mch_corr]):\n    print(i, np.around([np.median(xx) for xx in corr], decimals=3), [len(xx) for xx in corr])\n    ",
      "names": [],
      "example": {
        "document": "hba/correlation_summary",
        "ref_id": "correlation-summary",
        "headings": [
          "Correlation Summary"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "from glob import glob\n\ngene_list = np.sort(glob('rna_majortype/gene_*poscorr*'))\ngene_list",
      "names": [],
      "example": {
        "document": "hba/correlation_summary",
        "ref_id": "correlation-summary",
        "headings": [
          "Correlation Summary"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "gene_list = [gene_list[i] for i in [0,1,2,3,4,5,7,8]]\ngeneall = [pd.read_csv(xx, index_col=0, header=None).index for xx in gene_list]\n",
      "names": [],
      "example": {
        "document": "hba/correlation_summary",
        "ref_id": "correlation-summary",
        "headings": [
          "Correlation Summary"
        ]
      },
      "doc_lineno": 130002
    },
    {
      "source": "comp_gene = pd.Index(np.unique(np.concatenate([geneall[i] for i in [4]])))\ndomain_gene = pd.Index(np.unique(np.concatenate([geneall[i] for i in [0,1,2,3]])))\nloop_gene = pd.Index(np.unique(np.concatenate([geneall[i] for i in [5,6,7]])))\n",
      "names": [],
      "example": {
        "document": "hba/correlation_summary",
        "ref_id": "correlation-summary",
        "headings": [
          "Correlation Summary"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "print([xx.shape[0] for xx in geneall])\ngeneall = np.unique(np.concatenate(geneall))\n\nprint(geneall.shape[0], geneall.shape[0]/1099)",
      "names": [],
      "example": {
        "document": "hba/correlation_summary",
        "ref_id": "correlation-summary",
        "headings": [
          "Correlation Summary"
        ]
      },
      "doc_lineno": 150002
    },
    {
      "source": "from matplotlib_venn import venn3",
      "names": [],
      "example": {
        "document": "hba/correlation_summary",
        "ref_id": "correlation-summary",
        "headings": [
          "Correlation Summary"
        ]
      },
      "doc_lineno": 160002
    },
    {
      "source": "fig, ax = plt.subplots(figsize=(3,3), dpi=300)\nplot = venn3(subsets=[set(comp_gene), set(domain_gene), set(loop_gene)], set_labels = ('Compartment', 'Domain', 'Loop'), ax=ax)\n# plt.savefig('DEG_corr_3d_venn.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/correlation_summary",
        "ref_id": "correlation-summary",
        "headings": [
          "Correlation Summary"
        ]
      },
      "doc_lineno": 170002
    }
  ],
  "hba/domain_majortype/01.call": [
    {
      "source": "import cooler\nimport numpy as np\nimport pandas as pd\nimport anndata\nfrom glob import glob\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/01.call",
        "ref_id": "domain-boundary-prob",
        "headings": [
          "Domain boundary prob"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "leg = pd.Index(['L23_IT', 'L4_IT', 'L5_IT', 'L6_IT', 'L6_IT_Car3', 'L56_NP', 'L6_CT', 'L6b', 'L5_ET', 'Amy', \n                'Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb_ChC', 'Sst', 'CHD7', \n                'MSN_D1', 'MSN_D2', 'Foxp2', 'SubCtx', \n                'ASC', 'ODC', 'OPC', 'MGC', 'PC', 'EC', 'VLMC'\n               ])\nlegname = pd.Index(['L2/3-IT', 'L4-IT', 'L5-IT', 'L6-IT', 'L6-IT-Car3', 'L5/6-NP', 'L6-CT', 'L6b', 'L5-ET', 'Amy-Exc', \n                    'Lamp5', 'Lamp5-Lhx6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb-ChC', 'Sst', 'Chd7', \n                    'MSN-D1', 'MSN-D2', 'Foxp2', 'SubCtx-Cplx', \n                    'ASC', 'ODC', 'OPC', 'MGC', 'PC', 'EC', 'VLMC'\n                   ])\nprint(len(leg))\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/01.call",
        "ref_id": "domain-boundary-prob",
        "headings": [
          "Domain boundary prob"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "indir = '/data/hba/domain_majortype/'\noutdir = '/home/jzhou_salk_edu/sky_workdir/hba/domain_majortype/'\nres = 25000\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/01.call",
        "ref_id": "domain-boundary-prob",
        "headings": [
          "Domain boundary prob"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "chrom_size_path = '/home/jzhou_salk_edu/sky_workdir/hba/ref/hg38.main.chrom.sizes'\nchrom_sizes = cooler.read_chromsizes(chrom_size_path, all_names=True)\nchrom_sizes",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/01.call",
        "ref_id": "domain-boundary-prob",
        "headings": [
          "Domain boundary prob"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "metadata = pd.read_hdf(f'{outdir}cell_117540_meta.hdf')\nmetadata",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/01.call",
        "ref_id": "domain-boundary-prob",
        "headings": [
          "Domain boundary prob"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "tad_path_list = glob(f'{indir}sc_domain/*.boundary.h5ad')\nprint(len(tad_path_list))\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/01.call",
        "ref_id": "domain-boundary-prob",
        "headings": [
          "Domain boundary prob"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "sc_border = []\nfor xx in tad_path_list:\n    sc_border.append(anndata.read_h5ad(xx))\n    \nsc_border = anndata.AnnData.concatenate(*sc_border, index_unique=None)\nsc_border\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/01.call",
        "ref_id": "domain-boundary-prob",
        "headings": [
          "Domain boundary prob"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "sc_border.X = sc_border.X.astype(int)",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/01.call",
        "ref_id": "domain-boundary-prob",
        "headings": [
          "Domain boundary prob"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "sc_border = sc_border[sc_border.obs.index.isin(metadata.index)].copy()\nsc_border = sc_border[:, ~sc_border.var['chrom'].isin(['chrX','chrY','chrM','chrL'])].copy()\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/01.call",
        "ref_id": "domain-boundary-prob",
        "headings": [
          "Domain boundary prob"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "sc_border.obs = metadata.loc[sc_border.obs.index]\nsc_border.raw = sc_border.copy()\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/01.call",
        "ref_id": "domain-boundary-prob",
        "headings": [
          "Domain boundary prob"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "sc_border.write_h5ad(f'{outdir}cell_{sc_border.shape[0]}_boundary.h5ad')\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/01.call",
        "ref_id": "domain-boundary-prob",
        "headings": [
          "Domain boundary prob"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "bound_count_ct = []\nfor xx in leg:\n    bound_count_ct.append(sc_border.raw.X[sc_border.obs['MajorType']==xx].getnnz(axis=0))\n\nbound_count_ct = pd.DataFrame(bound_count_ct, index=leg, \n                              columns=sc_border.raw.var['chrom'].astype(str) + '_' + (sc_border.raw.var['start'] // res).astype(str))\ncell_count_ct = sc_border.obs['MajorType'].value_counts().loc[leg]\n# bound_prob_ct = (bound_count_ct / cell_count_ct[:,None]).T\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/01.call",
        "ref_id": "domain-boundary-prob",
        "headings": [
          "Domain boundary prob"
        ]
      },
      "doc_lineno": 130002
    },
    {
      "source": "bound_count_ct.to_hdf(f'{outdir}MajorType_boundcount.hdf', key='data')\ncell_count_ct.to_csv(f'{outdir}MajorType_cellcount.csv.gz')\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/01.call",
        "ref_id": "domain-boundary-prob",
        "headings": [
          "Domain boundary prob"
        ]
      },
      "doc_lineno": 140002
    }
  ],
  "hba/domain_majortype/02.count": [
    {
      "source": "import numpy as np\nimport pandas as pd\nfrom glob import glob\nfrom concurrent.futures import ProcessPoolExecutor, as_completed\n\nimport anndata\n\nfrom scipy.stats import pearsonr, ranksums\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm as cm\nimport seaborn as sns\n\nmpl.style.use('default')\nmpl.rcParams['pdf.fonttype'] = 42\nmpl.rcParams['ps.fonttype'] = 42\nmpl.rcParams['font.family'] = 'sans-serif'\nmpl.rcParams['font.sans-serif'] = 'Helvetica'\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/02.count",
        "ref_id": "domain-count-and-size",
        "headings": [
          "Domain count and size"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "import hba_data\nctdict = hba_data.internal.celltype.CellType.majortype_palette()\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/02.count",
        "ref_id": "domain-count-and-size",
        "headings": [
          "Domain count and size"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "leg = pd.Index(['L23_IT', 'L4_IT', 'L5_IT', 'L6_IT', 'L6_IT_Car3', 'L56_NP', 'L6_CT', 'L6b', 'L5_ET', 'Amy', \n                'Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb_ChC', 'Sst', 'CHD7', \n                'MSN_D1', 'MSN_D2', 'Foxp2', 'SubCtx', \n                'ASC', 'ODC', 'OPC', 'MGC', 'PC', 'EC', 'VLMC'\n               ])\nlegname = pd.Index(['L2/3-IT', 'L4-IT', 'L5-IT', 'L6-IT', 'L6-IT-Car3', 'L5/6-NP', 'L6-CT', 'L6b', 'L5-ET', 'Amy-Exc', \n                    'Lamp5', 'Lamp5-Lhx6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb-ChC', 'Sst', 'Chd7', \n                    'MSN-D1', 'MSN-D2', 'Foxp2', 'SubCtx-Cplx', \n                    'ASC', 'ODC', 'OPC', 'MGC', 'PC', 'EC', 'VLMC'\n                   ])\nprint(len(leg))\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/02.count",
        "ref_id": "domain-count-and-size",
        "headings": [
          "Domain count and size"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "indir = '/data/hba/domain_majortype/'\noutdir = '/home/jzhou_salk_edu/sky_workdir/hba/domain_majortype/'\nres = 25000\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/02.count",
        "ref_id": "domain-count-and-size",
        "headings": [
          "Domain count and size"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "sc_border = anndata.read_h5ad(f'{outdir}cell_117540_boundary.h5ad')\nsc_border",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/02.count",
        "ref_id": "domain-count-and-size",
        "headings": [
          "Domain count and size"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "def compute_domain_size(i):\n    global res, sc_border\n    tmp = sc_border.raw.X[i]\n    tmp = np.repeat(tmp.indices, tmp.data).reshape((-1, 2))\n    return (tmp[:, 1] - tmp[:, 0]).sum() * res\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/02.count",
        "ref_id": "domain-count-and-size",
        "headings": [
          "Domain count and size"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "metadata = pd.read_hdf(f'{outdir}cell_117540_meta.hdf')\nmetadata",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/02.count",
        "ref_id": "domain-count-and-size",
        "headings": [
          "Domain count and size"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "ncpu = 20\ndomain_size, cell_list = [], []\nwith ProcessPoolExecutor(ncpu) as exe:\n    future_dict = {}\n    for i,cell in enumerate(metadata.index):\n        future = exe.submit(compute_domain_size, i=i)\n        future_dict[future] = cell\n\n    for future in as_completed(future_dict):\n        cell = future_dict[future]\n        # print(f'{cell} finished.')\n        domain_size.append(future.result())\n        cell_list.append(cell)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/02.count",
        "ref_id": "domain-count-and-size",
        "headings": [
          "Domain count and size"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "domain_size = pd.Series(domain_size, index=cell_list)\nmetadata['domain_coverage'] = domain_size.copy()\nmetadata.loc[sc_border.obs.index, 'domain_count'] = sc_border.raw.X.sum(axis=1).A1 / 2\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/02.count",
        "ref_id": "domain-count-and-size",
        "headings": [
          "Domain count and size"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "# sc_border.X.data = np.ones(sc_border.X.data.shape)\nmetadata.loc[sc_border.obs.index, 'boundary_count'] = sc_border.raw.X.getnnz(axis=1)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/02.count",
        "ref_id": "domain-count-and-size",
        "headings": [
          "Domain count and size"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "metadata['domain_size'] = metadata['domain_coverage'] / metadata['domain_count']",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/02.count",
        "ref_id": "domain-count-and-size",
        "headings": [
          "Domain count and size"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "legnonn = ['ASC', 'ODC', 'OPC', 'MGC', 'PC', 'EC', 'VLMC']\nprint(np.median(metadata.loc[~metadata['MajorType'].isin(legnonn), 'domain_count']), \n      np.median(metadata.loc[metadata['MajorType'].isin(legnonn), 'domain_count']))\n      ",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/02.count",
        "ref_id": "domain-count-and-size",
        "headings": [
          "Domain count and size"
        ]
      },
      "doc_lineno": 130002
    },
    {
      "source": "ranksums(metadata.loc[~metadata['MajorType'].isin(legnonn), 'domain_count'], \n         metadata.loc[metadata['MajorType'].isin(legnonn), 'domain_count'])\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/02.count",
        "ref_id": "domain-count-and-size",
        "headings": [
          "Domain count and size"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "fig, axes = plt.subplots(3, 1, figsize=(6,7), sharex='all', dpi=300)\nax = axes[0]\nsns.boxplot(data=metadata, x='MajorType', y='domain_count', order=leg, showfliers=False, palette=ctdict, ax=ax)\nax = axes[1]\nsns.boxplot(data=metadata, x='MajorType', y='domain_size', order=leg, showfliers=False, palette=ctdict, ax=ax)\nax = axes[2]\nsns.boxplot(data=metadata, x='MajorType', y='domain_coverage', order=leg, showfliers=False, palette=ctdict, ax=ax)\nax.set_xticklabels(legname, rotation=90)\nplt.tight_layout()\n# plt.savefig(f'cell_{sc_border.shape[0]}_majortype_domain_boxplot.pdf', transparent=True, dpi=300)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/02.count",
        "ref_id": "domain-count-and-size",
        "headings": [
          "Domain count and size"
        ]
      },
      "doc_lineno": 150002
    },
    {
      "source": "adata = anndata.read_h5ad('/home/jzhou_salk_edu/sky_workdir/hba/rna_majortype/cell_29000_rna.h5ad')\nadata",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/02.count",
        "ref_id": "domain-count-and-size",
        "headings": [
          "Domain count and size"
        ]
      },
      "doc_lineno": 170002
    },
    {
      "source": "tmp = adata.obs.groupby('MajorType')['TotalUMI']\ndata = pd.DataFrame([tmp.mean(), tmp.std() / np.sqrt(tmp.count())], \n                    index=['TotalUMI_mean', 'TotalUMI_sem']).T\ntmp = metadata.groupby('MajorType')['domain_count']\ndata['domain_count_mean'] = tmp.mean()\ndata['domain_count_sem'] = tmp.std() / np.sqrt(tmp.count())\ntmp = metadata.groupby('MajorType')['domain_size']\ndata['domain_size_mean'] = tmp.mean()\ndata['domain_size_sem'] = tmp.std() / np.sqrt(tmp.count())\ndata['color'] = data.index.map(ctdict)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/02.count",
        "ref_id": "domain-count-and-size",
        "headings": [
          "Domain count and size"
        ]
      },
      "doc_lineno": 180002
    },
    {
      "source": "print(pearsonr(data['TotalUMI_mean'], data['domain_count_mean']))\nprint(pearsonr(data['TotalUMI_mean'], data['domain_size_mean']))\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/02.count",
        "ref_id": "domain-count-and-size",
        "headings": [
          "Domain count and size"
        ]
      },
      "doc_lineno": 190002
    },
    {
      "source": "from scipy.stats import pearsonr\nfig, axes = plt.subplots(2, 1, figsize=(3,6), dpi=300, sharex='all')\nax = axes[0]\nax.scatter(data['TotalUMI_mean'], data['domain_count_mean'], c=data['color'], edgecolor='none')\n# ax.errorbar(x=data['TotalUMI_mean'], y=data['domain_count_mean'], \n#             xerr=data['TotalUMI_sem'], yerr=data['domain_count_sem'], \n#             fmt='none', ecolor='k')\nax.set_xlabel('Average Total UMI')\nax.set_ylabel('Average Domain Count')\n\nax = axes[1]\nax.scatter(data['TotalUMI_mean'], data['domain_size_mean'], c=data['color'], edgecolor='none')\n# ax.errorbar(x=data['TotalUMI_mean'], y=data['domain_size_mean'], \n#             xerr=data['TotalUMI_sem'], yerr=data['domain_size_sem'], \n#             fmt='none', ecolor='k')\nax.set_xlabel('Average Total UMI')\nax.set_ylabel('Average Domain Size')\n\n# plt.savefig('UMIvsDomain.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/02.count",
        "ref_id": "domain-count-and-size",
        "headings": [
          "Domain count and size"
        ]
      },
      "doc_lineno": 200002
    },
    {
      "source": "decay = pd.concat([pd.read_hdf(xx, key='data') for xx in glob(f'{outdir}../decay/cell_*_decay.hdf5')], axis=0)\ndecay = decay.loc[decay.index & metadata.index]\n# metadata['short'] = decay.loc[:, (decay.columns > 50) & (decay.columns < 77)].sum(axis=1)\nmetadata['short'] = decay.loc[:, (decay.columns < 87)].sum(axis=1)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/02.count",
        "ref_id": "domain-count-and-size",
        "headings": [
          "Domain count and size"
        ]
      },
      "doc_lineno": 220002
    },
    {
      "source": "metadata['Neuron'] = metadata['MajorType'].isin(leg[:22])\nmetadata['Neuron'].value_counts()",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/02.count",
        "ref_id": "domain-count-and-size",
        "headings": [
          "Domain count and size"
        ]
      },
      "doc_lineno": 230002
    },
    {
      "source": "print(np.percentile(metadata.loc[metadata['Neuron'], 'short'], 5), np.percentile(metadata.loc[~metadata['Neuron'], 'short'], 5))\nprint(np.percentile(metadata.loc[metadata['Neuron'], 'short'], 95), np.percentile(metadata.loc[~metadata['Neuron'], 'short'], 95))",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/02.count",
        "ref_id": "domain-count-and-size",
        "headings": [
          "Domain count and size"
        ]
      },
      "doc_lineno": 240002
    },
    {
      "source": "dsmeta = []\nfor i in range(100):\n    ll = 100000 + 1000 * i\n    rr = 100000 + 1000 * (i+1)\n    data = metadata[(metadata['short']>=ll) & (metadata['short']<rr)]\n    # n = data.groupby('MajorType')['short'].count().min()\n    n = 1\n    dsmeta.append(data.groupby('MajorType').sample(n=n))\n    ",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/02.count",
        "ref_id": "domain-count-and-size",
        "headings": [
          "Domain count and size"
        ]
      },
      "doc_lineno": 250002
    },
    {
      "source": "dsmeta = pd.concat(dsmeta, axis=0)",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/02.count",
        "ref_id": "domain-count-and-size",
        "headings": [
          "Domain count and size"
        ]
      },
      "doc_lineno": 260002
    },
    {
      "source": "fig, ax = plt.subplots(figsize=(6,3), sharex='all', dpi=300)\nsns.boxplot(data=dsmeta, x='MajorType', y='domain_count', order=leg, showfliers=False, palette=ctdict, ax=ax)\nax.set_xticklabels(legname, rotation=90)\nplt.tight_layout()\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/02.count",
        "ref_id": "domain-count-and-size",
        "headings": [
          "Domain count and size"
        ]
      },
      "doc_lineno": 270002
    },
    {
      "source": "sns.histplot(data=dsmeta, x='short', hue='Neuron', bins=100)",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/02.count",
        "ref_id": "domain-count-and-size",
        "headings": [
          "Domain count and size"
        ]
      },
      "doc_lineno": 280002
    },
    {
      "source": "fig, axes = plt.subplots(3, 1, figsize=(6,7), sharex='all', dpi=300)\nax = axes[0]\nsns.boxplot(data=dsmeta, x='MajorType', y='domain_count', order=leg, showfliers=False, palette=ctdict, ax=ax)\nax = axes[1]\nsns.boxplot(data=dsmeta, x='MajorType', y='domain_size', order=leg, showfliers=False, palette=ctdict, ax=ax)\nax = axes[2]\nsns.boxplot(data=dsmeta, x='MajorType', y='domain_coverage', order=leg, showfliers=False, palette=ctdict, ax=ax)\nax.set_xticklabels(legname, rotation=90)\nplt.tight_layout()\n# plt.savefig(f'cell_{dsmeta.shape[0]}_dowmsample_majortype_domain_boxplot.pdf', transparent=True, dpi=300)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/02.count",
        "ref_id": "domain-count-and-size",
        "headings": [
          "Domain count and size"
        ]
      },
      "doc_lineno": 290002
    },
    {
      "source": "ranksums(dsmeta.loc[dsmeta['Neuron'], 'domain_count'], dsmeta.loc[~dsmeta['Neuron'], 'domain_count'])",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/02.count",
        "ref_id": "domain-count-and-size",
        "headings": [
          "Domain count and size"
        ]
      },
      "doc_lineno": 300002
    },
    {
      "source": "tmp = adata.obs.groupby('MajorType')['TotalUMI']\ndata = pd.DataFrame([tmp.mean(), tmp.std() / np.sqrt(tmp.count())], \n                    index=['TotalUMI_mean', 'TotalUMI_sem']).T\ntmp = dsmeta.groupby('MajorType')['domain_count']\ndata['domain_count_mean'] = tmp.mean()\ndata['domain_count_sem'] = tmp.std() / np.sqrt(tmp.count())\ntmp = dsmeta.groupby('MajorType')['domain_size']\ndata['domain_size_mean'] = tmp.mean()\ndata['domain_size_sem'] = tmp.std() / np.sqrt(tmp.count())\ndata['color'] = data.index.map(ctdict)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/02.count",
        "ref_id": "domain-count-and-size",
        "headings": [
          "Domain count and size"
        ]
      },
      "doc_lineno": 310002
    },
    {
      "source": "print(pearsonr(data['TotalUMI_mean'], data['domain_count_mean']))\nprint(pearsonr(data['TotalUMI_mean'], data['domain_size_mean']))\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/02.count",
        "ref_id": "domain-count-and-size",
        "headings": [
          "Domain count and size"
        ]
      },
      "doc_lineno": 320002
    },
    {
      "source": "from scipy.stats import pearsonr\nfig, axes = plt.subplots(2, 1, figsize=(3,6), dpi=300, sharex='all')\nax = axes[0]\nax.scatter(data['TotalUMI_mean'], data['domain_count_mean'], c=data['color'], edgecolor='none')\n# ax.errorbar(x=data['TotalUMI_mean'], y=data['domain_count_mean'], \n#             xerr=data['TotalUMI_sem'], yerr=data['domain_count_sem'], \n#             fmt='none', ecolor='k')\nax.set_xlabel('Average Total UMI')\nax.set_ylabel('Average Domain Count')\n\nax = axes[1]\nax.scatter(data['TotalUMI_mean'], data['domain_size_mean'], c=data['color'], edgecolor='none')\n# ax.errorbar(x=data['TotalUMI_mean'], y=data['domain_size_mean'], \n#             xerr=data['TotalUMI_sem'], yerr=data['domain_size_sem'], \n#             fmt='none', ecolor='k')\nax.set_xlabel('Average Total UMI')\nax.set_ylabel('Average Domain Size')\n\n# plt.savefig('UMIvsDomain.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/02.count",
        "ref_id": "domain-count-and-size",
        "headings": [
          "Domain count and size"
        ]
      },
      "doc_lineno": 330002
    }
  ],
  "hba/domain_majortype/03.diff": [
    {
      "source": "import numpy as np\nimport pandas as pd\nimport cooler\nfrom scipy.signal import find_peaks\nfrom scipy.stats import norm\nimport xarray as xr\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/03.diff",
        "ref_id": "differential-boundary",
        "headings": [
          "Differential boundary"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "leg = ['L23_IT', 'L4_IT', 'L5_IT', 'L6_IT', 'L6_IT_Car3', 'L56_NP', 'L6_CT', 'L6b', 'L5_ET', 'Amy', \n       'Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb_ChC', 'Sst', 'CHD7', \n       'MSN_D1', 'MSN_D2', 'Foxp2', 'SubCtx', \n       'ASC', 'ODC', 'OPC', 'MGC', 'PC', 'EC', 'VLMC'\n      ]\nlegname = ['L2/3-IT', 'L4-IT', 'L5-IT', 'L6-IT', 'L6-IT-Car3', 'L5/6-NP', 'L6-CT', 'L6b', 'L5-ET', 'Amy-Exc', \n       'Lamp5', 'Lamp5-Lhx6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb-ChC', 'Sst', 'Chd7', \n       'MSN-D1', 'MSN-D2', 'Foxp2', 'SubCtx-Cplx', \n       'ASC', 'ODC', 'OPC', 'MGC', 'PC', 'EC', 'VLMC'\n      ]\nleg2name = {xx:yy for xx,yy in zip(leg, legname)}\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/03.diff",
        "ref_id": "differential-boundary",
        "headings": [
          "Differential boundary"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "leg = {'exc': ['L23_IT', 'L4_IT', 'L5_IT', 'L6_IT', 'L6_IT_Car3', 'L56_NP', 'L6_CT', 'L6b', 'Amy'], \n       'inh': ['Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb_ChC', 'Sst', 'CHD7'], \n       'msn': ['MSN_D1', 'MSN_D2', 'Foxp2'], \n       'sub': ['SubCtx'], \n       'glia': ['ASC', 'ODC', 'OPC'], \n       'mgc': ['MGC'], \n       'smc': ['PC'], \n       'endo': ['EC'], \n       'fibro': ['VLMC'],\n      }\nleg['neu'] = leg['exc'] + leg['inh'] + leg['msn'] + leg['sub']\nleg['all'] = leg['neu'] + leg['glia'] + leg['mgc'] + leg['smc'] + leg['endo'] + leg['fibro']\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/03.diff",
        "ref_id": "differential-boundary",
        "headings": [
          "Differential boundary"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "group_name = 'neu'",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/03.diff",
        "ref_id": "differential-boundary",
        "headings": [
          "Differential boundary"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "leg = pd.Index(leg[group_name])\nlegname = leg.map(leg2name)\nres = 25000",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/03.diff",
        "ref_id": "differential-boundary",
        "headings": [
          "Differential boundary"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "indir = '/data/hba/domain_majortype/'\noutdir = f'/home/jzhou_salk_edu/sky_workdir/hba/domain_majortype/diff/{group_name}/'\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/03.diff",
        "ref_id": "differential-boundary",
        "headings": [
          "Differential boundary"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "chrom_size_path = '/home/jzhou_salk_edu/sky_workdir/hba/ref/hg38.main.chrom.sizes'\nchrom_sizes = cooler.read_chromsizes(chrom_size_path, all_names=True)\nchrom_sizes = chrom_sizes.iloc[:-3]\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/03.diff",
        "ref_id": "differential-boundary",
        "headings": [
          "Differential boundary"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "from statsmodels.sandbox.stats.multicomp import multipletests as FDR\nfrom scipy.stats import chi2_contingency\n\ndef diff_bound(bound_count_ct, cell_count_ct):\n    tmp = cell_count_ct[:,None] - bound_count_ct\n    stats = np.zeros(bound_count_ct.shape[1])\n    pv = np.ones(bound_count_ct.shape[1])\n    binfilter = np.logical_and(bound_count_ct.sum(axis=0)>0, tmp.sum(axis=0)>0)\n    for i in range(bound_count_ct.shape[1]):\n        if binfilter[i]:\n            contig = [bound_count_ct[:,i], tmp[:,i]]\n            stats[i], pv[i], _, _ = chi2_contingency(contig)\n    fdr = FDR(pv, 0.01, 'fdr_bh')[1]\n    return stats, pv\n\ndef shuffle_ct(i):\n    global cell_count_ct, sc_border, leg\n    np.random.seed(i)\n    label = np.random.permutation(sc_border.obs[f'{ct_key}'])\n    bound_count_ct = np.array([sc_border.X[label==xx].getnnz(axis=0) for xx in leg])\n    bound_prob_ct = bound_count_ct / cell_count_ct[:,None]\n    return diff_bound(bound_count_ct, cell_count_ct)[0]\n\ndef diff_bound_bulk(ins_count):\n    stats = np.zeros(ins_count.shape[2])\n    pv = np.ones(ins_count.shape[2])\n    binfilter = (ins_count.min(axis=(0,1))>0)\n    for i in range(ins_count.shape[2]):\n        if binfilter[i]:\n            stats[i], pv[i], _, _ = chi2_contingency(ins_count[:,:,i])\n    fdr = FDR(pv, 0.01, 'fdr_bh')[1]\n    return stats, pv\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/03.diff",
        "ref_id": "naive-differential-boundary-sc",
        "headings": [
          "naive differential boundary sc"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "bound_count_ct = pd.read_hdf(f'{indir}MajorType_boundcount.hdf', key='data').loc[leg]\ncell_count_ct = pd.read_csv(f'{indir}MajorType_cellcount.csv.gz', index_col=0, header=0, squeeze=True).loc[leg]\nbound_prob_ct = (bound_count_ct / cell_count_ct[:,None]).T\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/03.diff",
        "ref_id": "naive-differential-boundary-sc",
        "headings": [
          "naive differential boundary sc"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "ins_count = xr.open_dataset(f'{indir}MajorType_impute.insulation.nc')\nins_count = ins_count.sel({'bin': (ins_count['bin_chrom']!='chrX')})\nins_count['ratio'] = (ins_count.sel({'type':'inter'})['__xarray_dataarray_variable__'] / ins_count.sel({'type':'intra'}))['__xarray_dataarray_variable__']\nins_count",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/03.diff",
        "ref_id": "naive-differential-boundary-sc",
        "headings": [
          "naive differential boundary sc"
        ]
      },
      "doc_lineno": 130002
    },
    {
      "source": "ins = ins_count['ratio'].to_pandas().loc[leg]\nins.shape",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/03.diff",
        "ref_id": "naive-differential-boundary-sc",
        "headings": [
          "naive differential boundary sc"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "binall = ins_count[['bin_chrom', 'bin_start', 'bin_end']].to_pandas()\nbinall.columns = binall.columns.str.split('_').str[1]\nbinall.index = binall['chrom'] + '_' + (binall['start'] // res).astype(str)",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/03.diff",
        "ref_id": "naive-differential-boundary-sc",
        "headings": [
          "naive differential boundary sc"
        ]
      },
      "doc_lineno": 150002
    },
    {
      "source": "bkl = pd.read_csv(f'{indir}../loop_majortype/M1C.rowsumpb1000.blf50.merged.bed', sep='\\t', header=None, index_col=None)\nbinall['bklfilter'] = True\nfor c in chrom_sizes.index:\n    chrfilter = (binall['chrom']==c)\n    tmp = binall.loc[chrfilter.values]\n    tmp.iloc[:10, -1] = False\n    tmp.iloc[-10:, -1] = False\n    for xx,yy in bkl.loc[bkl[0]==c, [1,2]].values // res:\n        tmp.iloc[max([0,xx-2]):(yy+2), -1] = False\n    binall.loc[chrfilter] = tmp.copy()\n\nprint(binall['bklfilter'].sum())\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/03.diff",
        "ref_id": "naive-differential-boundary-sc",
        "headings": [
          "naive differential boundary sc"
        ]
      },
      "doc_lineno": 160002
    },
    {
      "source": "chi2sc, fdr_sc = diff_bound(bound_count_ct.values, cell_count_ct.values)\nave = np.mean(chi2sc[chi2sc>0])\nstdev = np.std(chi2sc[chi2sc>0])\nbinall['chi2filter'] = (((chi2sc - ave) / stdev)>norm.isf(0.025))\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/03.diff",
        "ref_id": "naive-differential-boundary-sc",
        "headings": [
          "naive differential boundary sc"
        ]
      },
      "doc_lineno": 170002
    },
    {
      "source": "binall['ins_lm'] = 0\nfor xx in leg:\n    sel = []\n    for c in chrom_sizes.index:\n        idx = np.where(binall['chrom']==c)[0]\n        if len(idx)>0:\n            data = -ins.loc[xx, idx]\n            peaks, _ = find_peaks(data, distance=5)\n            sel.append(idx.min() + peaks)\n    sel = np.concatenate(sel)\n    binall.loc[binall.index[sel], 'ins_lm'] = 1\n\nbinall['probdiff'] = (bound_prob_ct.max(axis=1) - bound_prob_ct.min(axis=1)).values\nbinall['chi2_sc'] = chi2sc.copy()\nbinall['insfc'] = (ins.max(axis=0)+0.01 / ins.min(axis=0)+0.01).values\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/03.diff",
        "ref_id": "naive-differential-boundary-sc",
        "headings": [
          "naive differential boundary sc"
        ]
      },
      "doc_lineno": 180002
    },
    {
      "source": "sel = []\nthres = np.min(chi2sc[fdr_sc<1e-3])\nfor c in chrom_sizes.index:\n    idx = np.where(binall['chrom']==c)[0]\n    if len(idx)>0:\n        data = chi2sc[idx]\n        peaks, _ = find_peaks(data, height=thres, distance=5)\n        sel.append(idx.min() + peaks)\n        \nsel = np.concatenate(sel)\n\nbinall['diff_sc'] = 0\nbinall.loc[binall.index[sel], 'diff_sc'] = 1\nbinall.loc[:, binall.dtypes=='category'] = binall.loc[:, binall.dtypes=='category'].astype(str)\nbinall.to_hdf(f'{outdir}bin_stats.hdf', key='data')\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/03.diff",
        "ref_id": "naive-differential-boundary-sc",
        "headings": [
          "naive differential boundary sc"
        ]
      },
      "doc_lineno": 190002
    },
    {
      "source": "print((binall['chi2filter'] \n       & binall['diff_sc'] \n       & binall['bklfilter'] \n       & binall['ins_lm'] \n       & (binall['probdiff']>0.05) \n       #& (binall['insfc']>1.2)\n      ).sum())",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/03.diff",
        "ref_id": "naive-differential-boundary-sc",
        "headings": [
          "naive differential boundary sc"
        ]
      },
      "doc_lineno": 200002
    }
  ],
  "hba/domain_majortype/04.corr": [
    {
      "source": "import numpy as np\nimport pandas as pd\nfrom scipy.stats import pearsonr\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Polygon\nfrom matplotlib import cm as cm\nimport seaborn as sns\nfrom matplotlib.colors import LogNorm\n\nfrom ALLCools.mcds import MCDS\nfrom ALLCools.mcds.utilities import calculate_posterior_mc_frac\n\nmpl.style.use('default')\nmpl.rcParams['pdf.fonttype'] = 42\nmpl.rcParams['ps.fonttype'] = 42\nmpl.rcParams['font.family'] = 'sans-serif'\nmpl.rcParams['font.sans-serif'] = 'Helvetica'\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "correlation-between-boundary-and-other-modalities",
        "headings": [
          "Correlation between boundary and other modalities"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "leg = ['L23_IT', 'L4_IT', 'L5_IT', 'L6_IT', 'L6_IT_Car3', 'L56_NP', 'L6_CT', 'L6b', 'L5_ET', 'Amy', \n       'Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb_ChC', 'Sst', 'CHD7', \n       'MSN_D1', 'MSN_D2', 'Foxp2', 'SubCtx', \n       'ASC', 'ODC', 'OPC', 'MGC', 'PC', 'EC', 'VLMC'\n      ]\nlegname = ['L2/3-IT', 'L4-IT', 'L5-IT', 'L6-IT', 'L6-IT-Car3', 'L5/6-NP', 'L6-CT', 'L6b', 'L5-ET', 'Amy-Exc', \n       'Lamp5', 'Lamp5-Lhx6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb-ChC', 'Sst', 'Chd7', \n       'MSN-D1', 'MSN-D2', 'Foxp2', 'SubCtx-Cplx', \n       'ASC', 'ODC', 'OPC', 'MGC', 'PC', 'EC', 'VLMC'\n      ]\nleg2name = {xx:yy for xx,yy in zip(leg, legname)}\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "correlation-between-boundary-and-other-modalities",
        "headings": [
          "Correlation between boundary and other modalities"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "leg = {'exc': ['L23_IT', 'L4_IT', 'L5_IT', 'L6_IT', 'L6_IT_Car3', 'L56_NP', 'L6_CT', 'L6b', 'Amy'], \n       'inh': ['Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb_ChC', 'Sst', 'CHD7'], \n       'msn': ['MSN_D1', 'MSN_D2', 'Foxp2'], \n       'sub': ['SubCtx'], \n       'glia': ['ASC', 'ODC', 'OPC'], \n       'mgc': ['MGC'], \n       'smc': ['PC'], \n       'endo': ['EC'], \n       'fibro': ['VLMC'],\n      }\nleg['neu'] = leg['exc'] + leg['inh'] + leg['msn'] + leg['sub']\nleg['all'] = leg['neu'] + leg['glia'] + leg['mgc'] + leg['smc'] + leg['endo'] + leg['fibro']\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "correlation-between-boundary-and-other-modalities",
        "headings": [
          "Correlation between boundary and other modalities"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "group_name = 'neu'",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "correlation-between-boundary-and-other-modalities",
        "headings": [
          "Correlation between boundary and other modalities"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "leg = pd.Index(leg[group_name])\nlegname = leg.map(leg2name)\nres = 25000",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "correlation-between-boundary-and-other-modalities",
        "headings": [
          "Correlation between boundary and other modalities"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "indir = '/data/hba/domain_majortype/'\noutdir = f'/home/jzhou_salk_edu/sky_workdir/hba/domain_majortype/diff/{group_name}/'\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "correlation-between-boundary-and-other-modalities",
        "headings": [
          "Correlation between boundary and other modalities"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "binall = pd.read_hdf(f'{outdir}bin_stats.hdf', key='data')\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "correlation-between-boundary-and-other-modalities",
        "headings": [
          "Correlation between boundary and other modalities"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "mcds = MCDS.open('/data/hba/mc_majortype/MajorType.mcds', var_dim='chrom5k')\nmcds['chrom10k_even'] = mcds['chrom5k_chrom'].to_pandas().astype(str) + '_' + (mcds['chrom5k_start'] // 10000 * 2).to_pandas().astype(str)\nmcds['chrom10k_odd'] = mcds['chrom5k_chrom'].to_pandas().astype(str) + '_' + ((mcds['chrom5k_start'] + 5000) // 10000 * 2 - 1).to_pandas().astype(str)\nmcds\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "correlation-between-boundary-and-other-modalities",
        "headings": [
          "Correlation between boundary and other modalities"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "boundcg = pd.DataFrame(index=binall.index, columns=leg)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "mcg",
        "headings": [
          "Correlation between boundary and other modalities",
          "mCG"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "mc = mcds['chrom5k_da'].sel(count_type='mc', mc_type='CGN').to_pandas().T\nmc['chrom10k'] = mcds['chrom10k_odd'].to_pandas()\nmc = mc.groupby('chrom10k').sum().T\ncov = mcds['chrom5k_da'].sel(count_type='cov', mc_type='CGN').to_pandas().T\ncov['chrom10k'] = mcds['chrom10k_odd'].to_pandas()\ncov = cov.groupby('chrom10k').sum().T\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "mcg",
        "headings": [
          "Correlation between boundary and other modalities",
          "mCG"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "binfilter = ['_'.join(xx.split('_')[:-1]) for xx in mc.columns]\nbinfilter = [(len(xx)<6) and (xx not in ['chrM','chrX','chrY']) for xx in binfilter]\nprint(np.sum(binfilter))\nmc = mc.loc[leg, binfilter]\ncov = cov.loc[leg, binfilter]\nprint(mc.shape, cov.shape)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "mcg",
        "headings": [
          "Correlation between boundary and other modalities",
          "mCG"
        ]
      },
      "doc_lineno": 130002
    },
    {
      "source": "ratio = calculate_posterior_mc_frac(mc.values, cov.values)\nratio = pd.DataFrame(ratio, index=leg, columns=mc.columns)\nratio\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "mcg",
        "headings": [
          "Correlation between boundary and other modalities",
          "mCG"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "idx1 = binall['chrom'].astype(str) + '_' + (binall['start'] // 5000 - 2).astype(str)\nidx2 = binall['chrom'].astype(str) + '_' + (binall['start'] // 5000).astype(str)\nselb = (binall['start']%10000!=0)#  & idx1.isin(ratio.columns)\nboundcg.loc[selb] = (ratio.loc[:, idx1[selb]].values + ratio.loc[:, idx2[selb]].values).T / 2\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "mcg",
        "headings": [
          "Correlation between boundary and other modalities",
          "mCG"
        ]
      },
      "doc_lineno": 150002
    },
    {
      "source": "mc = mcds['chrom5k_da'].sel(count_type='mc', mc_type='CGN').to_pandas().T\nmc['chrom10k'] = mcds['chrom10k_even'].to_pandas()\nmc = mc.groupby('chrom10k').sum().T\ncov = mcds['chrom5k_da'].sel(count_type='cov', mc_type='CGN').to_pandas().T\ncov['chrom10k'] = mcds['chrom10k_even'].to_pandas()\ncov = cov.groupby('chrom10k').sum().T\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "mcg",
        "headings": [
          "Correlation between boundary and other modalities",
          "mCG"
        ]
      },
      "doc_lineno": 160002
    },
    {
      "source": "binfilter = ['_'.join(xx.split('_')[:-1]) for xx in mc.columns]\nbinfilter = [(len(xx)<6) and (xx not in ['chrM','chrX','chrY']) for xx in binfilter]\nprint(np.sum(binfilter))\nmc = mc.loc[leg, binfilter]\ncov = cov.loc[leg, binfilter]\nprint(mc.shape, cov.shape)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "mcg",
        "headings": [
          "Correlation between boundary and other modalities",
          "mCG"
        ]
      },
      "doc_lineno": 170002
    },
    {
      "source": "ratio = calculate_posterior_mc_frac(mc.values, cov.values)\nratio = pd.DataFrame(ratio, index=leg, columns=mc.columns)\nratio\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "mcg",
        "headings": [
          "Correlation between boundary and other modalities",
          "mCG"
        ]
      },
      "doc_lineno": 180002
    },
    {
      "source": "idx1 = binall['chrom'].astype(str) + '_' + (binall['start'] // 5000 - 2).astype(str)\nidx2 = binall['chrom'].astype(str) + '_' + (binall['start'] // 5000).astype(str)\nselb = (binall['start']%10000==0) & idx1.isin(ratio.columns)\nboundcg.loc[selb] = (ratio.loc[:, idx1[selb]].values + ratio.loc[:, idx2[selb]].values).T / 2\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "mcg",
        "headings": [
          "Correlation between boundary and other modalities",
          "mCG"
        ]
      },
      "doc_lineno": 190002
    },
    {
      "source": "boundch = pd.DataFrame(index=binall.index, columns=leg)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "mch",
        "headings": [
          "Correlation between boundary and other modalities",
          "mCH"
        ]
      },
      "doc_lineno": 210002
    },
    {
      "source": "mc = mcds['chrom5k_da'].sel(count_type='mc', mc_type='CHN').to_pandas().T\nmc['chrom10k'] = mcds['chrom10k_odd'].to_pandas()\nmc = mc.groupby('chrom10k').sum().T\ncov = mcds['chrom5k_da'].sel(count_type='cov', mc_type='CHN').to_pandas().T\ncov['chrom10k'] = mcds['chrom10k_odd'].to_pandas()\ncov = cov.groupby('chrom10k').sum().T\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "mch",
        "headings": [
          "Correlation between boundary and other modalities",
          "mCH"
        ]
      },
      "doc_lineno": 220002
    },
    {
      "source": "binfilter = ['_'.join(xx.split('_')[:-1]) for xx in mc.columns]\nbinfilter = [(len(xx)<6) and (xx not in ['chrM','chrX','chrY']) for xx in binfilter]\nprint(np.sum(binfilter))\nmc = mc.loc[leg, binfilter]\ncov = cov.loc[leg, binfilter]\nprint(mc.shape, cov.shape)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "mch",
        "headings": [
          "Correlation between boundary and other modalities",
          "mCH"
        ]
      },
      "doc_lineno": 230002
    },
    {
      "source": "ratio = calculate_posterior_mc_frac(mc.values, cov.values)\nratio = pd.DataFrame(ratio, index=leg, columns=mc.columns)\nratio\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "mch",
        "headings": [
          "Correlation between boundary and other modalities",
          "mCH"
        ]
      },
      "doc_lineno": 240002
    },
    {
      "source": "idx1 = binall['chrom'].astype(str) + '_' + (binall['start'] // 5000 - 2).astype(str)\nidx2 = binall['chrom'].astype(str) + '_' + (binall['start'] // 5000).astype(str)\nselb = (binall['start']%10000!=0)# & idx1.isin(ratio.columns)\nboundch.loc[selb] = (ratio.loc[:, idx1[selb]].values + ratio.loc[:, idx2[selb]].values).T / 2\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "mch",
        "headings": [
          "Correlation between boundary and other modalities",
          "mCH"
        ]
      },
      "doc_lineno": 250002
    },
    {
      "source": "mc = mcds['chrom5k_da'].sel(count_type='mc', mc_type='CHN').to_pandas().T\nmc['chrom10k'] = mcds['chrom10k_even'].to_pandas()\nmc = mc.groupby('chrom10k').sum().T\ncov = mcds['chrom5k_da'].sel(count_type='cov', mc_type='CHN').to_pandas().T\ncov['chrom10k'] = mcds['chrom10k_even'].to_pandas()\ncov = cov.groupby('chrom10k').sum().T\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "mch",
        "headings": [
          "Correlation between boundary and other modalities",
          "mCH"
        ]
      },
      "doc_lineno": 260002
    },
    {
      "source": "binfilter = ['_'.join(xx.split('_')[:-1]) for xx in mc.columns]\nbinfilter = [(len(xx)<6) and (xx not in ['chrM','chrX','chrY']) for xx in binfilter]\nprint(np.sum(binfilter))\nmc = mc.loc[leg, binfilter]\ncov = cov.loc[leg, binfilter]\nprint(mc.shape, cov.shape)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "mch",
        "headings": [
          "Correlation between boundary and other modalities",
          "mCH"
        ]
      },
      "doc_lineno": 270002
    },
    {
      "source": "ratio = calculate_posterior_mc_frac(mc.values, cov.values)\nratio = pd.DataFrame(ratio, index=leg, columns=mc.columns)\nratio\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "mch",
        "headings": [
          "Correlation between boundary and other modalities",
          "mCH"
        ]
      },
      "doc_lineno": 280002
    },
    {
      "source": "idx1 = binall['chrom'].astype(str) + '_' + (binall['start'] // 5000 - 2).astype(str)\nidx2 = binall['chrom'].astype(str) + '_' + (binall['start'] // 5000).astype(str)\nselb = (binall['start']%10000==0) & idx1.isin(ratio.columns)\nboundch.loc[selb] = (ratio.loc[:, idx1[selb]].values + ratio.loc[:, idx2[selb]].values).T / 2\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "mch",
        "headings": [
          "Correlation between boundary and other modalities",
          "mCH"
        ]
      },
      "doc_lineno": 290002
    },
    {
      "source": "sig = pd.read_hdf('/home/jzhou_salk_edu/sky_workdir/hba/atac_majortype/cluster_atac_signal.hdf')\ncov = pd.read_hdf('/home/jzhou_salk_edu/sky_workdir/hba/atac_majortype/cluster_atac_cov.hdf')",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between boundary and other modalities",
          "ATAC"
        ]
      },
      "doc_lineno": 310002
    },
    {
      "source": "bins = pd.DataFrame(index=sig.columns)\nbins['chrom'] = bins.index.str.split('_').str[0]\nbins['start'] = (bins.index.str.split('_').str[1].astype(int) - 1) * 5000\nbins['chrom10k_even'] = bins['chrom'] + '_' + (bins['start'] // 10000 * 2).astype(str)\nbins['chrom10k_odd'] = bins['chrom'] + '_' + ((bins['start'] + 5000) // 10000 * 2 - 1).astype(str)",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between boundary and other modalities",
          "ATAC"
        ]
      },
      "doc_lineno": 320002
    },
    {
      "source": "sig = sig.groupby(by=bins['chrom10k_odd'], axis=1).sum()\ncov = cov.groupby(by=bins['chrom10k_odd']).sum()\natac = (sig/cov).fillna(0)",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between boundary and other modalities",
          "ATAC"
        ]
      },
      "doc_lineno": 330002
    },
    {
      "source": "legatac = leg[leg.isin(atac.index)]\natac = atac.loc[legatac].T\natac = atac / atac.sum(axis=0)",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between boundary and other modalities",
          "ATAC"
        ]
      },
      "doc_lineno": 340002
    },
    {
      "source": "boundatac = pd.DataFrame(index=binall.index, columns=legatac)\nidx1 = binall['chrom'].astype(str) + '_' + (binall['start'] // 5000 - 2).astype(str)\nidx2 = binall['chrom'].astype(str) + '_' + (binall['start'] // 5000).astype(str)\nselb = (binall['start']%10000!=0)# & idx1.isin(atac.index)\nboundatac.loc[selb] = (atac.loc[idx1[selb]].values + atac.loc[idx2[selb]].values) / 2\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between boundary and other modalities",
          "ATAC"
        ]
      },
      "doc_lineno": 350002
    },
    {
      "source": "sig = pd.read_hdf('/home/jzhou_salk_edu/sky_workdir/hba/atac_majortype/cluster_atac_signal.hdf')\ncov = pd.read_hdf('/home/jzhou_salk_edu/sky_workdir/hba/atac_majortype/cluster_atac_cov.hdf')",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between boundary and other modalities",
          "ATAC"
        ]
      },
      "doc_lineno": 360002
    },
    {
      "source": "sig = sig.groupby(by=bins['chrom10k_even'], axis=1).sum()\ncov = cov.groupby(by=bins['chrom10k_even']).sum()\natac = (sig/cov).fillna(0)",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between boundary and other modalities",
          "ATAC"
        ]
      },
      "doc_lineno": 370002
    },
    {
      "source": "legatac = leg[leg.isin(atac.index)]\natac = atac.loc[legatac].T\natac = atac / atac.sum(axis=0)",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between boundary and other modalities",
          "ATAC"
        ]
      },
      "doc_lineno": 380002
    },
    {
      "source": "idx1 = binall['chrom'].astype(str) + '_' + (binall['start'] // 5000 - 2).astype(str)\nidx2 = binall['chrom'].astype(str) + '_' + (binall['start'] // 5000).astype(str)\nselb = (binall['start']%10000==0) & idx1.isin(atac.index)\nboundatac.loc[selb] = (atac.loc[idx1[selb]].values + atac.loc[idx2[selb]].values) / 2\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between boundary and other modalities",
          "ATAC"
        ]
      },
      "doc_lineno": 390002
    },
    {
      "source": "boundcg.to_hdf(f'{outdir}bound_mCG.hdf', key='data')\nboundch.to_hdf(f'{outdir}bound_mCH.hdf', key='data')\nboundatac.to_hdf(f'{outdir}bound_ATAC.hdf', key='data')",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between boundary and other modalities",
          "ATAC"
        ]
      },
      "doc_lineno": 400002
    },
    {
      "source": "binfilter = (boundcg.isna().sum(axis=1)==0).values\nbinall.loc[~binfilter, ['mCG_corr', 'mCH_corr', 'ATAC_corr']] = 0\nbinall",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between boundary and other modalities",
          "ATAC"
        ]
      },
      "doc_lineno": 420002
    },
    {
      "source": "bound_count_ct = pd.read_hdf(f'{indir}MajorType_boundcount.hdf', key='data').loc[leg]\ncell_count_ct = pd.read_csv(f'{indir}MajorType_cellcount.csv.gz', index_col=0, header=0, squeeze=True).loc[leg]\nbound_prob_ct = (bound_count_ct / cell_count_ct[:,None]).T\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between boundary and other modalities",
          "ATAC"
        ]
      },
      "doc_lineno": 430002
    },
    {
      "source": "binall.loc[binfilter, 'mCG_corr'] = [pearsonr(xx, yy)[0] for xx,yy in zip(bound_prob_ct.values[binfilter], boundcg.values[binfilter])]\nbinall.loc[binfilter, 'mCH_corr'] = [pearsonr(xx, yy)[0] for xx,yy in zip(bound_prob_ct.values[binfilter], boundch.values[binfilter])]\nbinall.loc[binfilter, 'ATAC_corr'] = [pearsonr(xx, yy)[0] for xx,yy in zip(bound_prob_ct[legatac].values[binfilter], boundatac[legatac].values[binfilter])]\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between boundary and other modalities",
          "ATAC"
        ]
      },
      "doc_lineno": 440002
    },
    {
      "source": "binall.to_hdf(f'{outdir}bin_stats.hdf', key='data')",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between boundary and other modalities",
          "ATAC"
        ]
      },
      "doc_lineno": 450002
    },
    {
      "source": "fig, axes = plt.subplots(1, 2, figsize=(4,2), sharey='all', dpi=300)\nax = axes[0]\nsns.histplot(binall, x='mCG_corr', y='chi2_sc', bins=100, ax=ax, log_scale=(False, 10))\nax = axes[1]\nsns.histplot(binall, x='mCH_corr', y='chi2_sc', bins=100, ax=ax, log_scale=(False, 10))\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between boundary and other modalities",
          "ATAC"
        ]
      },
      "doc_lineno": 460002
    },
    {
      "source": "fig, axes = plt.subplots(1, 2, figsize=(4,2), sharey='all', dpi=300)\nax = axes[0]\nsns.histplot(binall, y='chi2_sc', x='probdiff', bins=100, ax=ax, log_scale=(False, False))\nax = axes[1]\nsns.histplot(binall, y='chi2_sc', x='insfc', bins=100, ax=ax, log_scale=(10, False))\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/04.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between boundary and other modalities",
          "ATAC"
        ]
      },
      "doc_lineno": 470002
    }
  ],
  "hba/domain_majortype/05.plot": [
    {
      "source": "import numpy as np\nimport pandas as pd\nfrom scipy.stats import pearsonr, zscore\nimport anndata\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Polygon\nfrom matplotlib import cm as cm\nimport seaborn as sns\nfrom matplotlib.colors import LogNorm\n\nmpl.style.use('default')\nmpl.rcParams['pdf.fonttype'] = 42\nmpl.rcParams['ps.fonttype'] = 42\nmpl.rcParams['font.family'] = 'sans-serif'\nmpl.rcParams['font.sans-serif'] = 'Helvetica'\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "plot-correlation-between-boundary-and-mc-atac-rna",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "leg = ['L23_IT', 'L4_IT', 'L5_IT', 'L6_IT', 'L6_IT_Car3', 'L56_NP', 'L6_CT', 'L6b', 'L5_ET', 'Amy', \n       'Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb_ChC', 'Sst', 'CHD7', \n       'MSN_D1', 'MSN_D2', 'Foxp2', 'SubCtx', \n       'ASC', 'ODC', 'OPC', 'MGC', 'PC', 'EC', 'VLMC'\n      ]\nlegname = ['L2/3-IT', 'L4-IT', 'L5-IT', 'L6-IT', 'L6-IT-Car3', 'L5/6-NP', 'L6-CT', 'L6b', 'L5-ET', 'Amy-Exc', \n       'Lamp5', 'Lamp5-Lhx6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb-ChC', 'Sst', 'Chd7', \n       'MSN-D1', 'MSN-D2', 'Foxp2', 'SubCtx-Cplx', \n       'ASC', 'ODC', 'OPC', 'MGC', 'PC', 'EC', 'VLMC'\n      ]\nleg2name = {xx:yy for xx,yy in zip(leg, legname)}\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "plot-correlation-between-boundary-and-mc-atac-rna",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "leg = {'exc': ['L23_IT', 'L4_IT', 'L5_IT', 'L6_IT', 'L6_IT_Car3', 'L56_NP', 'L6_CT', 'L6b', 'Amy'], \n       'inh': ['Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb_ChC', 'Sst', 'CHD7'], \n       'msn': ['MSN_D1', 'MSN_D2', 'Foxp2'], \n       'sub': ['SubCtx'], \n       'glia': ['ASC', 'ODC', 'OPC'], \n       'mgc': ['MGC'], \n       'smc': ['PC'], \n       'endo': ['EC'], \n       'fibro': ['VLMC'],\n      }\nleg['neu'] = leg['exc'] + leg['inh'] + leg['msn'] + leg['sub']\nleg['all'] = leg['neu'] + leg['glia'] + leg['mgc'] + leg['smc'] + leg['endo'] + leg['fibro']\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "plot-correlation-between-boundary-and-mc-atac-rna",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "group_name = 'neu'",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "plot-correlation-between-boundary-and-mc-atac-rna",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "leg = pd.Index(leg[group_name])\nlegname = leg.map(leg2name)\nres = 25000",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "plot-correlation-between-boundary-and-mc-atac-rna",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "indir = '/data/hba/domain_majortype/'\noutdir = f'/home/jzhou_salk_edu/sky_workdir/hba/domain_majortype/diff/{group_name}/'\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "plot-correlation-between-boundary-and-mc-atac-rna",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "boundcg = pd.read_hdf(f'{outdir}bound_mCG.hdf', key='data')\nboundch = pd.read_hdf(f'{outdir}bound_mCH.hdf', key='data')\nboundatac = pd.read_hdf(f'{outdir}bound_ATAC.hdf', key='data')",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "plot-correlation-between-boundary-and-mc-atac-rna",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "legatac = boundatac.columns",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "plot-correlation-between-boundary-and-mc-atac-rna",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "bound_count_ct = pd.read_hdf(f'{indir}MajorType_boundcount.hdf', key='data').loc[leg]\ncell_count_ct = pd.read_csv(f'{indir}MajorType_cellcount.csv.gz', index_col=0, header=0, squeeze=True).loc[leg]\nbound_prob_ct = (bound_count_ct / cell_count_ct[:,None]).T\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "plot-correlation-between-boundary-and-mc-atac-rna",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "binall = pd.read_hdf('bin_stats.hdf', key='data')\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "plot-correlation-between-boundary-and-mc-atac-rna",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "selb = (binall['chi2filter'] & binall['diff_sc'] & binall['bklfilter'] & binall['ins_lm'] & (binall['probdiff']>0.05))\nprint(sum(selb))",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "plot-correlation-between-boundary-and-mc-atac-rna",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 130002
    },
    {
      "source": "tmpcg = boundcg.astype(float).loc[selb].values\ntmpcg = zscore(tmpcg, axis=1)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "plot-correlation-between-boundary-and-mc-atac-rna",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "tmpch = boundch.astype(float).loc[selb].values\ntmpch = zscore(tmpch, axis=1)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "plot-correlation-between-boundary-and-mc-atac-rna",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 150002
    },
    {
      "source": "tmpatac = boundatac.astype(float).loc[selb].values\ntmpatac = zscore(tmpatac, axis=1)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "plot-correlation-between-boundary-and-mc-atac-rna",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 160002
    },
    {
      "source": "tmp3c = bound_prob_ct.loc[selb].values\ntmp3c = zscore(tmp3c, axis=1)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "plot-correlation-between-boundary-and-mc-atac-rna",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 170002
    },
    {
      "source": "cg = sns.clustermap(tmp3c, cmap='bwr', vmin=-3, vmax=3, metric='cosine', xticklabels=leg, yticklabels=[], figsize=(6,6))\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "plot-correlation-between-boundary-and-mc-atac-rna",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 180002
    },
    {
      "source": "rorder = cg.dendrogram_row.reordered_ind.copy()\ncorder = cg.dendrogram_col.reordered_ind.copy()",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "plot-correlation-between-boundary-and-mc-atac-rna",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 190002
    },
    {
      "source": "idxatac = np.arange(len(leg))[leg.isin(legatac)]\ncorderatac = [xx for xx in corder if xx in idxatac]",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "plot-correlation-between-boundary-and-mc-atac-rna",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 200002
    },
    {
      "source": "fig, axes = plt.subplots(1, 4, sharey='all', figsize=(12,5), dpi=300)\n\nax = axes[0]\nax.imshow(tmp3c[np.ix_(rorder, corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('Boundary Prob', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\nax.set_yticks([])\nax.set_ylabel(f'{tmp3c.shape[0]} Diff Boundary')\n\nax = axes[1]\nax.imshow(tmpatac[np.ix_(rorder, corderatac)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('ATAC', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(legatac)))\nax.set_xticklabels(legname[corderatac], rotation=90)\n\nax = axes[2]\nax.imshow(tmpcg[np.ix_(rorder, corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('mCG', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\n\nax = axes[3]\nax.imshow(tmpch[np.ix_(rorder, corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('mCH', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\n\n\nplt.tight_layout()\n# plt.savefig(f'majortype_{group_name}_diffbound_3C_Epi.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "plot-correlation-between-boundary-and-mc-atac-rna",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 210002
    },
    {
      "source": "fig, ax = plt.subplots(figsize=(2,2), dpi=300)\nsns.violinplot([binall.loc[selb, 'mCG_corr'], \n                binall.loc[selb, 'mCH_corr'], \n                binall.loc[selb, 'ATAC_corr']], ax=ax)\nax.set_xticklabels(['mCG', 'mCH', 'ATAC'])\nax.set_ylabel('PCC with Comp Score')\n# plt.savefig(f'majortype_{group_name}_diffbound_epicorr.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "plot-correlation-between-boundary-and-mc-atac-rna",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 220002
    },
    {
      "source": "print(binall.loc[selb, 'mCG_corr'].median(), \n      binall.loc[selb, 'mCH_corr'].median(),\n      binall.loc[selb, 'ATAC_corr'].median(),\n      selb.sum()\n     )",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "plot-correlation-between-boundary-and-mc-atac-rna",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 230002
    },
    {
      "source": "binall = binall.loc[binall['bklfilter'] & (binall['probdiff']>0)]\nbinall",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "tss-stats-vs-corr",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "TSS stats vs corr"
        ]
      },
      "doc_lineno": 260002
    },
    {
      "source": "expr = pd.read_hdf('/home/jzhou_salk_edu/sky_workdir/hba/rna_majortype/cluster_expr.hdf')\nstats = pd.read_hdf(f'/home/jzhou_salk_edu/sky_workdir/hba/rna_majortype/{group_name}_deg_stats.hdf')\ngenefilter = (stats['stats']>0)\nexpr = expr.loc[:, genefilter]\nstats = stats.loc[genefilter]\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "tss-stats-vs-corr",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "TSS stats vs corr"
        ]
      },
      "doc_lineno": 270002
    },
    {
      "source": "data = pd.read_csv(f'/home/jzhou_salk_edu/sky_workdir/hba/ref/hg38.main.5kbin.TSS.slop2k.txt', sep='\\t', header=None, index_col=None)\ndata = data.loc[(data[1] % res)!=10000]\ndata['bin_id'] = data[0] + '_' + ((data[1] + 10000) // res).astype(str)\ndata = data.rename({6:'gene_id'}, axis=1)\ndata = data[['bin_id', 'gene_id']].drop_duplicates()\ndata = data.loc[(data['bin_id'].isin(binall.index)) & (data['gene_id'].isin(stats.index))]\ndata['chi2'] = binall.loc[data['bin_id'].values, 'chi2_sc'].values\ndata['kruskal'] = stats.loc[data['gene_id'].values, 'stats'].values\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "tss-stats-vs-corr",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "TSS stats vs corr"
        ]
      },
      "doc_lineno": 280002
    },
    {
      "source": "tmp3c = bound_prob_ct.loc[data['bin_id'].values].values\ntmp3c = zscore(tmp3c, axis=1)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "tss-stats-vs-corr",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "TSS stats vs corr"
        ]
      },
      "doc_lineno": 290002
    },
    {
      "source": "tmprna = expr.loc[leg, data['gene_id'].values].T.values\ntmprna = zscore(tmprna, axis=1)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "tss-stats-vs-corr",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "TSS stats vs corr"
        ]
      },
      "doc_lineno": 300002
    },
    {
      "source": "data['corr'] = [pearsonr(xx, yy)[0] for xx,yy in zip(tmp3c, tmprna)]",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "tss-stats-vs-corr",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "TSS stats vs corr"
        ]
      },
      "doc_lineno": 310002
    },
    {
      "source": "fig, ax = plt.subplots(figsize=(3.5,3), dpi=300)\nsns.histplot(data, x='chi2', y='kruskal', bins=100, ax=ax, log_scale=(10,10))\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "tss-stats-vs-corr",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "TSS stats vs corr"
        ]
      },
      "doc_lineno": 320002
    },
    {
      "source": "data['chi2_group'], groupM = pd.cut(zscore(np.log10(data['chi2'])), 100, labels=False, retbins=True)\ndata['kruskal_group'], groupK = pd.cut(zscore(np.log10(data['kruskal'])), 100, labels=False, retbins=True)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "tss-stats-vs-corr",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "TSS stats vs corr"
        ]
      },
      "doc_lineno": 330002
    },
    {
      "source": "tmp = data.groupby(['chi2_group','kruskal_group'])['corr'].mean()\ngroupcorr = np.zeros((100, 100)) / 0\ngroupcorr[(tmp.index.get_level_values('kruskal_group'), tmp.index.get_level_values('chi2_group'))] = tmp.values\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "tss-stats-vs-corr",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "TSS stats vs corr"
        ]
      },
      "doc_lineno": 340002
    },
    {
      "source": "tmp = data.groupby(['chi2_group','kruskal_group'])['corr'].count()\ngroupcount = np.zeros((100, 100))\ngroupcount[(tmp.index.get_level_values('kruskal_group'), tmp.index.get_level_values('chi2_group'))] = tmp.values + 1\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "tss-stats-vs-corr",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "TSS stats vs corr"
        ]
      },
      "doc_lineno": 350002
    },
    {
      "source": "cmap = mpl.cm.bwr\ncmap.set_bad('black', 1.0)\n\nfig, axes = plt.subplots(1, 2, figsize=(6,3), sharex='all', sharey='all', dpi=300)\nax = axes[0]\nplot = ax.imshow(groupcorr, vmin=-0.8, vmax=0.8, cmap=cmap)\n\ncbar = fig.colorbar(plot, ax=ax, shrink=0.5, fraction=0.1)\ncbar.set_ticks([-0.8, 0.8])\nax.set_xlabel('Zscore Chi2')\nax.set_ylabel('Zscore Kruskal')\n\nax = axes[1]\nplot = ax.imshow(groupcount, cmap='Reds', norm=LogNorm(vmin=1))\nfig.colorbar(plot, ax=ax, shrink=0.5, fraction=0.1)\nax.set_xticks(np.arange(-0.5, 100.5, 20))\nax.set_yticks(np.arange(-0.5, 100.5, 20))\nax.set_xticklabels(np.around(groupM[np.arange(0,100.5,20).astype(int)], decimals=1))\nax.set_yticklabels(np.around(groupK[np.arange(0,100.5,20).astype(int)], decimals=1))\n\nax.set_xlabel('Zscore Chi2')\nplt.tight_layout()\n# plt.savefig(f'majortype_{group_name}_bound_rna_stats_tss_corr.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "tss-stats-vs-corr",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "TSS stats vs corr"
        ]
      },
      "doc_lineno": 360002
    },
    {
      "source": "corr_all = []",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-tss",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Differential Loop vs All Gene TSS"
        ]
      },
      "doc_lineno": 390002
    },
    {
      "source": "selp = data['bin_id'].isin(selb.index[selb])\ndata = data.loc[selp]",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-tss",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Differential Loop vs All Gene TSS"
        ]
      },
      "doc_lineno": 400002
    },
    {
      "source": "tmp3c = tmp3c[selp]\ntmprna = tmprna[selp]",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-tss",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Differential Loop vs All Gene TSS"
        ]
      },
      "doc_lineno": 410002
    },
    {
      "source": "cg = sns.clustermap(tmp3c, cmap='bwr', vmin=-3, vmax=3, metric='cosine', xticklabels=leg, yticklabels=[], figsize=(6,6))\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-tss",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Differential Loop vs All Gene TSS"
        ]
      },
      "doc_lineno": 420002
    },
    {
      "source": "rorder = cg.dendrogram_row.reordered_ind.copy()\ncorder = cg.dendrogram_col.reordered_ind.copy()",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-tss",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Differential Loop vs All Gene TSS"
        ]
      },
      "doc_lineno": 430002
    },
    {
      "source": "fig, axes = plt.subplots(1, 2, sharey='all', figsize=(6,5), dpi=300)\n\nax = axes[0]\nax.imshow(tmp3c[np.ix_(rorder, corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('Boundary Prob', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\nax.set_yticks([])\nax.set_ylabel(f'{np.unique(data[\"bin_id\"]).shape[0]} Diff Bound')\n\nax = axes[1]\nax.imshow(tmprna[np.ix_(rorder, corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('RNA', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\nax.set_ylabel(f'{np.unique(data[\"gene_id\"]).shape[0]} Gene')\n\nplt.tight_layout()\n# plt.savefig(f'majortype_{group_name}_diffbound_3C_RNA_alltss.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-tss",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Differential Loop vs All Gene TSS"
        ]
      },
      "doc_lineno": 440002
    },
    {
      "source": "corr_all.append(data['corr'].values)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-tss",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Differential Loop vs All Gene TSS"
        ]
      },
      "doc_lineno": 450002
    },
    {
      "source": "from scipy.stats import rankdata\n\ndeg = np.zeros(genefilter.shape[0])\nfor i in range(len(leg)-1):\n    for j in range(i+1, len(leg)):\n        tmp = np.load(f'/home/jzhou_salk_edu/sky_workdir/hba/rna_majortype/DEG/{leg[i]}-{leg[j]}.npz')\n        # deg[np.logical_and(np.abs(tmp['fc'])>1, tmp['fdr']<1e-3)] = 1\n        rank = rankdata(tmp['fdr'])\n        deg[rank<=100] = 1\n\nprint(deg.sum())",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-tss",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Differential Loop vs DEG TSS"
        ]
      },
      "doc_lineno": 480002
    },
    {
      "source": "tmp = anndata.read_h5ad('/home/jzhou_salk_edu/sky_workdir/hba/rna_majortype/cell_29000_rna.h5ad')\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-tss",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Differential Loop vs DEG TSS"
        ]
      },
      "doc_lineno": 490002
    },
    {
      "source": "tmp.var['DEG'] = deg.copy()\n# ((tmp.var['chrom'].isin(chrom_sizes.index)) & (tmp.var['DEG']==1) & genefilter).sum()",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-tss",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Differential Loop vs DEG TSS"
        ]
      },
      "doc_lineno": 500002
    },
    {
      "source": "selp = data['gene_id'].isin(genefilter.index[deg==1])\ndata = data.loc[selp]",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-tss",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Differential Loop vs DEG TSS"
        ]
      },
      "doc_lineno": 510002
    },
    {
      "source": "tmp3c = tmp3c[selp]\ntmprna = tmprna[selp]",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-tss",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Differential Loop vs DEG TSS"
        ]
      },
      "doc_lineno": 520002
    },
    {
      "source": "cg = sns.clustermap(tmp3c, cmap='bwr', vmin=-3, vmax=3, metric='cosine', xticklabels=leg, yticklabels=[], figsize=(6,6))\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-tss",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Differential Loop vs DEG TSS"
        ]
      },
      "doc_lineno": 530002
    },
    {
      "source": "rorder = cg.dendrogram_row.reordered_ind.copy()\ncorder = cg.dendrogram_col.reordered_ind.copy()",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-tss",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Differential Loop vs DEG TSS"
        ]
      },
      "doc_lineno": 540002
    },
    {
      "source": "fig, axes = plt.subplots(1, 2, sharey='all', figsize=(6,5), dpi=300)\n\nax = axes[0]\nax.imshow(tmp3c[np.ix_(rorder, corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('Boundary Prob', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\nax.set_yticks([])\nax.set_ylabel(f'{np.unique(data[\"bin_id\"]).shape[0]} Diff Comp')\n\nax = axes[1]\nax.imshow(tmprna[np.ix_(rorder, corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('RNA', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\nax.set_ylabel(f'{np.unique(data[\"gene_id\"]).shape[0]} DEG')\n\nplt.tight_layout()\n# plt.savefig(f'majortype_{group_name}_diffbound_3C_RNA_degtss.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-tss",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Differential Loop vs DEG TSS"
        ]
      },
      "doc_lineno": 550002
    },
    {
      "source": "corr_all.append(data['corr'].values)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-tss",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Differential Loop vs DEG TSS"
        ]
      },
      "doc_lineno": 560002
    },
    {
      "source": "expr = pd.read_hdf('/home/jzhou_salk_edu/sky_workdir/hba/rna_majortype/cluster_expr.hdf')\nstats = pd.read_hdf(f'/home/jzhou_salk_edu/sky_workdir/hba/rna_majortype/{group_name}_deg_stats.hdf')\ngenefilter = (stats['stats']>0)\nexpr = expr.loc[:, genefilter]\nstats = stats.loc[genefilter]\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "gene-body-stats-vs-corr",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Gene body stats vs corr"
        ]
      },
      "doc_lineno": 590002
    },
    {
      "source": "data = pd.read_csv(f'/home/jzhou_salk_edu/sky_workdir/hba/ref/hg38.main.5kbin.gene.slop2k.txt', sep='\\t', header=None, index_col=None)\ndata = data.loc[(data[1] % res)!=10000]\ndata['bin_id'] = data[0] + '_' + ((data[1] + 10000) // res).astype(str)\ndata = data.rename({6:'gene_id'}, axis=1)\ndata = data[['bin_id', 'gene_id']].drop_duplicates()\ndata = data.loc[(data['bin_id'].isin(binall.index)) & (data['gene_id'].isin(stats.index))]\ndata['chi2'] = binall.loc[data['bin_id'].values, 'chi2_sc'].values\ndata['kruskal'] = stats.loc[data['gene_id'].values, 'stats'].values\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "gene-body-stats-vs-corr",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Gene body stats vs corr"
        ]
      },
      "doc_lineno": 600002
    },
    {
      "source": "tmp3c = bound_prob_ct.loc[data['bin_id'].values].values\ntmp3c = zscore(tmp3c, axis=1)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "gene-body-stats-vs-corr",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Gene body stats vs corr"
        ]
      },
      "doc_lineno": 610002
    },
    {
      "source": "tmprna = expr.loc[leg, data['gene_id'].values].T.values\ntmprna = zscore(tmprna, axis=1)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "gene-body-stats-vs-corr",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Gene body stats vs corr"
        ]
      },
      "doc_lineno": 620002
    },
    {
      "source": "data['corr'] = [pearsonr(xx, yy)[0] for xx,yy in zip(tmp3c, tmprna)]\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "gene-body-stats-vs-corr",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Gene body stats vs corr"
        ]
      },
      "doc_lineno": 630002
    },
    {
      "source": "fig, ax = plt.subplots(figsize=(3.5,3), dpi=300)\nsns.histplot(data, x='chi2', y='kruskal', bins=100, ax=ax, log_scale=(10,10))\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "gene-body-stats-vs-corr",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Gene body stats vs corr"
        ]
      },
      "doc_lineno": 640002
    },
    {
      "source": "data['chi2_group'], groupM = pd.cut(zscore(np.log10(data['chi2'])), 100, labels=False, retbins=True)\ndata['kruskal_group'], groupK = pd.cut(zscore(np.log10(data['kruskal'])), 100, labels=False, retbins=True)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "gene-body-stats-vs-corr",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Gene body stats vs corr"
        ]
      },
      "doc_lineno": 650002
    },
    {
      "source": "tmp = data.groupby(['chi2_group','kruskal_group'])['corr'].mean()\ngroupcorr = np.zeros((100, 100)) / 0\ngroupcorr[(tmp.index.get_level_values('kruskal_group'), tmp.index.get_level_values('chi2_group'))] = tmp.values\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "gene-body-stats-vs-corr",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Gene body stats vs corr"
        ]
      },
      "doc_lineno": 660002
    },
    {
      "source": "tmp = data.groupby(['chi2_group','kruskal_group'])['corr'].count()\ngroupcount = np.zeros((100, 100))\ngroupcount[(tmp.index.get_level_values('kruskal_group'), tmp.index.get_level_values('chi2_group'))] = tmp.values + 1\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "gene-body-stats-vs-corr",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Gene body stats vs corr"
        ]
      },
      "doc_lineno": 670002
    },
    {
      "source": "cmap = mpl.cm.bwr\ncmap.set_bad('black', 1.0)\n\nfig, axes = plt.subplots(1, 2, figsize=(6,3), sharex='all', sharey='all', dpi=300)\nax = axes[0]\nplot = ax.imshow(groupcorr, vmin=-0.8, vmax=0.8, cmap=cmap)\n\ncbar = fig.colorbar(plot, ax=ax, shrink=0.5, fraction=0.1)\ncbar.set_ticks([-0.8, 0.8])\nax.set_xlabel('Zscore Chi2')\nax.set_ylabel('Zscore Kruskal')\n\nax = axes[1]\nplot = ax.imshow(groupcount, cmap='Reds', norm=LogNorm(vmin=1))\nfig.colorbar(plot, ax=ax, shrink=0.5, fraction=0.1)\nax.set_xticks(np.arange(-0.5, 100.5, 20))\nax.set_yticks(np.arange(-0.5, 100.5, 20))\nax.set_xticklabels(np.around(groupM[np.arange(0,100.5,20).astype(int)], decimals=1))\nax.set_yticklabels(np.around(groupK[np.arange(0,100.5,20).astype(int)], decimals=1))\n\nax.set_xlabel('Zscore Chi2')\nplt.tight_layout()\n# plt.savefig(f'majortype_{group_name}_bound_rna_stats_genebody_corr.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "gene-body-stats-vs-corr",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Gene body stats vs corr"
        ]
      },
      "doc_lineno": 680002
    },
    {
      "source": "selp = data['bin_id'].isin(selb.index[selb])\ndata = data.loc[selp]",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-body",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Differential Loop vs All Gene Body"
        ]
      },
      "doc_lineno": 710002
    },
    {
      "source": "tmp3c = tmp3c[selp]\ntmprna = tmprna[selp]",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-body",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Differential Loop vs All Gene Body"
        ]
      },
      "doc_lineno": 720002
    },
    {
      "source": "cg = sns.clustermap(tmp3c, cmap='bwr', vmin=-3, vmax=3, metric='cosine', xticklabels=leg, yticklabels=[], figsize=(6,6))\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-body",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Differential Loop vs All Gene Body"
        ]
      },
      "doc_lineno": 730002
    },
    {
      "source": "rorder = cg.dendrogram_row.reordered_ind.copy()\ncorder = cg.dendrogram_col.reordered_ind.copy()",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-body",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Differential Loop vs All Gene Body"
        ]
      },
      "doc_lineno": 740002
    },
    {
      "source": "fig, axes = plt.subplots(1, 2, sharey='all', figsize=(6,5), dpi=300)\n\nax = axes[0]\nax.imshow(tmp3c[np.ix_(rorder, corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('Boundary Prob', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\nax.set_yticks([])\nax.set_ylabel(f'{np.unique(data[\"bin_id\"]).shape[0]} Diff Comp')\n\nax = axes[1]\nax.imshow(tmprna[np.ix_(rorder, corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('RNA', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\nax.set_ylabel(f'{np.unique(data[\"gene_id\"]).shape[0]} Gene')\n\nplt.tight_layout()\n# plt.savefig(f'majortype_{group_name}_diffbound_3C_RNA_allbody.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-body",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Differential Loop vs All Gene Body"
        ]
      },
      "doc_lineno": 750002
    },
    {
      "source": "corr_all.append(data['corr'].values)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-body",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Differential Loop vs All Gene Body"
        ]
      },
      "doc_lineno": 760002
    },
    {
      "source": "from scipy.stats import rankdata\n\ndeg = np.zeros(genefilter.shape[0])\nfor i in range(len(leg)-1):\n    for j in range(i+1, len(leg)):\n        tmp = np.load(f'/home/jzhou_salk_edu/sky_workdir/hba/rna_majortype/DEG/{leg[i]}-{leg[j]}.npz')\n        # deg[np.logical_and(np.abs(tmp['fc'])>1, tmp['fdr']<1e-3)] = 1\n        rank = rankdata(tmp['fdr'])\n        deg[rank<=100] = 1\n\nprint(deg.sum())",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-gene-body",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Differential Loop vs DEG Gene Body"
        ]
      },
      "doc_lineno": 790002
    },
    {
      "source": "selp = data['gene_id'].isin(genefilter.index[deg==1])\ndata = data.loc[selp]",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-gene-body",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Differential Loop vs DEG Gene Body"
        ]
      },
      "doc_lineno": 800002
    },
    {
      "source": "tmp3c = tmp3c[selp]\ntmprna = tmprna[selp]",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-gene-body",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Differential Loop vs DEG Gene Body"
        ]
      },
      "doc_lineno": 810002
    },
    {
      "source": "cg = sns.clustermap(tmp3c, cmap='bwr', vmin=-3, vmax=3, metric='cosine', xticklabels=leg, yticklabels=[], figsize=(6,6))\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-gene-body",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Differential Loop vs DEG Gene Body"
        ]
      },
      "doc_lineno": 820002
    },
    {
      "source": "rorder = cg.dendrogram_row.reordered_ind.copy()\ncorder = cg.dendrogram_col.reordered_ind.copy()",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-gene-body",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Differential Loop vs DEG Gene Body"
        ]
      },
      "doc_lineno": 830002
    },
    {
      "source": "fig, axes = plt.subplots(1, 2, sharey='all', figsize=(6,5), dpi=300)\n\nax = axes[0]\nax.imshow(tmp3c[np.ix_(rorder, corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('Boundary Prob', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\nax.set_yticks([])\nax.set_ylabel(f'{np.unique(data[\"bin_id\"]).shape[0]} Diff Comp')\n\nax = axes[1]\nax.imshow(tmprna[np.ix_(rorder, corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('RNA', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\nax.set_ylabel(f'{np.unique(data[\"gene_id\"]).shape[0]} DEG')\n\nplt.tight_layout()\n# plt.savefig(f'majortype_{group_name}_diffbound_3C_RNA_degbody.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-gene-body",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Differential Loop vs DEG Gene Body"
        ]
      },
      "doc_lineno": 840002
    },
    {
      "source": "corr_all.append(data['corr'].values)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-gene-body",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Differential Loop vs DEG Gene Body"
        ]
      },
      "doc_lineno": 850002
    },
    {
      "source": "np.save(f'{outdir}corr_diffbound_rna.npy', corr_all)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-gene-body",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Differential Loop vs DEG Gene Body"
        ]
      },
      "doc_lineno": 870002
    },
    {
      "source": "corr_all = np.load(f'{outdir}corr_diffbound_rna.npy', allow_pickle=True)[[0,2,1,3]]\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-gene-body",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Differential Loop vs DEG Gene Body"
        ]
      },
      "doc_lineno": 880002
    },
    {
      "source": "xleg = [f'{xx}\\n(n={yy.shape[0]})' for xx,yy in zip(['All Gene TSS', 'All Gene Body', 'DEG TSS', 'DEG Body'], corr_all)]\nfig, ax = plt.subplots(figsize=(4.5,2), dpi=300)\nsns.violinplot(corr_all, ax=ax)\nax.set_xticklabels(xleg)\nax.set_ylabel('PCC with Comp Score')\n# plt.tight_layout()\n# plt.savefig(f'majortype_{group_name}_diffbound_rnacorr.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-gene-body",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Differential Loop vs DEG Gene Body"
        ]
      },
      "doc_lineno": 890002
    },
    {
      "source": "[[xx.shape, np.median(xx)] for xx in corr_all]",
      "names": [],
      "example": {
        "document": "hba/domain_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-gene-body",
        "headings": [
          "Plot correlation between boundary and mC/ATAC/RNA",
          "Differential Loop vs DEG Gene Body"
        ]
      },
      "doc_lineno": 900002
    }
  ],
  "hba/domain_majortype/intro": [],
  "hba/intro": [],
  "hba/loop_majortype/01.diff": [
    {
      "source": "import os\nimport cooler\nimport pathlib\nimport numpy as np\nimport pandas as pd\nfrom scipy.sparse import load_npz, save_npz, vstack, csr_matrix, triu\nfrom scipy.stats import f, zscore, ranksums\nfrom schicluster.cool.utilities import get_chrom_offsets\nfrom multiprocessing import Pool\nfrom concurrent.futures import ProcessPoolExecutor, as_completed\n",
      "names": [
        {
          "import_components": [
            "schicluster",
            "cool",
            "utilities"
          ],
          "code_str": "schicluster.cool.utilities",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_from",
          "resolved_location": "schicluster.cool.utilities"
        },
        {
          "import_components": [
            "schicluster",
            "cool",
            "utilities",
            "get_chrom_offsets"
          ],
          "code_str": "get_chrom_offsets",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_target",
          "resolved_location": "schicluster.cool.utilities.get_chrom_offsets"
        }
      ],
      "example": {
        "document": "hba/loop_majortype/01.diff",
        "ref_id": "anova-of-loop-matrices-across-cell-types",
        "headings": [
          "ANOVA of loop matrices across cell types"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "leg = {'exc': ['L23_IT', 'L4_IT', 'L5_IT', 'L6_IT', 'L6_IT_Car3', 'L56_NP', 'L6_CT', 'L6b', 'Amy'], \n       'inh': ['Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb_ChC', 'Sst', 'CHD7'], \n       'msn': ['MSN_D1', 'MSN_D2', 'Foxp2'], \n       'sub': ['SubCtx'], \n       'glia': ['ASC', 'ODC', 'OPC'], \n       'mgc': ['MGC'], \n       'smc': ['PC'], \n       'endo': ['EC'], \n       'fibro': ['VLMC'],\n      }\nleg['neu'] = leg['exc'] + leg['inh'] + leg['msn'] + leg['sub']\nleg['all'] = leg['neu'] + leg['glia'] + leg['mgc'] + leg['smc'] + leg['endo'] + leg['fibro']\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/01.diff",
        "ref_id": "anova-of-loop-matrices-across-cell-types",
        "headings": [
          "ANOVA of loop matrices across cell types"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "group_name = 'neu'\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/01.diff",
        "ref_id": "anova-of-loop-matrices-across-cell-types",
        "headings": [
          "ANOVA of loop matrices across cell types"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "ctgroup = []\nif '_' in group_name:\n    for xx in group_name.split('_'):\n        ctgroup.append(leg[xx])\nelse:\n    for xx in leg[group_name]:\n        ctgroup.append([xx])\n        ",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/01.diff",
        "ref_id": "anova-of-loop-matrices-across-cell-types",
        "headings": [
          "ANOVA of loop matrices across cell types"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "ctgroup",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/01.diff",
        "ref_id": "anova-of-loop-matrices-across-cell-types",
        "headings": [
          "ANOVA of loop matrices across cell types"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "indir = '/home/jzhou_salk_edu/sky_workdir/hba/loop_majortype/'\noutdir = '/home/jzhou_salk_edu/sky_workdir/hba/loop_majortype/'\nres = 10000\ngroup = group_name\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/01.diff",
        "ref_id": "anova-of-loop-matrices-across-cell-types",
        "headings": [
          "ANOVA of loop matrices across cell types"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "chrom_size_path = f'{indir}hg38_with_chrl.main.chrom.sizes'\nchrom_sizes = cooler.read_chromsizes(chrom_size_path, all_names=True)\nbins_df = cooler.binnify(chrom_sizes, res)\nchrom_offset = get_chrom_offsets(bins_df)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/01.diff",
        "ref_id": "anova-of-loop-matrices-across-cell-types",
        "headings": [
          "ANOVA of loop matrices across cell types"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "bkl = pd.read_csv(f'{indir}M1C.rowsumpb1000.blf50.merged.bed', sep='\\t', header=None, index_col=None)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/01.diff",
        "ref_id": "anova-of-loop-matrices-across-cell-types",
        "headings": [
          "ANOVA of loop matrices across cell types"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "def compute_anova(c, matrix):\n    # c, matrix = args\n    ngene = int(chrom_sizes.loc[c] // res) + 1\n    bkl_tmp = bkl.loc[(bkl[0]==c), [1,2]].values // res\n    cov = np.zeros(ngene)\n    for xx,yy in bkl_tmp:\n        cov[xx-7:yy+7] = 1\n    tot, last = 0, 0\n    Esum, E2sum, Elast, E2last, ss_intra = [csr_matrix((ngene, ngene)) for i in range(5)]\n    for ctlist in ctgroup:\n        for ct in ctlist:\n            cool_e = cooler.Cooler(f'{indir}/{ct}/{ct}/{ct}.{matrix}.cool')\n            E = triu(cool_e.matrix(balance=False, sparse=True).fetch(c))\n            cool_e2 = cooler.Cooler(f'{indir}/{ct}/{ct}/{ct}.{matrix}2.cool')\n            E2 = triu(cool_e2.matrix(balance=False, sparse=True).fetch(c))\n            n = cool_e.info['group_n_cells']\n            Esum += E * n\n            E2sum += E2 * n\n            tot += n\n            # print(c, ct)\n        Egroup = Esum - Elast\n        E2group = E2sum - E2last\n        Egroup.data = Egroup.data ** 2 / (tot - last)\n        ss_intra += (E2group - Egroup)\n        Elast = Esum.copy()\n        E2last = E2sum.copy()\n        last = tot\n    Esum.data = Esum.data ** 2 / tot\n    ss_total = E2sum - Esum\n    ss_intra.data = 1 / ss_intra.data\n    ss_total = ss_total.multiply(ss_intra)\n    # print(c, ss_total.data.min(), ss_intra.data.min())\n\n    ss_total.data = (ss_total.data - 1) * (tot - len(ctgroup)) / (len(ctgroup) - 1)\n    ss_total = ss_total.tocoo()\n    bklfilter = np.logical_and(cov[ss_total.row]==0, cov[ss_total.col]==0)\n    distfilter = np.logical_and((ss_total.col-ss_total.row)>5, (ss_total.col-ss_total.row)<500)\n    idxfilter = np.logical_and(bklfilter, distfilter)\n    # print(idxfilter.sum(), len(idxfilter))\n    ss_total = csr_matrix((ss_total.data[idxfilter], (ss_total.row[idxfilter], ss_total.col[idxfilter])), (ngene, ngene))\n    save_npz(f'{outdir}diff/{group}/majortype_{matrix}pv_{c}.npz', ss_total)\n\n    return [c, matrix, tot]\n\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/01.diff",
        "ref_id": "anova-of-loop-matrices-across-cell-types",
        "headings": [
          "ANOVA of loop matrices across cell types"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "cpu = 10\nwith ProcessPoolExecutor(cpu) as executor:\n    futures = []\n    for x in chrom_sizes.index:\n        for y in ['Q', 'E', 'T']:\n            future = executor.submit(\n                compute_anova,\n                c=x,\n                matrix=y,\n            )\n            futures.append(future)\n\n    # result = []\n    for future in as_completed(futures):\n        # result.append(future.result())\n        # c1, c2 = result[-1][0], result[-1][1]\n        tmp = future.result()\n        print(f'{tmp[0]} {tmp[1]} finished')\n        ",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/01.diff",
        "ref_id": "anova-of-loop-matrices-across-cell-types",
        "headings": [
          "ANOVA of loop matrices across cell types"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "def chrom_iterator(input_dir, chrom_order, chrom_offset):\n    for chrom in chrom_order:\n        output_path = f'{input_dir}_{chrom}.npz'\n        if not pathlib.Path(output_path).exists():\n            continue\n        chunk_size = 5000000\n        data = load_npz(output_path).tocoo()\n        df = pd.DataFrame({'bin1_id': data.row, 'bin2_id': data.col, 'count': data.data})\n        df = df[df['bin1_id'] <= df['bin2_id']]\n        for i, chunk_start in enumerate(range(0, df.shape[0], chunk_size)):\n            chunk = df.iloc[chunk_start:chunk_start + chunk_size]\n            chunk.iloc[:, :2] += chrom_offset[chrom]\n            yield chunk\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/01.diff",
        "ref_id": "anova-of-loop-matrices-across-cell-types",
        "headings": [
          "ANOVA of loop matrices across cell types"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "for matrix in ['Q', 'E', 'T']:\n    output_path = f'{outdir}diff/{group}/majortype_{matrix}pv'\n    cooler.create_cooler(cool_uri=f'{output_path}.cool',\n                         bins=bins_df,\n                         pixels=chrom_iterator(input_dir=output_path,\n                                               chrom_order=chrom_sizes.index,\n                                               chrom_offset=chrom_offset\n                                              ),\n                         ordered=True,\n                         dtypes={'count': np.float32})\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/01.diff",
        "ref_id": "anova-of-loop-matrices-across-cell-types",
        "headings": [
          "ANOVA of loop matrices across cell types"
        ]
      },
      "doc_lineno": 130002
    },
    {
      "source": "os.system(f'rm {outdir}diff/{group}/majortype_*pv_c*.npz')",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/01.diff",
        "ref_id": "anova-of-loop-matrices-across-cell-types",
        "headings": [
          "ANOVA of loop matrices across cell types"
        ]
      },
      "doc_lineno": 140002
    }
  ],
  "hba/loop_majortype/02.load": [
    {
      "source": "import cooler\nimport numpy as np\nimport pandas as pd\nfrom scipy.sparse import triu\nfrom scipy.stats import pearsonr, zscore, norm\nfrom multiprocessing import Pool\nfrom concurrent.futures import ProcessPoolExecutor, as_completed\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm\nfrom matplotlib import cm as cm\nimport seaborn as sns\n\nmpl.style.use('default')\nmpl.rcParams['pdf.fonttype'] = 42\nmpl.rcParams['ps.fonttype'] = 42\nmpl.rcParams['font.family'] = 'sans-serif'\nmpl.rcParams['font.sans-serif'] = 'Helvetica'\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/02.load",
        "ref_id": "load-loop-matrices-and-stats",
        "headings": [
          "Load loop matrices and stats"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "leg = ['L23_IT', 'L4_IT', 'L5_IT', 'L6_IT', 'L6_IT_Car3', 'L56_NP', 'L6_CT', 'L6b', 'L5_ET', 'Amy', \n       'Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb_ChC', 'Sst', 'CHD7', \n       'MSN_D1', 'MSN_D2', 'Foxp2', 'SubCtx', \n       'ASC', 'ODC', 'OPC', 'MGC', 'PC', 'EC', 'VLMC'\n      ]\nlegname = ['L2/3-IT', 'L4-IT', 'L5-IT', 'L6-IT', 'L6-IT-Car3', 'L5/6-NP', 'L6-CT', 'L6b', 'L5-ET', 'Amy-Exc', \n       'Lamp5', 'Lamp5-Lhx6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb-ChC', 'Sst', 'Chd7', \n       'MSN-D1', 'MSN-D2', 'Foxp2', 'SubCtx-Cplx', \n       'ASC', 'ODC', 'OPC', 'MGC', 'PC', 'EC', 'VLMC'\n      ]\nleg2name = {xx:yy for xx,yy in zip(leg, legname)}\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/02.load",
        "ref_id": "load-loop-matrices-and-stats",
        "headings": [
          "Load loop matrices and stats"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "leg = {'exc': ['L23_IT', 'L4_IT', 'L5_IT', 'L6_IT', 'L6_IT_Car3', 'L56_NP', 'L6_CT', 'L6b', 'Amy'], \n       'inh': ['Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb_ChC', 'Sst', 'CHD7'], \n       'cnu': ['MSN_D1', 'MSN_D2', 'Foxp2'], \n       'sub': ['SubCtx'], \n       'glia': ['ASC', 'ODC', 'OPC'], \n       'mgc': ['MGC'], \n       'smc': ['PC'], \n       'endo': ['EC'], \n       'fibro': ['VLMC'],\n      }\nleg['neu'] = leg['exc'] + leg['inh'] + leg['cnu'] + leg['sub']\nleg['all'] = leg['neu'] + leg['glia'] + leg['mgc'] + leg['smc'] + leg['endo'] + leg['fibro']\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/02.load",
        "ref_id": "load-loop-matrices-and-stats",
        "headings": [
          "Load loop matrices and stats"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "group_name = 'neu'",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/02.load",
        "ref_id": "load-loop-matrices-and-stats",
        "headings": [
          "Load loop matrices and stats"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "ctgroup = []\nif '_' in group_name:\n    for xx in group_name.split('_'):\n        ctgroup.append(leg[xx])\nelse:\n    for xx in leg[group_name]:\n        ctgroup.append([xx])\n        ",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/02.load",
        "ref_id": "load-loop-matrices-and-stats",
        "headings": [
          "Load loop matrices and stats"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "leg = pd.Index(np.concatenate(ctgroup))\nlegname = leg.map(leg2name)\nres = 10000",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/02.load",
        "ref_id": "load-loop-matrices-and-stats",
        "headings": [
          "Load loop matrices and stats"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "indir = '/home/jzhou_salk_edu/sky_workdir/hba/loop_majortype/'\noutdir = f'/home/jzhou_salk_edu/sky_workdir/hba/loop_majortype/diff/{group_name}/'",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/02.load",
        "ref_id": "load-loop-matrices-and-stats",
        "headings": [
          "Load loop matrices and stats"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "chrom_size_path = f'{indir}hg38_with_chrl.main.chrom.sizes'\nchrom_sizes = cooler.read_chromsizes(chrom_size_path, all_names=True)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/02.load",
        "ref_id": "load-loop-matrices-and-stats",
        "headings": [
          "Load loop matrices and stats"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "loopall = [pd.read_csv(f'{indir}/{ct}/{ct}/{ct}.loop.bedpe', sep='\\t', index_col=None, header=None) for ct in leg]\nloopall = pd.concat(loopall, axis=0)\nloopall = loopall.drop([6], axis=1).drop_duplicates(subset=[0,1,4]).sort_values([0,1,4])\nloopall = pd.concat([loopall[(loopall[0]==c).values] for c in chrom_sizes.index[:-1]])\nloopall.index = np.arange(loopall.shape[0])\nloopall\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/02.load",
        "ref_id": "load-loop-position-and-anova",
        "headings": [
          "Load loop matrices and stats",
          "Load Loop Position and ANOVA"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "loopall.to_csv(f'{outdir}merged_loop.bedpe', sep='\\t', index=False, header=False)\nloopall.to_hdf(f'{outdir}merged_loop.hdf', key='data')\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/02.load",
        "ref_id": "load-loop-position-and-anova",
        "headings": [
          "Load loop matrices and stats",
          "Load Loop Position and ANOVA"
        ]
      },
      "doc_lineno": 130002
    },
    {
      "source": "for c in chrom_sizes.index[:-1]:\n    loopfilter = (loopall[0]==c)\n    looptmp = loopall.loc[loopfilter, [1,4]].values // res\n    for matrix in ['Q', 'E', 'T']:\n        cool = cooler.Cooler(f'{outdir}majortype_{matrix}pv.cool')\n        pv = triu(cool.matrix(balance=False, sparse=True).fetch(c)).tocsr()\n        loopall.loc[loopfilter, f'{matrix}anova'] = pv[(looptmp[:,0], looptmp[:,1])].A1\n    print(c)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/02.load",
        "ref_id": "load-loop-position-and-anova",
        "headings": [
          "Load loop matrices and stats",
          "Load Loop Position and ANOVA"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "loopall.to_hdf(f'{outdir}merged_loop.hdf', key='data')\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/02.load",
        "ref_id": "load-loop-position-and-anova",
        "headings": [
          "Load loop matrices and stats",
          "Load Loop Position and ANOVA"
        ]
      },
      "doc_lineno": 150002
    },
    {
      "source": "loopall = pd.read_hdf(f'{outdir}merged_loop.hdf', key='data')\nloopall",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/02.load",
        "ref_id": "load-loop-q",
        "headings": [
          "Load loop matrices and stats",
          "Load Loop Q"
        ]
      },
      "doc_lineno": 180002
    },
    {
      "source": "def load_Q(ct, m):\n    tmp = []\n    cool_file = cooler.Cooler(f'{indir}{ct}/{ct}/{ct}.{m}.cool').matrix(balance=False, sparse=True)\n    for c in chrom_sizes.index[:-1]:\n        mat = cool_file.fetch(c).tocsr()\n        tmp.append(mat[(loopall.loc[loopall[0]==c, 1].values // res, loopall.loc[loopall[0]==c, 4].values // res)].A1)\n        # print(ct, c)\n    return [ct, np.concatenate(tmp)]\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/02.load",
        "ref_id": "load-loop-q",
        "headings": [
          "Load loop matrices and stats",
          "Load Loop Q"
        ]
      },
      "doc_lineno": 190002
    },
    {
      "source": "cpu = 5\nwith ProcessPoolExecutor(cpu) as executor:\n    futures = []\n    for xx in leg:\n        future = executor.submit(\n            load_Q,\n            ct=xx,\n            m='Q'\n        )\n        futures.append(future)\n\n    loopq = []\n    for future in as_completed(futures):\n        tmp = future.result()\n        loopq.append(pd.DataFrame(tmp[1], columns=[tmp[0]]))\n        print(f'{tmp[0]} finished')\n        ",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/02.load",
        "ref_id": "load-loop-q",
        "headings": [
          "Load loop matrices and stats",
          "Load Loop Q"
        ]
      },
      "doc_lineno": 200002
    },
    {
      "source": "loopq = pd.concat(loopq, axis=1)\nloopq = loopq[leg]\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/02.load",
        "ref_id": "load-loop-q",
        "headings": [
          "Load loop matrices and stats",
          "Load Loop Q"
        ]
      },
      "doc_lineno": 210002
    },
    {
      "source": "loopq.to_hdf(f'{outdir}loop_Q.hdf', key='data')\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/02.load",
        "ref_id": "load-loop-q",
        "headings": [
          "Load loop matrices and stats",
          "Load Loop Q"
        ]
      },
      "doc_lineno": 220002
    },
    {
      "source": "cpu = 5\nwith ProcessPoolExecutor(cpu) as executor:\n    futures = []\n    for xx in leg:\n        future = executor.submit(\n            load_Q,\n            ct=xx,\n            m='T'\n        )\n        futures.append(future)\n\n    loopt = []\n    for future in as_completed(futures):\n        tmp = future.result()\n        loopt.append(pd.DataFrame(tmp[1], columns=[tmp[0]]))\n        print(f'{tmp[0]} finished')\n        ",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/02.load",
        "ref_id": "load-loop-q",
        "headings": [
          "Load loop matrices and stats",
          "Load Loop Q"
        ]
      },
      "doc_lineno": 230002
    },
    {
      "source": "loopt = pd.concat(loopt, axis=1)\nloopt = loopt[leg]\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/02.load",
        "ref_id": "load-loop-q",
        "headings": [
          "Load loop matrices and stats",
          "Load Loop Q"
        ]
      },
      "doc_lineno": 240002
    },
    {
      "source": "loopt.to_hdf(f'{outdir}loop_T.hdf', key='data')\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/02.load",
        "ref_id": "load-loop-q",
        "headings": [
          "Load loop matrices and stats",
          "Load Loop Q"
        ]
      },
      "doc_lineno": 250002
    },
    {
      "source": "loopq = pd.read_hdf(f'{outdir}loop_Q.hdf', key='data')\nloopt = pd.read_hdf(f'{outdir}loop_T.hdf', key='data')\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/02.load",
        "ref_id": "load-loop-q",
        "headings": [
          "Load loop matrices and stats",
          "Load Loop Q"
        ]
      },
      "doc_lineno": 270002
    },
    {
      "source": "fig, axes = plt.subplots(1, 2, figsize=(4, 2), dpi=300)\nax = axes[0]\nsns.histplot(zscore(np.log10(loopall['Tanova'])), bins=100, binrange=(-3,4), ax=ax)\nax = axes[1]\nsns.histplot(zscore(loopall['Tanova']), bins=100, binrange=(-1,4), ax=ax)\nplt.tight_layout()\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/02.load",
        "ref_id": "load-loop-q",
        "headings": [
          "Load loop matrices and stats",
          "Load Loop Q"
        ]
      },
      "doc_lineno": 290002
    },
    {
      "source": "fig, axes = plt.subplots(1, 2, figsize=(4, 2), dpi=300)\nax = axes[0]\nsns.histplot(zscore(np.log10(loopall['Qanova'])), bins=100, binrange=(-3,4), ax=ax)\nax = axes[1]\nsns.histplot(zscore(loopall['Qanova']), bins=100, binrange=(-1,4), ax=ax)\nplt.tight_layout()\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/02.load",
        "ref_id": "load-loop-q",
        "headings": [
          "Load loop matrices and stats",
          "Load Loop Q"
        ]
      },
      "doc_lineno": 300002
    },
    {
      "source": "thres1 = norm.isf(0.025)\nthres2 = norm.isf(0.15)\nprint(thres1, thres2)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/02.load",
        "ref_id": "load-loop-q",
        "headings": [
          "Load loop matrices and stats",
          "Load Loop Q"
        ]
      },
      "doc_lineno": 320002
    },
    {
      "source": "selb = ((zscore(loopall['Qanova'])>thres2) & (zscore(loopall['Tanova'])>thres2))\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/02.load",
        "ref_id": "load-loop-q",
        "headings": [
          "Load loop matrices and stats",
          "Load Loop Q"
        ]
      },
      "doc_lineno": 330002
    },
    {
      "source": "tmpq = loopq.loc[selb].values\ntmpq = zscore(tmpq, axis=1)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/02.load",
        "ref_id": "load-loop-q",
        "headings": [
          "Load loop matrices and stats",
          "Load Loop Q"
        ]
      },
      "doc_lineno": 340002
    },
    {
      "source": "tmpt = loopt.loc[selb].values\ntmpt = zscore(tmpt, axis=1)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/02.load",
        "ref_id": "load-loop-q",
        "headings": [
          "Load loop matrices and stats",
          "Load Loop Q"
        ]
      },
      "doc_lineno": 350002
    },
    {
      "source": "np.random.seed(0)\nsel = np.random.choice(np.arange(len(tmpq)), 2000, False)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/02.load",
        "ref_id": "load-loop-q",
        "headings": [
          "Load loop matrices and stats",
          "Load Loop Q"
        ]
      },
      "doc_lineno": 360002
    },
    {
      "source": "cg = sns.clustermap(tmpq[sel], cmap='bwr', vmin=-3, vmax=3, metric='cosine', xticklabels=leg, yticklabels=[], figsize=(6,6))\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/02.load",
        "ref_id": "load-loop-q",
        "headings": [
          "Load loop matrices and stats",
          "Load Loop Q"
        ]
      },
      "doc_lineno": 370002
    },
    {
      "source": "rorder = cg.dendrogram_row.reordered_ind.copy()\ncorder = cg.dendrogram_col.reordered_ind.copy()",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/02.load",
        "ref_id": "load-loop-q",
        "headings": [
          "Load loop matrices and stats",
          "Load Loop Q"
        ]
      },
      "doc_lineno": 380002
    },
    {
      "source": "fig, axes = plt.subplots(1, 2, sharey='all', figsize=(6, 5), dpi=300)\n\nax = axes[0]\nax.imshow(tmpq[np.ix_(sel[rorder], corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('Q', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\nax.set_yticks([])\nax.set_ylabel(f'{tmpq.shape[0]} Diff Loop')\n\nax = axes[1]\nax.imshow(tmpt[np.ix_(sel[rorder], corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('T', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\n\nplt.tight_layout()\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/02.load",
        "ref_id": "load-loop-q",
        "headings": [
          "Load loop matrices and stats",
          "Load Loop Q"
        ]
      },
      "doc_lineno": 390002
    }
  ],
  "hba/loop_majortype/03.apa": [
    {
      "source": "import cooler\nimport numpy as np\nimport pandas as pd\nfrom scipy.stats import pearsonr, zscore, norm\nfrom multiprocessing import Pool\nfrom concurrent.futures import ProcessPoolExecutor, as_completed\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm\nfrom matplotlib import cm as cm\nimport seaborn as sns\n\nmpl.style.use('default')\nmpl.rcParams['pdf.fonttype'] = 42\nmpl.rcParams['ps.fonttype'] = 42\nmpl.rcParams['font.family'] = 'sans-serif'\nmpl.rcParams['font.sans-serif'] = 'Helvetica'\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/03.apa",
        "ref_id": "aggregate-peak-analysis-of-differential-loops",
        "headings": [
          "Aggregate peak analysis of differential loops"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "leg = ['L23_IT', 'L4_IT', 'L5_IT', 'L6_IT', 'L6_IT_Car3', 'L56_NP', 'L6_CT', 'L6b', 'L5_ET', 'Amy', \n       'Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb_ChC', 'Sst', 'CHD7', \n       'MSN_D1', 'MSN_D2', 'Foxp2', 'SubCtx', \n       'ASC', 'ODC', 'OPC', 'MGC', 'PC', 'EC', 'VLMC'\n      ]\nlegname = ['L2/3-IT', 'L4-IT', 'L5-IT', 'L6-IT', 'L6-IT-Car3', 'L5/6-NP', 'L6-CT', 'L6b', 'L5-ET', 'Amy-Exc', \n       'Lamp5', 'Lamp5-Lhx6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb-ChC', 'Sst', 'Chd7', \n       'MSN-D1', 'MSN-D2', 'Foxp2', 'SubCtx-Cplx', \n       'ASC', 'ODC', 'OPC', 'MGC', 'PC', 'EC', 'VLMC'\n      ]\nleg2name = {xx:yy for xx,yy in zip(leg, legname)}\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/03.apa",
        "ref_id": "aggregate-peak-analysis-of-differential-loops",
        "headings": [
          "Aggregate peak analysis of differential loops"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "leg = {'exc': ['L23_IT', 'L4_IT', 'L5_IT', 'L6_IT', 'L6_IT_Car3', 'L56_NP', 'L6_CT', 'L6b', 'Amy'], \n       'inh': ['Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb_ChC', 'Sst', 'CHD7'], \n       'cnu': ['MSN_D1', 'MSN_D2', 'Foxp2'], \n       'sub': ['SubCtx'], \n       'glia': ['ASC', 'ODC', 'OPC'], \n       'mgc': ['MGC'], \n       'smc': ['PC'], \n       'endo': ['EC'], \n       'fibro': ['VLMC'],\n      }\nleg['neu'] = leg['exc'] + leg['inh'] + leg['cnu'] + leg['sub']\nleg['all'] = leg['neu'] + leg['glia'] + leg['mgc'] + leg['smc'] + leg['endo'] + leg['fibro']\nleg['msn'] = ['MSN_D1', 'MSN_D2']",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/03.apa",
        "ref_id": "aggregate-peak-analysis-of-differential-loops",
        "headings": [
          "Aggregate peak analysis of differential loops"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "group_name = 'neu'",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/03.apa",
        "ref_id": "aggregate-peak-analysis-of-differential-loops",
        "headings": [
          "Aggregate peak analysis of differential loops"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "ctgroup, ctname = [], []\nif '_' in group_name:\n    for xx in group_name.split('_'):\n        ctgroup.append(leg[xx])\n        ctname.append(xx.capitalize())\nelse:\n    for xx in leg[group_name]:\n        ctgroup.append([xx])\n        ctname.append(leg2name[xx])\n        ",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/03.apa",
        "ref_id": "aggregate-peak-analysis-of-differential-loops",
        "headings": [
          "Aggregate peak analysis of differential loops"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "leg = pd.Index(np.concatenate(ctgroup))\nlegname = leg.map(leg2name)\nres = 10000",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/03.apa",
        "ref_id": "aggregate-peak-analysis-of-differential-loops",
        "headings": [
          "Aggregate peak analysis of differential loops"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "indir = '/home/jzhou_salk_edu/sky_workdir/hba/loop_majortype/'\noutdir = f'/home/jzhou_salk_edu/sky_workdir/hba/loop_majortype/diff/{group_name}/'",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/03.apa",
        "ref_id": "aggregate-peak-analysis-of-differential-loops",
        "headings": [
          "Aggregate peak analysis of differential loops"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "chrom_size_path = f'{indir}hg38_with_chrl.main.chrom.sizes'\nchrom_sizes = cooler.read_chromsizes(chrom_size_path, all_names=True)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/03.apa",
        "ref_id": "aggregate-peak-analysis-of-differential-loops",
        "headings": [
          "Aggregate peak analysis of differential loops"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "loopq = pd.read_hdf(f'{outdir}loop_Q.hdf', key='data')\nloopt = pd.read_hdf(f'{outdir}loop_T.hdf', key='data')\nloopall = pd.read_hdf(f'{outdir}merged_loop.hdf', key='data')\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/03.apa",
        "ref_id": "aggregate-peak-analysis-of-differential-loops",
        "headings": [
          "Aggregate peak analysis of differential loops"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "thres1 = norm.isf(0.025)\nthres2 = norm.isf(0.15)\nprint(thres1, thres2)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/03.apa",
        "ref_id": "aggregate-peak-analysis-of-differential-loops",
        "headings": [
          "Aggregate peak analysis of differential loops"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "loopall[0].map(chrom_sizes)",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/03.apa",
        "ref_id": "aggregate-peak-analysis-of-differential-loops",
        "headings": [
          "Aggregate peak analysis of differential loops"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "selb = ((zscore(loopall['Qanova'])>thres2) & (zscore(loopall['Tanova'])>thres2))\ndistfilter = ((loopall[4]-loopall[1])>100000) & ((loopall[4]-loopall[1])<4950000) &  (loopall[1] >= (10*res)) & (loopall[4] < (loopall[0].map(chrom_sizes) - 10*res))\nloopfilter = distfilter & selb\nprint(selb.sum(), loopfilter.sum())\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/03.apa",
        "ref_id": "aggregate-peak-analysis-of-differential-loops",
        "headings": [
          "Aggregate peak analysis of differential loops"
        ]
      },
      "doc_lineno": 130002
    },
    {
      "source": "loopall = loopall.loc[loopfilter]\nloopq = loopq.loc[loopfilter]\nloopt = loopt.loc[loopfilter]\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/03.apa",
        "ref_id": "aggregate-peak-analysis-of-differential-loops",
        "headings": [
          "Aggregate peak analysis of differential loops"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "loop_list = []\nfor ctlist in ctgroup:\n    fc1 = loopq[ctlist].mean(axis=1) / loopq.loc[:, ~loopq.columns.isin(ctlist)].mean(axis=1)\n    fc2 = loopt[ctlist].mean(axis=1) / loopt.loc[:, ~loopt.columns.isin(ctlist)].mean(axis=1)\n    loop_list.append(loopall.loc[(fc1>1.2) & (fc2>1.5)])\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/03.apa",
        "ref_id": "aggregate-peak-analysis-of-differential-loops",
        "headings": [
          "Aggregate peak analysis of differential loops"
        ]
      },
      "doc_lineno": 150002
    },
    {
      "source": "[xx.shape[0] for xx in loop_list]",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/03.apa",
        "ref_id": "aggregate-peak-analysis-of-differential-loops",
        "headings": [
          "Aggregate peak analysis of differential loops"
        ]
      },
      "doc_lineno": 160002
    },
    {
      "source": "def apa(ct):\n    result = np.zeros((len(loop_list), 21, 21))\n    cool = cooler.Cooler(f'{indir}/{ct}/{ct}/{ct}.Q.cool')\n    for c in np.random.permutation(chrom_sizes.index[:-1]):\n        Q = cool.matrix(balance=False, sparse=True).fetch(c).toarray()\n        decay = np.array([np.mean(np.diag(Q, k)) for k in range(dist)])\n        E = np.zeros(Q.shape)\n        row, col = np.diag_indices(E.shape[0])\n        E[row, col] = 1\n        for k in range(1, 505):\n            E[row[:-k], col[k:]] = (Q[row[:-k], col[k:]]) / decay[k]\n        for j,loop in enumerate(loop_list):\n            looptmp = loop.loc[(loop[0]==c), [1,4]].values // res\n            for xx,yy in looptmp:\n                tmp = E[(xx-10):(xx+11), (yy-10):(yy+11)]\n                tmp = (tmp - tmp.min()) / (tmp.max() - tmp.min())\n                result[j] += tmp\n                \n    for j,loop in enumerate(loop_list):\n        result[j] /= loop.shape[0]\n        \n    return result\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/03.apa",
        "ref_id": "aggregate-peak-analysis-of-differential-loops",
        "headings": [
          "Aggregate peak analysis of differential loops"
        ]
      },
      "doc_lineno": 180002
    },
    {
      "source": "cpu = 5\ndist = 505\nresult = np.zeros((len(leg), len(loop_list), 21, 21))\nwith ProcessPoolExecutor(cpu) as executor:\n    futures = {}\n    for i,ct in enumerate(leg):\n        future = executor.submit(\n            apa,\n            ct=ct,\n        )\n        futures[future] = i\n\n    for future in as_completed(futures):\n        idx = futures[future]\n        result[idx] = future.result()\n        print(f'{leg[idx]} finished')\n        ",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/03.apa",
        "ref_id": "aggregate-peak-analysis-of-differential-loops",
        "headings": [
          "Aggregate peak analysis of differential loops"
        ]
      },
      "doc_lineno": 190002
    },
    {
      "source": "fig, axes = plt.subplots(len(leg), len(loop_list), figsize=(len(loop_list),len(leg)), \n                         sharex='all', sharey='all', dpi=300)\nfig.subplots_adjust(wspace=0.2, hspace=0.6)\nfor i,ct in enumerate(leg):\n    for j,loop in enumerate(loop_list):\n        ax = axes[i, j]\n        tmp = result[i, j]\n        apa = np.around(tmp[10,10]/tmp[-5:, :5].mean(), decimals=2)\n        ax.imshow(tmp, cmap='hot_r', vmax=0.8, vmin=0.2)\n        if i==0:\n            ax.set_title(f'{ctname[j]}\\n{apa}', fontsize=10)\n        else:\n            ax.set_title(apa, fontsize=10)\n            \nfor i,ct in enumerate(legname):\n    axes[i,0].set_ylabel(ct)\n        \nax.set_xticks([0, 20])\nax.set_xticklabels(['-100k', '+100k'])\nax.set_yticks([0, 20])\nax.set_yticklabels(['-100k', '+100k'])\n\n# plt.tight_layout()\n# plt.savefig(f'{indir}diff/plot/{group_name}_diffloop_apa.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/03.apa",
        "ref_id": "aggregate-peak-analysis-of-differential-loops",
        "headings": [
          "Aggregate peak analysis of differential loops"
        ]
      },
      "doc_lineno": 200002
    },
    {
      "source": "np.savez(f'{outdir}apa.npz', apa=result, leg=leg)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/03.apa",
        "ref_id": "aggregate-peak-analysis-of-differential-loops",
        "headings": [
          "Aggregate peak analysis of differential loops"
        ]
      },
      "doc_lineno": 210002
    }
  ],
  "hba/loop_majortype/04.corr": [
    {
      "source": "import cooler\nimport numpy as np\nimport pandas as pd\nfrom scipy.sparse import triu\nfrom scipy.stats import pearsonr, zscore, norm\nfrom multiprocessing import Pool\nfrom concurrent.futures import ProcessPoolExecutor, as_completed\nfrom ALLCools.mcds import MCDS\nfrom ALLCools.mcds.utilities import calculate_posterior_mc_frac\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm\nfrom matplotlib import cm as cm\nimport seaborn as sns\n\nmpl.style.use('default')\nmpl.rcParams['pdf.fonttype'] = 42\nmpl.rcParams['ps.fonttype'] = 42\nmpl.rcParams['font.family'] = 'sans-serif'\nmpl.rcParams['font.sans-serif'] = 'Helvetica'\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/04.corr",
        "ref_id": "correlation-between-loop-and-other-modalities",
        "headings": [
          "Correlation between loop and other modalities"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "leg = ['L23_IT', 'L4_IT', 'L5_IT', 'L6_IT', 'L6_IT_Car3', 'L56_NP', 'L6_CT', 'L6b', 'L5_ET', 'Amy', \n       'Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb_ChC', 'Sst', 'CHD7', \n       'MSN_D1', 'MSN_D2', 'Foxp2', 'SubCtx', \n       'ASC', 'ODC', 'OPC', 'MGC', 'PC', 'EC', 'VLMC'\n      ]\nlegname = ['L2/3-IT', 'L4-IT', 'L5-IT', 'L6-IT', 'L6-IT-Car3', 'L5/6-NP', 'L6-CT', 'L6b', 'L5-ET', 'Amy-Exc', \n       'Lamp5', 'Lamp5-Lhx6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb-ChC', 'Sst', 'Chd7', \n       'MSN-D1', 'MSN-D2', 'Foxp2', 'SubCtx-Cplx', \n       'ASC', 'ODC', 'OPC', 'MGC', 'PC', 'EC', 'VLMC'\n      ]\nleg2name = {xx:yy for xx,yy in zip(leg, legname)}\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/04.corr",
        "ref_id": "correlation-between-loop-and-other-modalities",
        "headings": [
          "Correlation between loop and other modalities"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "leg = {'exc': ['L23_IT', 'L4_IT', 'L5_IT', 'L6_IT', 'L6_IT_Car3', 'L56_NP', 'L6_CT', 'L6b', 'Amy'], \n       'inh': ['Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb_ChC', 'Sst', 'CHD7'], \n       'msn': ['MSN_D1', 'MSN_D2', 'Foxp2'], \n       'sub': ['SubCtx'], \n       'glia': ['ASC', 'ODC', 'OPC'], \n       'mgc': ['MGC'], \n       'smc': ['PC'], \n       'endo': ['EC'], \n       'fibro': ['VLMC'],\n      }\nleg['neu'] = leg['exc'] + leg['inh'] + leg['msn'] + leg['sub']\nleg['all'] = leg['neu'] + leg['glia'] + leg['mgc'] + leg['smc'] + leg['endo'] + leg['fibro']\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/04.corr",
        "ref_id": "correlation-between-loop-and-other-modalities",
        "headings": [
          "Correlation between loop and other modalities"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "group_name = 'neu'",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/04.corr",
        "ref_id": "correlation-between-loop-and-other-modalities",
        "headings": [
          "Correlation between loop and other modalities"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "leg = pd.Index(leg[group_name])\nlegname = leg.map(leg2name)\nres = 10000",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/04.corr",
        "ref_id": "correlation-between-loop-and-other-modalities",
        "headings": [
          "Correlation between loop and other modalities"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "indir = '/home/jzhou_salk_edu/sky_workdir/hba/loop_majortype/'\noutdir = f'/home/jzhou_salk_edu/sky_workdir/hba/loop_majortype/diff/{group_name}/'",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/04.corr",
        "ref_id": "correlation-between-loop-and-other-modalities",
        "headings": [
          "Correlation between loop and other modalities"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "chrom_size_path = f'{indir}hg38_with_chrl.main.chrom.sizes'\nchrom_sizes = cooler.read_chromsizes(chrom_size_path, all_names=True)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/04.corr",
        "ref_id": "correlation-between-loop-and-other-modalities",
        "headings": [
          "Correlation between loop and other modalities"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "loopall = pd.read_hdf(f'{outdir}merged_loop.hdf', key='data')\nloopall",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/04.corr",
        "ref_id": "correlation-between-loop-and-other-modalities",
        "headings": [
          "Correlation between loop and other modalities"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "loopq = pd.read_hdf(f'{outdir}loop_Q.hdf', key='data')\nloopt = pd.read_hdf(f'{outdir}loop_T.hdf', key='data')\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/04.corr",
        "ref_id": "correlation-between-loop-and-other-modalities",
        "headings": [
          "Correlation between loop and other modalities"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "idx1 = loopall[0] + '_' + (loopall[1] // res).astype(str)\nidx2 = loopall[3] + '_' + (loopall[4] // res).astype(str)",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/04.corr",
        "ref_id": "load-loop-mc",
        "headings": [
          "Correlation between loop and other modalities",
          "Load Loop mC"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "mcds = MCDS.open('/data/hba/mc_majortype/MajorType.mcds', var_dim='chrom5k')\nmcds['chrom10k'] = mcds['chrom5k_chrom'].to_pandas().astype(str) + '_' + (mcds['chrom5k_start'] // 10000).to_pandas().astype(str)\nmcds\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/04.corr",
        "ref_id": "load-loop-mc",
        "headings": [
          "Correlation between loop and other modalities",
          "Load Loop mC"
        ]
      },
      "doc_lineno": 150002
    },
    {
      "source": "mc = mcds['chrom5k_da'].sel(count_type='mc', mc_type='CGN').to_pandas().T\nmc['chrom10k'] = mcds['chrom10k'].to_pandas()\nmc = mc.groupby('chrom10k').sum().T\ncov = mcds['chrom5k_da'].sel(count_type='cov', mc_type='CGN').to_pandas().T\ncov['chrom10k'] = mcds['chrom10k'].to_pandas()\ncov = cov.groupby('chrom10k').sum().T\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/04.corr",
        "ref_id": "mcg",
        "headings": [
          "Correlation between loop and other modalities",
          "Load Loop mC",
          "mCG"
        ]
      },
      "doc_lineno": 170002
    },
    {
      "source": "binfilter = ['_'.join(xx.split('_')[:-1]) for xx in mc.columns]\nbinfilter = [(len(xx)<6) and (xx not in ['chrM','chrX','chrY']) for xx in binfilter]\nprint(np.sum(binfilter))\nmc = mc.loc[leg, binfilter]\ncov = cov.loc[leg, binfilter]\nprint(mc.shape, cov.shape)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/04.corr",
        "ref_id": "mcg",
        "headings": [
          "Correlation between loop and other modalities",
          "Load Loop mC",
          "mCG"
        ]
      },
      "doc_lineno": 180002
    },
    {
      "source": "ratio = calculate_posterior_mc_frac(mc.values, cov.values)\nratio = pd.DataFrame(ratio, index=leg, columns=mc.columns)\nratio\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/04.corr",
        "ref_id": "mcg",
        "headings": [
          "Correlation between loop and other modalities",
          "Load Loop mC",
          "mCG"
        ]
      },
      "doc_lineno": 190002
    },
    {
      "source": "loopcg = (ratio[idx1].values + ratio[idx2].values).T / 2\nloopcg = pd.DataFrame(loopcg, index=loopq.index, columns=leg)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/04.corr",
        "ref_id": "mcg",
        "headings": [
          "Correlation between loop and other modalities",
          "Load Loop mC",
          "mCG"
        ]
      },
      "doc_lineno": 200002
    },
    {
      "source": "loopall['mCG_corr'] = [pearsonr(xx,yy)[0] for xx,yy in zip(loopcg.values, loopq.values)]\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/04.corr",
        "ref_id": "mcg",
        "headings": [
          "Correlation between loop and other modalities",
          "Load Loop mC",
          "mCG"
        ]
      },
      "doc_lineno": 210002
    },
    {
      "source": "mc = mcds['chrom5k_da'].sel(count_type='mc', mc_type='CHN').to_pandas().T\nmc['chrom10k'] = mcds['chrom10k'].to_pandas()\nmc = mc.groupby('chrom10k').sum().T\ncov = mcds['chrom5k_da'].sel(count_type='cov', mc_type='CHN').to_pandas().T\ncov['chrom10k'] = mcds['chrom10k'].to_pandas()\ncov = cov.groupby('chrom10k').sum().T\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/04.corr",
        "ref_id": "mch",
        "headings": [
          "Correlation between loop and other modalities",
          "Load Loop mC",
          "mCH"
        ]
      },
      "doc_lineno": 230002
    },
    {
      "source": "mc = mc.loc[leg, binfilter]\ncov = cov.loc[leg, binfilter]\nprint(mc.shape, cov.shape)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/04.corr",
        "ref_id": "mch",
        "headings": [
          "Correlation between loop and other modalities",
          "Load Loop mC",
          "mCH"
        ]
      },
      "doc_lineno": 240002
    },
    {
      "source": "ratio = calculate_posterior_mc_frac(mc.values, cov.values)\nratio = pd.DataFrame(ratio, index=leg, columns=mc.columns)\nratio\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/04.corr",
        "ref_id": "mch",
        "headings": [
          "Correlation between loop and other modalities",
          "Load Loop mC",
          "mCH"
        ]
      },
      "doc_lineno": 250002
    },
    {
      "source": "loopch = (ratio[idx1].values + ratio[idx2].values).T / 2\nloopch = pd.DataFrame(loopch, index=loopq.index, columns=leg)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/04.corr",
        "ref_id": "mch",
        "headings": [
          "Correlation between loop and other modalities",
          "Load Loop mC",
          "mCH"
        ]
      },
      "doc_lineno": 260002
    },
    {
      "source": "loopall['mCH_corr'] = [pearsonr(xx,yy)[0] for xx,yy in zip(loopch.values, loopq.values)]\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/04.corr",
        "ref_id": "mch",
        "headings": [
          "Correlation between loop and other modalities",
          "Load Loop mC",
          "mCH"
        ]
      },
      "doc_lineno": 270002
    },
    {
      "source": "sig = pd.read_hdf('/home/jzhou_salk_edu/sky_workdir/hba/atac_majortype/cluster_atac_signal.hdf')\ncov = pd.read_hdf('/home/jzhou_salk_edu/sky_workdir/hba/atac_majortype/cluster_atac_cov.hdf')",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/04.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between loop and other modalities",
          "Load Loop mC",
          "ATAC"
        ]
      },
      "doc_lineno": 290002
    },
    {
      "source": "bins = pd.DataFrame(index=sig.columns)\nbins['chrom'] = bins.index.str.split('_').str[0]\nbins['start'] = (bins.index.str.split('_').str[1].astype(int) - 1) * 5000\nbins['chrom10k'] = bins['chrom'] + '_' + (bins['start'] // res).astype(str)",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/04.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between loop and other modalities",
          "Load Loop mC",
          "ATAC"
        ]
      },
      "doc_lineno": 300002
    },
    {
      "source": "sig = sig.groupby(by=bins['chrom10k'], axis=1).sum()\ncov = cov.groupby(by=bins['chrom10k']).sum()\natac = (sig/cov).fillna(0)",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/04.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between loop and other modalities",
          "Load Loop mC",
          "ATAC"
        ]
      },
      "doc_lineno": 310002
    },
    {
      "source": "legatac = leg[leg.isin(atac.index)]\natac = atac.loc[legatac]\natac = atac / atac.sum(axis=1)[:, None]",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/04.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between loop and other modalities",
          "Load Loop mC",
          "ATAC"
        ]
      },
      "doc_lineno": 320002
    },
    {
      "source": "loopatac = (atac[idx1].values + atac[idx2].values).T / 2\nloopatac = pd.DataFrame(loopatac, index=loopq.index, columns=legatac)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/04.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between loop and other modalities",
          "Load Loop mC",
          "ATAC"
        ]
      },
      "doc_lineno": 330002
    },
    {
      "source": "loopall['ATAC_corr'] = [pearsonr(xx,yy)[0] for xx,yy in zip(loopatac[legatac].values, loopq[legatac].values)]\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/04.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between loop and other modalities",
          "Load Loop mC",
          "ATAC"
        ]
      },
      "doc_lineno": 340002
    },
    {
      "source": "loopall\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/04.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between loop and other modalities",
          "Load Loop mC",
          "ATAC"
        ]
      },
      "doc_lineno": 360002
    },
    {
      "source": "loopall.to_hdf(f'{outdir}merged_loop.hdf', key='data')\nloopcg.to_hdf(f'{outdir}loop_mCG.hdf', key='data')\nloopch.to_hdf(f'{outdir}loop_mCH.hdf', key='data')\nloopatac.to_hdf(f'{outdir}loop_ATAC.hdf', key='data')\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/04.corr",
        "ref_id": "atac",
        "headings": [
          "Correlation between loop and other modalities",
          "Load Loop mC",
          "ATAC"
        ]
      },
      "doc_lineno": 370002
    }
  ],
  "hba/loop_majortype/05.plot": [
    {
      "source": "import cooler\nimport numpy as np\nimport pandas as pd\nfrom scipy.sparse import triu\nfrom scipy.stats import pearsonr, zscore, norm\nfrom multiprocessing import Pool\nfrom concurrent.futures import ProcessPoolExecutor, as_completed\nfrom ALLCools.mcds import MCDS\nfrom ALLCools.mcds.utilities import calculate_posterior_mc_frac\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm\nfrom matplotlib import cm as cm\nimport seaborn as sns\n\nmpl.style.use('default')\nmpl.rcParams['pdf.fonttype'] = 42\nmpl.rcParams['ps.fonttype'] = 42\nmpl.rcParams['font.family'] = 'sans-serif'\nmpl.rcParams['font.sans-serif'] = 'Helvetica'\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "plot-correlation-between-loop-and-mc-atac-rna",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "leg = ['L23_IT', 'L4_IT', 'L5_IT', 'L6_IT', 'L6_IT_Car3', 'L56_NP', 'L6_CT', 'L6b', 'L5_ET', 'Amy', \n       'Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb_ChC', 'Sst', 'CHD7', \n       'MSN_D1', 'MSN_D2', 'Foxp2', 'SubCtx', \n       'ASC', 'ODC', 'OPC', 'MGC', 'PC', 'EC', 'VLMC'\n      ]\nlegname = ['L2/3-IT', 'L4-IT', 'L5-IT', 'L6-IT', 'L6-IT-Car3', 'L5/6-NP', 'L6-CT', 'L6b', 'L5-ET', 'Amy-Exc', \n       'Lamp5', 'Lamp5-Lhx6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb-ChC', 'Sst', 'Chd7', \n       'MSN-D1', 'MSN-D2', 'Foxp2', 'SubCtx-Cplx', \n       'ASC', 'ODC', 'OPC', 'MGC', 'PC', 'EC', 'VLMC'\n      ]\nleg2name = {xx:yy for xx,yy in zip(leg, legname)}\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "plot-correlation-between-loop-and-mc-atac-rna",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "leg = {'exc': ['L23_IT', 'L4_IT', 'L5_IT', 'L6_IT', 'L6_IT_Car3', 'L56_NP', 'L6_CT', 'L6b', 'Amy'], \n       'inh': ['Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb_ChC', 'Sst', 'CHD7'], \n       'msn': ['MSN_D1', 'MSN_D2', 'Foxp2'], \n       'sub': ['SubCtx'], \n       'glia': ['ASC', 'ODC', 'OPC'], \n       'mgc': ['MGC'], \n       'smc': ['PC'], \n       'endo': ['EC'], \n       'fibro': ['VLMC'],\n      }\nleg['neu'] = leg['exc'] + leg['inh'] + leg['msn'] + leg['sub']\nleg['all'] = leg['neu'] + leg['glia'] + leg['mgc'] + leg['smc'] + leg['endo'] + leg['fibro']\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "plot-correlation-between-loop-and-mc-atac-rna",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "group_name = 'neu'",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "plot-correlation-between-loop-and-mc-atac-rna",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "leg = pd.Index(leg[group_name])\nlegname = leg.map(leg2name)\nres = 10000",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "plot-correlation-between-loop-and-mc-atac-rna",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "indir = '/home/jzhou_salk_edu/sky_workdir/hba/loop_majortype/'\noutdir = f'/home/jzhou_salk_edu/sky_workdir/hba/loop_majortype/diff/{group_name}/'",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "plot-correlation-between-loop-and-mc-atac-rna",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "loopall = pd.read_hdf(f'{outdir}merged_loop.hdf', key='data')\nloopall",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "plot-correlation-between-loop-and-mc-atac-rna",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "loopq = pd.read_hdf(f'{outdir}loop_Q.hdf', key='data')\nloopt = pd.read_hdf(f'{outdir}loop_T.hdf', key='data')\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "plot-correlation-between-loop-and-mc-atac-rna",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "loopcg = pd.read_hdf(f'{outdir}loop_mCG.hdf', key='data')\nloopch = pd.read_hdf(f'{outdir}loop_mCH.hdf', key='data')\nloopatac = pd.read_hdf(f'{outdir}loop_ATAC.hdf', key='data')\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "plot-correlation-between-loop-and-mc-atac-rna",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "thres1 = norm.isf(0.025)\nthres2 = norm.isf(0.15)\nprint(thres1, thres2)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "def t2z(x):\n    return x * (groupT.max() - groupT.min()) / (len(groupT) - 1) + groupT.min()\ndef z2t(x):\n    return (x - groupT.min()) * (len(groupT) - 1) / (groupT.max() - groupT.min())\ndef q2z(x):\n    return x * (groupQ.max() - groupQ.min()) / (len(groupQ) - 1) + groupQ.min()\ndef z2q(x):\n    return (x - groupQ.min()) * (len(groupQ) - 1) / (groupQ.max() - groupQ.min())\n    ",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 150002
    },
    {
      "source": "loopall['Tgroup'], groupT = pd.cut(np.clip(zscore(loopall['Tanova']), -1, 10), 100, labels=False, retbins=True)\nloopall['Qgroup'], groupQ = pd.cut(np.clip(zscore(loopall['Qanova']), -1, 10), 100, labels=False, retbins=True)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 160002
    },
    {
      "source": "xx1 = [x for x in range(int(np.around(z2q(thres1))), 100)]\nyy1 = [z2t(thres1**2 / q2z(x)) for x in xx1]\nyy2 = [x for x in range(int(np.around(z2t(thres1))), 100)][::-1]\nxx2 = [z2q(thres1**2 / t2z(x)) for x in yy2]\nxx = xx2 + xx1\nyy = yy2 + yy1\nt1 = z2t(thres1)\nt2 = z2q(thres1)\nt3 = z2t(thres2)\nt4 = z2q(thres2)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 170002
    },
    {
      "source": "tmp = loopall.groupby(['Tgroup','Qgroup'])['mCG_corr'].mean()\ngroupcgcorr = np.zeros((100, 100)) / 0\ngroupcgcorr[(tmp.index.get_level_values('Tgroup'), tmp.index.get_level_values('Qgroup'))] = tmp.values\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 180002
    },
    {
      "source": "tmp = loopall.groupby(['Tgroup','Qgroup'])['mCH_corr'].mean()\ngroupchcorr = np.zeros((100, 100)) / 0\ngroupchcorr[(tmp.index.get_level_values('Tgroup'), tmp.index.get_level_values('Qgroup'))] = tmp.values\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 190002
    },
    {
      "source": "tmp = loopall.groupby(['Tgroup','Qgroup'])['ATAC_corr'].mean()\ngroupataccorr = np.zeros((100, 100)) / 0\ngroupataccorr[(tmp.index.get_level_values('Tgroup'), tmp.index.get_level_values('Qgroup'))] = tmp.values\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 200002
    },
    {
      "source": "tmp = loopall.groupby(['Tgroup','Qgroup'])['mCG_corr'].count()\ngroupcount = np.zeros((100, 100))\ngroupcount[(tmp.index.get_level_values('Tgroup'), tmp.index.get_level_values('Qgroup'))] = tmp.values + 1\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 210002
    },
    {
      "source": "cmap = mpl.cm.bwr\ncmap.set_bad('black', 1.0)\n\nfig, axes = plt.subplots(1, 4, figsize=(12,3), sharex='all', sharey='all', dpi=300)\nax = axes[0]\nplot = ax.imshow(groupcgcorr, vmin=-1, vmax=1, cmap=cmap)\nax.plot([t2, t2], [t1, 99], color='k')\nax.plot([t2, 99], [t1, t1], color='k')\nax.plot(xx, yy, color='k')\nax.plot([t4, t4], [t3, 99], color='k')\nax.plot([t4, 99], [t3, t3], color='k')\n\nfig.colorbar(plot, ax=ax, shrink=0.5, fraction=0.1)\nax.set_xlabel('Zscore Q anova')\nax.set_ylabel('Zscore T anova')\n\nax = axes[1]\nplot = ax.imshow(groupchcorr, vmin=-1, vmax=1, cmap=cmap)\nax.plot([t2, t2], [t1, 99], color='k')\nax.plot([t2, 99], [t1, t1], color='k')\nax.plot(xx, yy, color='k')\nax.plot([t4, t4], [t3, 99], color='k')\nax.plot([t4, 99], [t3, t3], color='k')\n\nfig.colorbar(plot, ax=ax, shrink=0.5, fraction=0.1)\nax.set_xlabel('Zscore Q anova')\n\nax = axes[2]\nplot = ax.imshow(groupataccorr, vmin=-1, vmax=1, cmap=cmap)\nax.plot([t2, t2], [t1, 99], color='k')\nax.plot([t2, 99], [t1, t1], color='k')\nax.plot(xx, yy, color='k')\nax.plot([t4, t4], [t3, 99], color='k')\nax.plot([t4, 99], [t3, t3], color='k')\n\nfig.colorbar(plot, ax=ax, shrink=0.5, fraction=0.1)\nax.set_xlabel('Zscore Q anova')\n\nax = axes[3]\nplot = ax.imshow(groupcount, cmap='Reds', norm=LogNorm(vmin=1))\nfig.colorbar(plot, ax=ax, shrink=0.5, fraction=0.1)\nax.set_xticks(np.arange(-0.5, 100.5, 20))\nax.set_yticks(np.arange(-0.5, 100.5, 20))\nax.set_xticklabels(np.around(groupQ[np.arange(0,100.5,20).astype(int)], decimals=1))\nax.set_yticklabels(np.around(groupT[np.arange(0,100.5,20).astype(int)], decimals=1))\nax.plot([t2, t2], [t1, 99], color='k')\nax.plot([t2, 99], [t1, t1], color='k')\nax.plot(xx, yy, color='k')\nax.plot([t4, t4], [t3, 99], color='k')\nax.plot([t4, 99], [t3, t3], color='k')\n\nax.set_xlabel('Zscore Q anova')\nplt.tight_layout()\n# plt.savefig(f'majortype_{group_name}_diffloop_QTcorr.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 220002
    },
    {
      "source": "loopall['Tgroup'], groupT = pd.cut(zscore(np.log(loopall['Tanova'])), 100, labels=False, retbins=True)\nloopall['Qgroup'], groupQ = pd.cut(zscore(np.log(loopall['Qanova'])), 100, labels=False, retbins=True)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 240002
    },
    {
      "source": "xx1 = [x for x in range(int(np.around(z2q(thres1))), 100)]\nyy1 = [z2t(thres1**2 / q2z(x)) for x in xx1]\nyy2 = [x for x in range(int(np.around(z2t(thres1))), 100)][::-1]\nxx2 = [z2q(thres1**2 / t2z(x)) for x in yy2]\nxx = xx2 + xx1\nyy = yy2 + yy1\nt1 = z2t(thres1)\nt2 = z2q(thres1)\nt3 = z2t(thres2)\nt4 = z2q(thres2)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 250002
    },
    {
      "source": "tmp = loopall.groupby(['Tgroup','Qgroup'])['mCG_corr'].mean()\ngroupcgcorr = np.zeros((100, 100)) / 0\ngroupcgcorr[(tmp.index.get_level_values('Tgroup'), tmp.index.get_level_values('Qgroup'))] = tmp.values\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 260002
    },
    {
      "source": "tmp = loopall.groupby(['Tgroup','Qgroup'])['mCH_corr'].mean()\ngroupchcorr = np.zeros((100, 100)) / 0\ngroupchcorr[(tmp.index.get_level_values('Tgroup'), tmp.index.get_level_values('Qgroup'))] = tmp.values\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 270002
    },
    {
      "source": "tmp = loopall.groupby(['Tgroup','Qgroup'])['ATAC_corr'].mean()\ngroupataccorr = np.zeros((100, 100)) / 0\ngroupataccorr[(tmp.index.get_level_values('Tgroup'), tmp.index.get_level_values('Qgroup'))] = tmp.values\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 280002
    },
    {
      "source": "tmp = loopall.groupby(['Tgroup','Qgroup'])['mCG_corr'].count()\ngroupcount = np.zeros((100, 100))\ngroupcount[(tmp.index.get_level_values('Tgroup'), tmp.index.get_level_values('Qgroup'))] = tmp.values + 1\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 290002
    },
    {
      "source": "cmap = mpl.cm.bwr\ncmap.set_bad('black', 1.0)\n\nfig, axes = plt.subplots(1, 4, figsize=(12,3), sharex='all', sharey='all', dpi=300)\nax = axes[0]\nplot = ax.imshow(groupcgcorr, vmin=-1, vmax=1, cmap=cmap)\nax.plot([t2, t2], [t1, 99], color='k')\nax.plot([t2, 99], [t1, t1], color='k')\nax.plot(xx, yy, color='k')\nax.plot([t4, t4], [t3, 99], color='k')\nax.plot([t4, 99], [t3, t3], color='k')\n\nfig.colorbar(plot, ax=ax, shrink=0.5, fraction=0.1)\nax.set_xlabel('Zscore Q anova')\nax.set_ylabel('Zscore T anova')\n\nax = axes[1]\nplot = ax.imshow(groupchcorr, vmin=-1, vmax=1, cmap=cmap)\nax.plot([t2, t2], [t1, 99], color='k')\nax.plot([t2, 99], [t1, t1], color='k')\nax.plot(xx, yy, color='k')\nax.plot([t4, t4], [t3, 99], color='k')\nax.plot([t4, 99], [t3, t3], color='k')\n\nfig.colorbar(plot, ax=ax, shrink=0.5, fraction=0.1)\nax.set_xlabel('Zscore Q anova')\n\nax = axes[2]\nplot = ax.imshow(groupataccorr, vmin=-1, vmax=1, cmap=cmap)\nax.plot([t2, t2], [t1, 99], color='k')\nax.plot([t2, 99], [t1, t1], color='k')\nax.plot(xx, yy, color='k')\nax.plot([t4, t4], [t3, 99], color='k')\nax.plot([t4, 99], [t3, t3], color='k')\n\nfig.colorbar(plot, ax=ax, shrink=0.5, fraction=0.1)\nax.set_xlabel('Zscore Q anova')\n\nax = axes[3]\nplot = ax.imshow(groupcount, cmap='Reds', norm=LogNorm(vmin=1))\nfig.colorbar(plot, ax=ax, shrink=0.5, fraction=0.1)\nax.set_xticks(np.arange(-0.5, 100.5, 20))\nax.set_yticks(np.arange(-0.5, 100.5, 20))\nax.set_xticklabels(np.around(groupQ[np.arange(0,100.5,20).astype(int)], decimals=1))\nax.set_yticklabels(np.around(groupT[np.arange(0,100.5,20).astype(int)], decimals=1))\nax.plot([t2, t2], [t1, 99], color='k')\nax.plot([t2, 99], [t1, t1], color='k')\nax.plot(xx, yy, color='k')\nax.plot([t4, t4], [t3, 99], color='k')\nax.plot([t4, 99], [t3, t3], color='k')\n\nax.set_xlabel('Zscore Q anova')\nplt.tight_layout()\n# plt.savefig(f'majortype_{group_name}_diffloop_logQTcorr.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 300002
    },
    {
      "source": "selb = ((zscore(loopall['Qanova'])>thres2) & (zscore(loopall['Tanova'])>thres2))\nprint(selb.sum())",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 320002
    },
    {
      "source": "selc = ((zscore(loopall['Qanova'])<0) & (zscore(loopall['Tanova'])<0))\nprint(selc.sum())",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 330002
    },
    {
      "source": "loopall['Qave_group'] = pd.cut(zscore(loopq.mean(axis=1)), 100, labels=False)\nloopall['Tave_group'] = pd.cut(zscore(loopt.mean(axis=1)), 100, labels=False)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 340002
    },
    {
      "source": "loopall['group'] = np.zeros(loopall.shape[0])\nloopall.loc[selb, 'group'] = 1\nloopall.loc[selc, 'group'] = -1",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 350002
    },
    {
      "source": "sel = [[], []]\nfor _,tmp in loopall.loc[loopall['group']!=0].groupby(['Qave_group','Tave_group']):\n    t = tmp['group'].value_counts()\n    if (len(t)==2) and t.min()>0:\n        t = t.min()\n        for i,(_,xx) in enumerate(tmp.groupby('group')):\n            np.random.seed(0)\n            if xx.shape[0]>t:\n                sel[i].append(np.random.choice(xx.index, t, False))\n            else:\n                sel[i].append(xx.index)\n    ",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 360002
    },
    {
      "source": "selpos = np.concatenate(sel[0])\nselneg = np.concatenate(sel[1])\nprint(selpos.shape[0], selneg.shape[0])\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 370002
    },
    {
      "source": "fig, axes = plt.subplots(1, 2, figsize=(8,3), dpi=300)\n\nax = axes[0]\nsns.histplot(loopq.loc[selb].mean(axis=1), ax=ax)\nsns.histplot(loopq.loc[selc].mean(axis=1), ax=ax)\n\nax = axes[1]\nsns.histplot(loopq.loc[selpos].mean(axis=1), ax=ax)\nsns.histplot(loopq.loc[selneg].mean(axis=1), ax=ax)\n\nplt.tight_layout()",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 380002
    },
    {
      "source": "fig, axes = plt.subplots(1, 2, figsize=(8,3), dpi=300)\n\nax = axes[0]\nsns.histplot(loopt.loc[selb].mean(axis=1), ax=ax)\nsns.histplot(loopt.loc[selc].mean(axis=1), ax=ax)\n\nax = axes[1]\nsns.histplot(loopt.loc[selpos].mean(axis=1), ax=ax)\nsns.histplot(loopt.loc[selneg].mean(axis=1), ax=ax)\n\nplt.tight_layout()",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 390002
    },
    {
      "source": "loopall.loc[np.sort(selpos), [0,1,2,3,4,5]].to_csv(f'{outdir}{group_name}_diffloop.bedpe', header=False, index=False, sep='\\t')\nloopall.loc[np.sort(selneg), [0,1,2,3,4,5]].to_csv(f'{outdir}{group_name}_consloop.bedpe', header=False, index=False, sep='\\t')\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 400002
    },
    {
      "source": "tmpcg = loopcg.loc[selb].values\ntmpcg = zscore(tmpcg, axis=1)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 420002
    },
    {
      "source": "tmpch = loopch.loc[selb].values\ntmpch = zscore(tmpch, axis=1)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 430002
    },
    {
      "source": "tmpatac = loopatac.loc[selb].values\ntmpatac = zscore(tmpatac, axis=1)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 440002
    },
    {
      "source": "tmp3c = loopq.loc[selb].values\ntmp3c = zscore(tmp3c, axis=1)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 450002
    },
    {
      "source": "diffloop = loopall.loc[selb, [0,1,4]]\ndiffloop[[1, 4]] = diffloop[[1, 4]] // res\ndiffloop = diffloop.reset_index()\ndiffloop",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 460002
    },
    {
      "source": "np.random.seed(0)\nsel = np.random.choice(np.arange(len(tmp3c)), 2000, False)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 480002
    },
    {
      "source": "cg = sns.clustermap(tmp3c[sel], cmap='bwr', vmin=-3, vmax=3, metric='cosine', xticklabels=leg, yticklabels=[], figsize=(6,6))\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 490002
    },
    {
      "source": "rorder = cg.dendrogram_row.reordered_ind.copy()\ncorder = cg.dendrogram_col.reordered_ind.copy()",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 500002
    },
    {
      "source": "fig, axes = plt.subplots(1, 4, sharey='all', figsize=(12,5), dpi=300)\n\nax = axes[0]\nax.imshow(tmp3c[np.ix_(sel[rorder], corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('Interaction', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\nax.set_yticks([])\nax.set_ylabel(f'{tmp3c.shape[0]} Diff Loop')\n\nax = axes[1]\nax.imshow(tmpatac[np.ix_(sel[rorder], corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('ATAC', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\n\nax = axes[2]\nax.imshow(tmpcg[np.ix_(sel[rorder], corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('mCG', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\n\nax = axes[3]\nax.imshow(tmpch[np.ix_(sel[rorder], corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('mCH', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\n\nplt.tight_layout()\n# plt.savefig(f'majortype_{group_name}_diffloop_3C_mC.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 510002
    },
    {
      "source": "fig, ax = plt.subplots(figsize=(2,2), dpi=300)\nsns.violinplot([loopall.loc[diffloop['index'], 'mCH_corr'], \n                loopall.loc[diffloop['index'], 'mCG_corr'], \n                loopall.loc[diffloop['index'], 'ATAC_corr']], ax=ax)\nax.set_xticklabels(['mCG', 'mCH', 'ATAC'])\nax.set_ylabel('PCC with Interaction')\n# plt.savefig(f'majortype_{group_name}_diffloop_epicorr.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 520002
    },
    {
      "source": "print(loopall.loc[diffloop['index'], 'mCH_corr'].median(),\n      loopall.loc[diffloop['index'], 'mCG_corr'].median(),\n      loopall.loc[diffloop['index'], 'ATAC_corr'].median(),\n      diffloop.shape[0]\n     )\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 530002
    },
    {
      "source": "loopall.reset_index().loc[selb, [0,2,4,'index']].to_csv(f'{outdir}diff_interloop.bed', sep='\\t', index=False, header=False)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 550002
    },
    {
      "source": "!bedtools intersect -wa -wb -a ~/sky_workdir/hba/ref/gencode.v33.gene.slop2k.bed -b diff_interloop.bed -f 1 | gzip > gene_in_diffloop.txt.gz\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 560002
    },
    {
      "source": "corr_all = []",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "loop-corr-with-mc",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Loop Corr with mC"
        ]
      },
      "doc_lineno": 580002
    },
    {
      "source": "expr = pd.read_hdf('/home/jzhou_salk_edu/sky_workdir/hba/rna_majortype/cluster_expr.hdf')\nstats = pd.read_hdf(f'/home/jzhou_salk_edu/sky_workdir/hba/rna_majortype/{group_name}_deg_stats.hdf')\ngenefilter = (stats['stats']>0)\nexpr = expr.loc[:, genefilter]\nstats = stats.loc[genefilter]\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-within-loop",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs All Gene within Loop"
        ]
      },
      "doc_lineno": 600002
    },
    {
      "source": "data = pd.read_csv(f'{outdir}gene_in_diffloop.txt', usecols=(3,9), sep='\\t', header=None, index_col=None)\ndata.columns = ['gene_id', 'loop_id']\ndata = data.loc[data['gene_id'].isin(expr.columns)]\nprint(data.shape[0])\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-within-loop",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs All Gene within Loop"
        ]
      },
      "doc_lineno": 610002
    },
    {
      "source": "tmp3c = loopq.loc[data['loop_id'].values].values\ntmp3c = zscore(tmp3c, axis=1)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-within-loop",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs All Gene within Loop"
        ]
      },
      "doc_lineno": 620002
    },
    {
      "source": "tmprna = expr.loc[leg, data['gene_id']].T.values\n# stdev = tmprna.std(axis=1)\ntmprna = zscore(tmprna, axis=1)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-within-loop",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs All Gene within Loop"
        ]
      },
      "doc_lineno": 630002
    },
    {
      "source": "np.random.seed(0)\nsel = np.random.choice(np.arange(len(tmp3c)), 2000, False)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-within-loop",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs All Gene within Loop"
        ]
      },
      "doc_lineno": 640002
    },
    {
      "source": "cg = sns.clustermap(tmp3c[sel], cmap='bwr', vmin=-3, vmax=3, metric='cosine', xticklabels=leg, yticklabels=[], figsize=(6,6))\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-within-loop",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs All Gene within Loop"
        ]
      },
      "doc_lineno": 650002
    },
    {
      "source": "rorder = cg.dendrogram_row.reordered_ind.copy()\ncorder = cg.dendrogram_col.reordered_ind.copy()",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-within-loop",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs All Gene within Loop"
        ]
      },
      "doc_lineno": 660002
    },
    {
      "source": "fig, axes = plt.subplots(1, 2, sharey='all', figsize=(6,5), dpi=300)\n\nax = axes[0]\nax.imshow(tmp3c[np.ix_(sel[rorder], corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('Interaction', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\nax.set_yticks([])\nax.set_ylabel(f'{np.unique(data[\"loop_id\"]).shape[0]} Diff Loop')\n\nax = axes[1]\nax.imshow(tmprna[np.ix_(sel[rorder], corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('RNA', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\nax.set_ylabel(f'{np.unique(data[\"gene_id\"]).shape[0]} Gene')\n\nplt.tight_layout()\n# plt.savefig(f'majortype_{group_name}_diffloop_3C_RNA_allwithin.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-within-loop",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs All Gene within Loop"
        ]
      },
      "doc_lineno": 670002
    },
    {
      "source": "corr = np.array([pearsonr(xx, yy)[0] for xx,yy in zip(tmp3c, tmprna)])\ncorr_all.append(corr)",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-within-loop",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs All Gene within Loop"
        ]
      },
      "doc_lineno": 680002
    },
    {
      "source": "from scipy.stats import rankdata\n\ndeg = np.zeros(genefilter.shape[0])\nfor i in range(len(leg)-1):\n    for j in range(i+1, len(leg)):\n        tmp = np.load(f'/home/jzhou_salk_edu/sky_workdir/hba/rna_majortype/DEG/{leg[i]}-{leg[j]}.npz')\n        # deg[np.logical_and(np.abs(tmp['fc'])>1, tmp['fdr']<1e-3)] = 1\n        rank = rankdata(tmp['fdr'])\n        deg[rank<=100] = 1\n\nprint(deg.sum())",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-within-loop",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs DEG within Loop"
        ]
      },
      "doc_lineno": 710002
    },
    {
      "source": "selp = data['gene_id'].isin(genefilter.index[deg==1])\ndata = data.loc[selp]",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-within-loop",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs DEG within Loop"
        ]
      },
      "doc_lineno": 720002
    },
    {
      "source": "tmp3c = tmp3c[selp]\ntmprna = tmprna[selp]",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-within-loop",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs DEG within Loop"
        ]
      },
      "doc_lineno": 730002
    },
    {
      "source": "np.random.seed(0)\nsel = np.random.choice(np.arange(len(tmp3c)), 2000, False)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-within-loop",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs DEG within Loop"
        ]
      },
      "doc_lineno": 740002
    },
    {
      "source": "cg = sns.clustermap(tmp3c[sel], cmap='bwr', vmin=-3, vmax=3, metric='cosine', xticklabels=leg, yticklabels=[], figsize=(6,6))\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-within-loop",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs DEG within Loop"
        ]
      },
      "doc_lineno": 750002
    },
    {
      "source": "rorder = cg.dendrogram_row.reordered_ind.copy()\ncorder = cg.dendrogram_col.reordered_ind.copy()",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-within-loop",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs DEG within Loop"
        ]
      },
      "doc_lineno": 760002
    },
    {
      "source": "fig, axes = plt.subplots(1, 2, sharey='all', figsize=(6,5), dpi=300)\n\nax = axes[0]\nax.imshow(tmp3c[np.ix_(sel[rorder], corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('Interaction', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\nax.set_yticks([])\nax.set_ylabel(f'{np.unique(data[\"loop_id\"]).shape[0]} Diff Loop')\n\nax = axes[1]\nax.imshow(tmprna[np.ix_(sel[rorder], corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('RNA', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\nax.set_ylabel(f'{np.unique(data[\"gene_id\"]).shape[0]} Gene')\n\nplt.tight_layout()\n# plt.savefig(f'majortype_{group_name}_diffloop_3C_RNA_degwithin.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-within-loop",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs DEG within Loop"
        ]
      },
      "doc_lineno": 770002
    },
    {
      "source": "corr = np.array([pearsonr(xx, yy)[0] for xx,yy in zip(tmp3c, tmprna)])\ncorr_all.append(corr)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-within-loop",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs DEG within Loop"
        ]
      },
      "doc_lineno": 780002
    },
    {
      "source": "data = pd.read_csv(f'/home/jzhou_salk_edu/sky_workdir/hba/ref/hg38.main.10kbin.TSS.slop2k.txt', sep='\\t', header=None, index_col=None)\ndata[3] = data[0] + '-' + (data[1] // res).astype(str)\nbin2gene = {xx:[] for xx in data[3].values}\ndata = data[data[6].isin(expr.columns)]\nfor xx,yy in data[[3,6]].values:\n    bin2gene[xx].append(yy)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-tss",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs All Gene TSS"
        ]
      },
      "doc_lineno": 810002
    },
    {
      "source": "selloop = []\nselgene = []\nfor loop in diffloop[[0, 1, 4, 'index']].values:\n    xx = f'{loop[0]}-{loop[1]}'\n    yy = f'{loop[0]}-{loop[2]}'\n    zz = bin2gene[xx] + bin2gene[yy]\n    if len(zz)>0:\n        selloop.append(np.repeat([loop[3]], len(zz)))\n        selgene.append(zz)\n\nselloop = np.concatenate(selloop)\nselgene = np.concatenate(selgene)\nprint(len(selloop), len(selgene))\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-tss",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs All Gene TSS"
        ]
      },
      "doc_lineno": 820002
    },
    {
      "source": "tmp3c = loopq.loc[selloop].values\ntmp3c = zscore(tmp3c, axis=1)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-tss",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs All Gene TSS"
        ]
      },
      "doc_lineno": 830002
    },
    {
      "source": "tmprna = expr.loc[leg, selgene].T.values\n# stdev = tmprna.std(axis=1)\ntmprna = zscore(tmprna, axis=1)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-tss",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs All Gene TSS"
        ]
      },
      "doc_lineno": 840002
    },
    {
      "source": "np.random.seed(0)\nsel = np.random.choice(np.arange(len(tmp3c)), 2000, False)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-tss",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs All Gene TSS"
        ]
      },
      "doc_lineno": 850002
    },
    {
      "source": "cg = sns.clustermap(tmp3c[sel], cmap='bwr', vmin=-3, vmax=3, metric='cosine', xticklabels=leg, yticklabels=[], figsize=(6,6))\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-tss",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs All Gene TSS"
        ]
      },
      "doc_lineno": 860002
    },
    {
      "source": "rorder = cg.dendrogram_row.reordered_ind.copy()\ncorder = cg.dendrogram_col.reordered_ind.copy()",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-tss",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs All Gene TSS"
        ]
      },
      "doc_lineno": 870002
    },
    {
      "source": "fig, axes = plt.subplots(1, 2, sharey='all', figsize=(6,5), dpi=300)\n\nax = axes[0]\nax.imshow(tmp3c[np.ix_(sel[rorder], corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('Interaction', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\nax.set_yticks([])\nax.set_ylabel(f'{np.unique(selloop).shape[0]} Diff Loop')\n\nax = axes[1]\nax.imshow(tmprna[np.ix_(sel[rorder], corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('RNA', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\nax.set_ylabel(f'{np.unique(selgene).shape[0]} Gene')\n\nplt.tight_layout()\n# plt.savefig(f'majortype_{group_name}_diffloop_3C_RNA_alltss.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-tss",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs All Gene TSS"
        ]
      },
      "doc_lineno": 880002
    },
    {
      "source": "corr = np.array([pearsonr(xx, yy)[0] for xx,yy in zip(tmp3c, tmprna)])\ncorr_all.append(corr)",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-tss",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs All Gene TSS"
        ]
      },
      "doc_lineno": 890002
    },
    {
      "source": "selp = pd.Index(selgene).isin(genefilter.index[deg==1])",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-tss",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs DEG TSS"
        ]
      },
      "doc_lineno": 920002
    },
    {
      "source": "selgene = selgene[selp]\nselloop = selloop[selp]",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-tss",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs DEG TSS"
        ]
      },
      "doc_lineno": 930002
    },
    {
      "source": "tmp3c = tmp3c[selp]\ntmprna = tmprna[selp]",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-tss",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs DEG TSS"
        ]
      },
      "doc_lineno": 940002
    },
    {
      "source": "np.random.seed(0)\nsel = np.random.choice(np.arange(len(tmp3c)), 2000, False)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-tss",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs DEG TSS"
        ]
      },
      "doc_lineno": 950002
    },
    {
      "source": "cg = sns.clustermap(tmp3c[sel], cmap='bwr', vmin=-3, vmax=3, metric='cosine', xticklabels=leg, yticklabels=[], figsize=(6,6))\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-tss",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs DEG TSS"
        ]
      },
      "doc_lineno": 960002
    },
    {
      "source": "rorder = cg.dendrogram_row.reordered_ind.copy()\ncorder = cg.dendrogram_col.reordered_ind.copy()",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-tss",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs DEG TSS"
        ]
      },
      "doc_lineno": 970002
    },
    {
      "source": "fig, axes = plt.subplots(1, 2, sharey='all', figsize=(6,5), dpi=300)\n\nax = axes[0]\nax.imshow(tmp3c[np.ix_(sel[rorder], corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('Interaction', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\nax.set_yticks([])\nax.set_ylabel(f'{np.unique(selloop).shape[0]} Diff Loop')\n\nax = axes[1]\nax.imshow(tmprna[np.ix_(sel[rorder], corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('RNA', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\nax.set_ylabel(f'{np.unique(selgene).shape[0]} DEG')\n\nplt.tight_layout()\n# plt.savefig(f'majortype_{group_name}_diffloop_3C_RNA_degtss.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-tss",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs DEG TSS"
        ]
      },
      "doc_lineno": 980002
    },
    {
      "source": "corr = np.array([pearsonr(xx, yy)[0] for xx,yy in zip(tmp3c, tmprna)])\ncorr_all.append(corr)",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-tss",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs DEG TSS"
        ]
      },
      "doc_lineno": 990002
    },
    {
      "source": "data = pd.read_csv(f'/home/jzhou_salk_edu/sky_workdir/hba/ref/hg38.main.10kbin.gene.slop2k.txt', sep='\\t', header=None, index_col=None)\ndata[3] = data[0] + '-' + (data[1] // res).astype(str)\nbin2gene = {xx:[] for xx in data[3].values}\ndata = data[data[6].isin(expr.columns)]\nfor xx,yy in data[[3,6]].values:\n    bin2gene[xx].append(yy)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-body",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs All Gene body"
        ]
      },
      "doc_lineno": 1020002
    },
    {
      "source": "selloop = []\nselgene = []\nfor loop in diffloop[[0, 1, 4, 'index']].values:\n    xx = f'{loop[0]}-{loop[1]}'\n    yy = f'{loop[0]}-{loop[2]}'\n    zz = bin2gene[xx] + bin2gene[yy]\n    if len(zz)>0:\n        selloop.append(np.repeat([loop[3]], len(zz)))\n        selgene.append(zz)\n\nselloop = np.concatenate(selloop)\nselgene = np.concatenate(selgene)\nprint(len(selloop), len(selgene))\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-body",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs All Gene body"
        ]
      },
      "doc_lineno": 1030002
    },
    {
      "source": "tmp3c = loopq.loc[selloop].values\ntmp3c = zscore(tmp3c, axis=1)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-body",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs All Gene body"
        ]
      },
      "doc_lineno": 1040002
    },
    {
      "source": "tmprna = expr.loc[leg, selgene].T.values\nstdev = tmprna.std(axis=1)\ntmprna = zscore(tmprna, axis=1)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-body",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs All Gene body"
        ]
      },
      "doc_lineno": 1050002
    },
    {
      "source": "np.random.seed(0)\nsel = np.random.choice(np.arange(len(tmp3c)), 2000, False)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-body",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs All Gene body"
        ]
      },
      "doc_lineno": 1060002
    },
    {
      "source": "cg = sns.clustermap(tmp3c[sel], cmap='bwr', vmin=-3, vmax=3, metric='cosine', xticklabels=leg, yticklabels=[], figsize=(6,6))\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-body",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs All Gene body"
        ]
      },
      "doc_lineno": 1070002
    },
    {
      "source": "rorder = cg.dendrogram_row.reordered_ind.copy()\ncorder = cg.dendrogram_col.reordered_ind.copy()",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-body",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs All Gene body"
        ]
      },
      "doc_lineno": 1080002
    },
    {
      "source": "fig, axes = plt.subplots(1, 2, sharey='all', figsize=(6,5), dpi=300)\n\nax = axes[0]\nax.imshow(tmp3c[np.ix_(sel[rorder], corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('Interaction', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\nax.set_yticks([])\nax.set_ylabel(f'{np.unique(selloop).shape[0]} Diff Loop')\n\nax = axes[1]\nax.imshow(tmprna[np.ix_(sel[rorder], corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('RNA', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\nax.set_ylabel(f'{np.unique(selgene).shape[0]} Gene')\n\nplt.tight_layout()\n# plt.savefig(f'majortype_{group_name}_diffloop_3C_RNA_allbody.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-body",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs All Gene body"
        ]
      },
      "doc_lineno": 1090002
    },
    {
      "source": "corr = np.array([pearsonr(xx, yy)[0] for xx,yy in zip(tmp3c, tmprna)])\ncorr_all.append(corr)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-all-gene-body",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs All Gene body"
        ]
      },
      "doc_lineno": 1100002
    },
    {
      "source": "selp = pd.Index(selgene).isin(genefilter.index[deg==1])",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-body",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs DEG body"
        ]
      },
      "doc_lineno": 1130002
    },
    {
      "source": "selgene = selgene[selp]\nselloop = selloop[selp]",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-body",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs DEG body"
        ]
      },
      "doc_lineno": 1140002
    },
    {
      "source": "tmp3c = tmp3c[selp]\ntmprna = tmprna[selp]",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-body",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs DEG body"
        ]
      },
      "doc_lineno": 1150002
    },
    {
      "source": "np.random.seed(0)\nsel = np.random.choice(np.arange(len(tmp3c)), 2000, False)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-body",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs DEG body"
        ]
      },
      "doc_lineno": 1160002
    },
    {
      "source": "cg = sns.clustermap(tmp3c[sel], cmap='bwr', vmin=-3, vmax=3, metric='cosine', xticklabels=leg, yticklabels=[], figsize=(6,6))\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-body",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs DEG body"
        ]
      },
      "doc_lineno": 1170002
    },
    {
      "source": "rorder = cg.dendrogram_row.reordered_ind.copy()\ncorder = cg.dendrogram_col.reordered_ind.copy()",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-body",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs DEG body"
        ]
      },
      "doc_lineno": 1180002
    },
    {
      "source": "fig, axes = plt.subplots(1, 2, sharey='all', figsize=(6,5), dpi=300)\n\nax = axes[0]\nax.imshow(tmp3c[np.ix_(sel[rorder], corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('Interaction', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\nax.set_yticks([])\nax.set_ylabel(f'{np.unique(selloop).shape[0]} Diff Loop')\n\nax = axes[1]\nax.imshow(tmprna[np.ix_(sel[rorder], corder)], cmap='bwr', aspect='auto', vmin=-3, vmax=3, interpolation='none')\nax.set_title('RNA', fontsize=10)\n# sns.despine(ax=ax, left=True, bottom=True)\nax.set_xticks(np.arange(len(leg)))\nax.set_xticklabels(legname[corder], rotation=90)\nax.set_ylabel(f'{np.unique(selgene).shape[0]} DEG')\n\nplt.tight_layout()\n# plt.savefig(f'majortype_{group_name}_diffloop_3C_RNA_degbody.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-body",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs DEG body"
        ]
      },
      "doc_lineno": 1190002
    },
    {
      "source": "corr = np.array([pearsonr(xx, yy)[0] for xx,yy in zip(tmp3c, tmprna)])\ncorr_all.append(corr)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-body",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs DEG body"
        ]
      },
      "doc_lineno": 1200002
    },
    {
      "source": "np.save(f'{outdir}corr_diffloop_rna.npy', corr_all)",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-body",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs DEG body"
        ]
      },
      "doc_lineno": 1210002
    },
    {
      "source": "corr_all = np.load(f'{outdir}corr_diffloop_rna.npy', allow_pickle=True)[[0,2,4,1,3,5]]",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-body",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs DEG body"
        ]
      },
      "doc_lineno": 1220002
    },
    {
      "source": "xleg = [f'{xx}\\n(n={yy.shape[0]})' for xx,yy in zip(['All Gene in', 'All Gene TSS', 'All Gene Body', 'DEG in', 'DEG TSS', 'DEG Body'], corr_all)]\nfig, ax = plt.subplots(figsize=(3.5,2), dpi=300)\nsns.violinplot(corr_all, ax=ax)\nax.set_xticklabels(xleg, rotation=90, ha='center')\nax.set_ylabel('PCC with Interaction')\n# plt.tight_layout()\n# plt.savefig(f'majortype_{group_name}_diffloop_rnacorr.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-body",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs DEG body"
        ]
      },
      "doc_lineno": 1230002
    },
    {
      "source": "[[xx.shape, np.median(xx)] for xx in corr_all]",
      "names": [],
      "example": {
        "document": "hba/loop_majortype/05.plot",
        "ref_id": "differential-loop-vs-deg-body",
        "headings": [
          "Plot correlation between loop and mC/ATAC/RNA",
          "Differential Loop vs DEG body"
        ]
      },
      "doc_lineno": 1240002
    }
  ],
  "hba/loop_majortype/intro": [],
  "hba/plot_example": [
    {
      "source": "import os\nimport cooler\nimport numpy as np\nimport pandas as pd\nfrom scipy.stats import norm, zscore\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Polygon\nfrom matplotlib import cm as cm\nimport seaborn as sns\nfrom matplotlib.colors import LogNorm\n\nfrom itertools import cycle, islice\nimport xarray as xr\nfrom glob import glob\n\nmpl.style.use('default')\nmpl.rcParams['pdf.fonttype'] = 42\nmpl.rcParams['ps.fonttype'] = 42\nmpl.rcParams['font.family'] = 'sans-serif'\nmpl.rcParams['font.sans-serif'] = 'Helvetica'\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "leg = ['L23_IT', 'L4_IT', 'L5_IT', 'L6_IT', 'L6_IT_Car3', 'L56_NP', 'L6_CT', 'L6b', 'L5_ET', 'Amy', \n       'Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb_ChC', 'Sst', 'CHD7', \n       'MSN_D1', 'MSN_D2', 'Foxp2', 'SubCtx', \n       'ASC', 'ODC', 'OPC', 'MGC', 'PC', 'EC', 'VLMC'\n      ]\nlegname = ['L2/3-IT', 'L4-IT', 'L5-IT', 'L6-IT', 'L6-IT-Car3', 'L5/6-NP', 'L6-CT', 'L6b', 'L5-ET', 'Amy-Exc', \n       'Lamp5', 'Lamp5-Lhx6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb-ChC', 'Sst', 'Chd7', \n       'MSN-D1', 'MSN-D2', 'Foxp2', 'SubCtx-Cplx', \n       'ASC', 'ODC', 'OPC', 'MGC', 'PC', 'EC', 'VLMC'\n      ]\nleg2name = {xx:yy for xx,yy in zip(leg, legname)}\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "leg = {'exc': ['L23_IT', 'L4_IT', 'L5_IT', 'L6_IT', 'L6_IT_Car3', 'L56_NP', 'L6_CT', 'L6b', 'Amy'], \n       'inh': ['Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb_ChC', 'Sst', 'CHD7'], \n       'msn': ['MSN_D1', 'MSN_D2', 'Foxp2'], \n       'sub': ['SubCtx'], \n       'glia': ['ASC', 'ODC', 'OPC'], \n       'mgc': ['MGC'], \n       'smc': ['PC'], \n       'endo': ['EC'], \n       'fibro': ['VLMC'],\n      }\nleg['neu'] = leg['exc'] + leg['inh'] + leg['msn'] + leg['sub']\nleg['all'] = leg['neu'] + leg['glia'] + leg['mgc'] + leg['smc'] + leg['endo'] + leg['fibro']\nleg['cge'] = ['Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip']\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "group_name = 'cge'",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "leg = pd.Index(leg[group_name])\nlegname = leg.map(leg2name)\nres = 25000",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "indir = '/data/hba/domain_majortype/'\nddir = f'/home/jzhou_salk_edu/sky_workdir/hba/domain_majortype/diff/{group_name}/'\nldir = f'/home/jzhou_salk_edu/sky_workdir/hba/loop_majortype/diff/{group_name}/'\ncdir = f'/home/jzhou_salk_edu/sky_workdir/hba/compartment_majortype/diff/{group_name}/'\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "chrom_size_path = '/home/jzhou_salk_edu/sky_workdir/hba/ref/hg38.main.chrom.sizes'\nchrom_sizes = cooler.read_chromsizes(chrom_size_path, all_names=True)\nchrom_sizes = chrom_sizes.iloc[:-3]\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "## Load boundary probability\n\nbound_count_ct = pd.read_hdf(f'{indir}MajorType_boundcount.hdf', key='data').loc[leg]\ncell_count_ct = pd.read_csv(f'{indir}MajorType_cellcount.csv.gz', index_col=0, header=0, squeeze=True).loc[leg]\nbound_prob_ct = bound_count_ct / cell_count_ct[:,None]\nbound_prob_ct\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "## Load insulation score\n\nins_count = xr.open_dataset(f'{indir}MajorType_impute.insulation.nc')\nins_count = ins_count.sel({'bin': (ins_count['bin_chrom']!='chrX')})\nins_count['ratio'] = (ins_count.sel({'type':'inter'})['__xarray_dataarray_variable__'] / ins_count.sel({'type':'intra'}))['__xarray_dataarray_variable__']\nins = ins_count['ratio'].to_pandas().loc[leg]\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "genemeta = pd.read_csv('/home/jzhou_salk_edu/sky_workdir/hba/ref/gencode.v33.bed', sep='\\t', header=None, index_col=4)\ngenemeta = genemeta[~genemeta.index.duplicated(keep='first')]\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "gtmp = 'LAMP5'\nlslop, rslop = 1000000, 2000000\n\nchrom = genemeta.loc[gtmp, 0]\nif genemeta.loc[gtmp, 5]=='+':\n    tss = genemeta.loc[gtmp, 1]\n    tes = genemeta.loc[gtmp, 2]\nelse:\n    tss = genemeta.loc[gtmp, 2]\n    tes = genemeta.loc[gtmp, 1]\n\nll, rr = (tss - lslop), (tss + rslop)\nprint(chrom, ll, rr, genemeta.loc[gtmp, 5])\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 130002
    },
    {
      "source": "## contact maps are plotted at loop resolution\n## select region to plot in Q matrix\n\nresl = 10000\nloopl, loopr = (ll//resl), (rr//resl)\nprint(loopl, loopr)\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "indir = '/home/jzhou_salk_edu/sky_workdir/hba/loop_majortype/'",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 150002
    },
    {
      "source": "## Load cell type Q\n\nfrom scipy import ndimage as nd\n\ndstall = []\nfor ct in leg:\n    cool = cooler.Cooler(f'{indir}{ct}/{ct}/{ct}.Q.cool')\n    Q = cool.matrix(balance=False, sparse=True).fetch(chrom).tocsr()\n    tmp = Q[loopl:loopr, loopl:loopr].toarray()\n    dstall.append(tmp)\n    print(ct)\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 160002
    },
    {
      "source": "## select differential loop\n\nloopall = pd.read_hdf(f'{ldir}merged_loop.hdf', key='data')\nsell = ((loopall[0]==chrom) & \n        (zscore(np.log(loopall['Qanova']))>norm.isf(0.15)) & \n        (zscore(np.log(loopall['Tanova']))>norm.isf(0.15)) & \n        (loopall[1]>ll) & (loopall[5]<rr))\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 170002
    },
    {
      "source": "## select differential boundary\n\nbinall = pd.read_hdf(f'{ddir}MajorType_boundary_stats.hdf', key='data')\nselb = (binall['chrom']==chrom) & (binall['start']>=ll) & (binall['start']<rr) & binall['bklfilter'] & binall['chi2filter'] & binall['ins_lm'] & (binall['probdiff']>0.05) & binall['diff_sc']\nprint(selb.sum())\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 180002
    },
    {
      "source": "ins.columns = binall.index",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 190002
    },
    {
      "source": "## select differential compartment\n\nresc = 100000\ncomp = pd.read_csv(f'{cdir}DifferentialResult/fdr_result/differential.intra_sample_combined.pcQnm.bedGraph', sep='\\t', header=0, index_col=None)\ncomp.index = comp['chr'] + '_' + (comp['start'] // resc).astype(str)\nbincomp = comp[['chr', 'start', 'end', 'sample_maha', 'pval', 'padj']]\ncomp = comp[leg]\nselc = (bincomp['chr']==chrom) & (bincomp['start']>=ll) & (bincomp['start']<rr) & (zscore(bincomp['sample_maha'])>norm.isf(0.025))\nprint(selc.sum())\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 200002
    },
    {
      "source": "fig, axes = plt.subplots(3, len(leg), figsize=(5*len(leg), 7), sharex='col', sharey='row',\n                         gridspec_kw={'height_ratios':[5,1,1]}, dpi=300)\n\n## differential feature position at 10k resolution\ntmpl = loopall.loc[sell, [1,4]].values // resl - loopl\ntmpd = binall.loc[selb, 'start'] // resl - loopl\ntmpc = bincomp.loc[selc, 'start'] // resl - loopl\n\nfor i in range(len(leg)):\n    ax = axes[0,i]\n    ax.axis('equal')\n    ax.set_title(legname[i], fontsize=16)\n    img = ax.imshow(dstall[i], cmap='afmhot_r', vmin=0, vmax=0.012, aspect='auto')\n    ax.set_yticks([])\n    ax.set_yticklabels([])\n    ax.set_xticklabels([])\n    ## plot diff loop\n    ax.scatter(tmpl[:, 0], tmpl[:, 1], alpha=1, s=1, marker='o', edgecolors='none', color='c')\n\n    ax = axes[1,i]\n    ## plot boundary prob, use 10k coordinate\n    sel = (binall['chrom']==chrom) & (binall['start']>=ll) & (binall['start']<rr)\n    ax.plot(binall.loc[sel, 'start'] // resl - loopl, \n            bound_prob_ct.loc[leg[i], sel].values, \n            c='C0', alpha=0.7)\n    ## plot diff boundary\n    ax.scatter(tmpd, np.zeros(len(tmpd))+0.05, color='r', s=4)\n    ax.set_ylim([0, 0.3])\n    ax2 = ax.twinx()\n    ## plot insulation score, use 10k coordinate\n    ax2.plot(binall.loc[sel, 'start'] // resl - loopl, \n             ins.loc[leg[i], sel].values, \n             c='C1', alpha=0.7)\n    ax2.set_ylim([0.05, 0.4])\n    ax.set_xlim([0, loopr-loopl-1])\n    ax.set_xticks(np.arange(0, loopr-loopl+1, 100).tolist() + [tss//resl-loopl, tes//resl-loopl])\n    ax.set_xticklabels([])\n    \n    ax = axes[2,i]\n    sns.despine(bottom=True, ax=ax)\n    ## plot compartment, use 10k coordinate\n    sel = (bincomp['chr']==chrom) & (bincomp['start']>=ll) & (bincomp['start']<rr)\n    x = bincomp.loc[sel, 'start'] // resl - loopl\n    y = comp.loc[sel, leg[i]].values\n    ax.fill_between(x, y, 0, where=y >= 0, facecolor='C3', interpolate=True)\n    ax.fill_between(x, y, 0, where=y <= 0, facecolor='C0', interpolate=True)\n    ## plot diff comp\n    ax.scatter(tmpc, np.zeros(len(tmpc)), color='r', s=4)\n    ax.set_ylim([-3, 3])\n    ax.set_xlim([-0.5, loopr-loopl-0.5])\n    ax.set_xticks(np.arange(-0.5, loopr-loopl, 100).tolist() + [tss//resl-loopl-0.5, tes//resl-loopl-0.5])\n    ax.set_xticklabels([])\n    ax.set_xticklabels([f'{(xx+loopl)/100}M' for xx in np.arange(0, loopr-loopl+1, 100)]+['TSS','TES'])\n\n# plt.savefig(f'{group_name}_diff_{gtmp}.pdf', transparent=True, dpi=300)\n\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 210002
    },
    {
      "source": "dstall = []\nfor ct in leg:\n    cool = cooler.Cooler(f'{indir}{ct}/{ct}/{ct}.Q.cool')\n    Q = cool.matrix(balance=False, sparse=True).fetch(chrom).tocsr()\n    tmp = Q[loopl:loopr, loopl:loopr].toarray()\n    dst = nd.rotate(tmp, 45, order=0, reshape=True, prefilter=False, cval=0)\n    dstall.append(dst)\n    print(ct)\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 220002
    },
    {
      "source": "fig, axes = plt.subplots(len(leg)*2+1, 1, figsize=(10, np.sum([1] + np.tile([3.5,1],len(leg)).tolist())/2), \n                         gridspec_kw={'height_ratios':[1] + np.tile([3.5,1],len(leg)).tolist()}, dpi=300, sharex='all')\n\ntmpl = loopall.loc[sell, [1,4]].values // resl - loopl\ntmpd = binall.loc[selb, 'start'] // resl - loopl\ntmpc = bincomp.loc[selc, 'start'] // resl - loopl\n\nax = axes[0]\nsel = (binall['chrom']==chrom) & (binall['start']>=ll) & (binall['start']<rr)\nxpos = (binall.loc[sel, 'start'] // resl - loopl) * np.sqrt(2)\nax.plot(xpos, binall.loc[sel, 'chi2_sc'].values, \n        c='C0', alpha=0.7)\n\nax.set_title('Chi-Square', fontsize=10)\nax.set_xlim([0, (loopr-loopl-1)*np.sqrt(2)])\n\nfor i in range(len(leg)):\n    ax = axes[i*2+1]\n    ax.set_title(legname[i], fontsize=10)\n    ax.spines['right'].set_visible(False)\n    ax.spines['top'].set_visible(False)\n    ax.spines['bottom'].set_visible(False)\n    ax.spines['left'].set_visible(False)\n    img = ax.imshow(dstall[i], cmap='afmhot_r', vmin=0, vmax=0.012)\n    h = len(dstall[i])\n    ax.set_ylim([0.5*h, 0.4*h])\n    ax.set_xlim([0, h])\n    ax.set_yticks([])\n    ax.set_yticklabels([])\n    ax.scatter((tmpl[:, 0]+tmpl[:, 1])/np.sqrt(2), 0.5*h-(tmpl[:, 1]-tmpl[:, 0])/np.sqrt(2), \n           alpha=0.1, s=10, marker='D', edgecolors='c', color='none')\n\n    ax = axes[i*2+2]\n    ax.plot(xpos, bound_prob_ct.loc[leg[i], sel].values, c='C0', alpha=0.7)\n    ax.scatter(tmpd * np.sqrt(2), np.zeros(len(tmpd))+0.05, color='r', s=4)\n    ax.set_ylim([0, 0.3])\n    ax2 = ax.twinx()\n    ax2.plot(xpos, ins.loc[leg[i], sel].values, c='C1', alpha=0.7)\n    ax2.set_ylim([0.05, 0.4])\n    \nax.set_xlim([0, (loopr-loopl-1)*np.sqrt(2)])\nax.set_xticks(np.sqrt(2)*np.array(np.arange(0, loopr-loopl+1, 100).tolist() + [tss//resl-loopl, tes//resl-loopl]))\nax.set_xticklabels([])\nax.set_xticklabels([f'{(xx+loopl)/100}M' for xx in np.arange(0, loopr-loopl+1, 100)]+['TSS','TES'])\n\n# plt.savefig(f'/gale/netapp/entex/HBA/snm3C/plot/majortype_diff_FOXP2.pdf', transparent=True, dpi=300)\n\n",
      "names": [],
      "example": {
        "document": "hba/plot_example",
        "ref_id": "plot-examples",
        "headings": [
          "Plot examples"
        ]
      },
      "doc_lineno": 230002
    }
  ],
  "hba/rna_majortype/01.deg": [
    {
      "source": "import numpy as np\nimport pandas as pd\nimport anndata\nimport scanpy as sc",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "indir = '/home/jzhou_salk_edu/sky_workdir/hba/rna_majortype/'\noutdir = indir",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "gene_meta = pd.read_csv('/home/jzhou_salk_edu/sky_workdir/hba/ref/gencode.v33.basic.annotation.gene.flat.tsv.gz', sep='\\t', index_col=8)\ngene_meta",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "adata = anndata.read_h5ad(f'{indir}rna_raw.h5ad')\nadata",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "adata.var['ncell'] = adata.X.getnnz(axis=0)\nadata = adata[:, (adata.var['ncell']>10) & (adata.var.index.isin(gene_meta.index))].copy()\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "adata.obs['TotalUMI'] = adata.X.sum(axis=1).A1\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "adata.X.data = adata.X.data / np.repeat(adata.obs['TotalUMI'].values, adata.X.getnnz(axis=1)) * adata.obs['TotalUMI'].median()\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "sc.pp.log1p(adata)",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "adata.var[\"mean\"] = adata.X.mean(axis=0).A1\nadata.var[\"std\"] = (adata.X.multiply(adata.X)).mean(axis=0).A1 - (\n    adata.var[\"mean\"].values ** 2\n)\nprint(adata.var[\"std\"].min())",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "leg = {'exc': ['L23_IT', 'L4_IT', 'L5_IT', 'L6_IT', 'L6_IT_Car3', 'L56_NP', 'L6_CT', 'L6b', 'L5_ET', 'Amy'], \n       'inh': ['Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb_ChC', 'Sst', 'CHD7'], \n       'msn': ['MSN_D1', 'MSN_D2', 'Foxp2'], \n       'sub': ['SubCtx'], \n       'glia': ['ASC', 'ODC', 'OPC'], \n       'mgc': ['MGC'], \n       'smc': ['PC'], \n       'endo': ['EC'], \n       'fibro': ['VLMC'],\n      }\nleg['neu'] = leg['exc'] + leg['inh'] + leg['msn'] + leg['sub']\nleg['all'] = leg['neu'] + leg['glia'] + leg['mgc'] + leg['smc'] + leg['endo'] + leg['fibro']\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "expr = pd.DataFrame([adata.X[adata.obs['MajorType']==xx].mean(axis=0).A.ravel() for xx in leg['all']], index=leg['all'], columns=adata.var.index)\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "data = {xx:adata.X[adata.obs['MajorType']==xx].toarray() for xx in leg['all']}\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 130002
    },
    {
      "source": "import os\nfrom scipy.stats import ranksums, kruskal\nfrom concurrent.futures import ProcessPoolExecutor, as_completed\nfrom statsmodels.sandbox.stats.multicomp import multipletests as FDR\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "for group in ['all', 'neu', 'exc', 'inh']:\n    genefilter = (adata.X[adata.obs['MajorType'].isin(leg[group])].getnnz(axis=0) > 10)\n    stats = []\n    for i in range(adata.shape[1]):\n        if genefilter[i]:\n            tmp = [data[ct][:,i] for ct in leg[group]]\n            xx, yy = kruskal(*tmp)\n            stats.append([xx, yy])\n    stats = np.array(stats)\n    stats[:, 1] = FDR(stats[:, 1], 0.01, \"fdr_bh\")[1]\n    stats = pd.DataFrame(stats, columns=['stats', 'fdr'], index=adata.var.index[genefilter])\n    stats.to_hdf(f'{outdir}{group}_deg_stats.hdf', key='data')\n    print(group)\n    ",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 150002
    },
    {
      "source": "leg = leg['all']\nlegname = ['L2/3-IT', 'L4-IT', 'L5-IT', 'L6-IT', 'L6-IT-Car3', 'L5/6-NP', 'L6-CT', 'L6b', 'L5-ET', 'Amy-Exc', \n       'Lamp5', 'Lamp5-Lhx6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb-ChC', 'Sst', 'Chd7', \n       'MSN-D1', 'MSN-D2', 'Foxp2', 'SubCtx-Cplx', \n       'ASC', 'ODC', 'OPC', 'MGC', 'PC', 'EC', 'VLMC'\n      ]\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 170002
    },
    {
      "source": "def diff_ranksum(c1, c2):\n    global data\n    # print(c1, c2)\n    fc = (data[c1].mean(axis=0) + 0.01) / (data[c2].mean(axis=0) + 0.01)\n    pv = np.zeros(len(fc))\n    for i in range(len(pv)):\n        pv[i] = ranksums(data[c1][:, i], data[c2][:, i])[1]\n    fdr = FDR(pv, 0.01, \"fdr_bh\")[1]\n    return [c1, c2, fc, fdr]\n    ",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 180002
    },
    {
      "source": "os.makedirs(f'{outdir}DEG/', exist_ok=True)",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 190002
    },
    {
      "source": "cpu = 32\nwith ProcessPoolExecutor(cpu) as executor:\n    futures = []\n    for c1 in range(len(leg)-1):\n        for c2 in range(c1+1, len(leg)):\n            future = executor.submit(\n                diff_ranksum,\n                c1=leg[c1],\n                c2=leg[c2],\n            )\n            futures.append(future)\n\n    result = []\n    for future in as_completed(futures):\n        result.append(future.result())\n        # c1, c2 = result[-1][0], result[-1][1]\n        # print(f'{leg[c1]} vs {leg[c2]} finished')\n        ",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 200002
    },
    {
      "source": "for xx in result:\n    np.savez(f'{outdir}DEG/{xx[0]}-{xx[1]}.npz', fc=xx[2], fdr=xx[3])\n    ",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 210002
    },
    {
      "source": "import seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nmpl.style.use('default')\nmpl.rcParams['pdf.fonttype'] = 42\nmpl.rcParams['ps.fonttype'] = 42\nmpl.rcParams['font.family'] = 'sans-serif'\nmpl.rcParams['font.sans-serif'] = 'Helvetica'\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 230002
    },
    {
      "source": "count = pd.DataFrame(index=leg, columns=leg).fillna(0)\nfor xx in result:\n    count.loc[xx[0], xx[1]] = np.sum(np.logical_and(np.abs(np.log2(xx[2]))>1, xx[3]<1e-3))\n\ncount = count + count.T\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 240002
    },
    {
      "source": "sns.clustermap(count, xticklabels=legname, yticklabels=legname)",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 250002
    },
    {
      "source": "sns.clustermap(count.loc[leg[:22], leg[:22]], xticklabels=legname[:22], yticklabels=legname[:22])",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 260002
    },
    {
      "source": "from sklearn.preprocessing import normalize\nfrom sklearn.decomposition import TruncatedSVD\nfrom ALLCools.plot import *\nfrom ALLCools.clustering import significant_pc_test, tsne",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 280002
    },
    {
      "source": "def dump_embedding(adata, name, n_dim=2):\n    # put manifold coordinates into adata.obs\n    for i in range(n_dim):\n        adata.obs[f\"{name}_{i}\"] = adata.obsm[f\"X_{name}\"][:, i]\n    return adata",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 290002
    },
    {
      "source": "model = TruncatedSVD(n_components=50)\ndata_reduce = model.fit_transform(adata.X)\ndata_reduce /= model.singular_values_",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 300002
    },
    {
      "source": "adata.obsm['pca_all'] = data_reduce.copy()\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 310002
    },
    {
      "source": "significant_pc_test(adata, p_cutoff=0.1, update=False, obsm=\"pca_all\")",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 320002
    },
    {
      "source": "npc = 50\nadata.obsm['X_pca'] = normalize(data_reduce[:, :npc], axis=1)\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 330002
    },
    {
      "source": "tsne(\n    adata,\n    obsm=\"X_pca\",\n    metric=\"euclidean\",\n    exaggeration=-1,\n    perplexity=50,\n    n_jobs=-1,\n)\ndump_embedding(adata, \"tsne\")\nadata.obsm[f\"u{npc}_tsne\"] = adata.obsm[\"X_tsne\"].copy()\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 340002
    },
    {
      "source": "ds = 0.5\ncoord_base = 'tsne'\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 350002
    },
    {
      "source": "import hba_data\nctdict = hba_data.internal.celltype.CellType.majortype_palette()\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 360002
    },
    {
      "source": "fig, axes = plt.subplots(1, 2, figsize=(10, 4), dpi=300, constrained_layout=True, sharex='all', sharey='all')\nax = axes[0]\ntmp = adata.obs['Supercluster'].value_counts()\ntmp = adata.obs.loc[adata.obs['Supercluster'].isin(tmp.index[tmp>50])]\n_ = categorical_scatter(data=tmp,\n                        ax=ax,\n                        coord_base=coord_base,\n                        s=ds,\n                        hue='Supercluster',\n                        text_anno='Supercluster',\n                        palette='tab20',\n                        labelsize=6,\n                        max_points=None,\n                        scatter_kws={'rasterized':True},\n                        #show_legend=True,\n                        #legend_kws={'ncol':1},\n                       )\nax = axes[1]\n_ = categorical_scatter(data=adata.obs,\n                        ax=ax,\n                        coord_base=coord_base,\n                        s=ds,\n                        hue='MajorType',\n                        text_anno='MajorType',\n                        palette=ctdict,\n                        labelsize=6,\n                        max_points=None,\n                        scatter_kws={'rasterized':True},\n                        #show_legend=True,\n                        #legend_kws={'ncol':1},\n                       )\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 370002
    },
    {
      "source": "adata.var[['gene_name', 'chrom', 'start', 'end']] = gene_meta.loc[adata.var.index, ['gene_name', 'chrom', 'start', 'end']].values\nadata.var[['start', 'end']] = adata.var[['start', 'end']].astype(int)\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 380002
    },
    {
      "source": "adata.write_h5ad(f'{outdir}cell_{adata.shape[0]}_rna.h5ad')",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 390002
    },
    {
      "source": "from scipy.stats import rankdata\n\nselg = np.zeros(adata.shape[1])\nfor xx in result:\n    if (xx[0] in leg[:22]) and (xx[1] in leg[:22]):\n        rank = rankdata(xx[3])\n        selg[rank<=100] = 1\n\nprint(selg.sum())",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 410002
    },
    {
      "source": "tmp = expr.loc[leg[:22], selg==1]\ntmp.columns = adata.var['gene_name'].values[selg==1]\nsns.clustermap(tmp, z_score=1, cmap='Reds', vmin=0, vmax=4, metric='cosine', figsize=(10,8))\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 420002
    },
    {
      "source": "fig, ax = plt.subplots()\nsns.histplot(adata.var.loc[selg==1, 'end'] - adata.var.loc[selg==1, 'start'], log_scale=10, bins=100, stat='percent', ax=ax)\nsns.histplot(adata.var['end'] - adata.var['start'], log_scale=10, bins=100, stat='percent', ax=ax)\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 430002
    },
    {
      "source": "expr.to_hdf(f'{outdir}cluster_expr.hdf', key='data')\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 440002
    },
    {
      "source": "selg = np.zeros(adata.shape[1])\nfor xx in result:\n    rank = rankdata(xx[3])\n    selg[rank<=100] = 1\n\nprint(selg.sum())",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 460002
    },
    {
      "source": "tmp = expr.loc[leg, selg==1]\ntmp.columns = adata.var['gene_name'].values[selg==1]\nsns.clustermap(tmp, z_score=1, cmap='Reds', vmin=0, vmax=4, metric='cosine', figsize=(10,8))\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 470002
    },
    {
      "source": "fig, ax = plt.subplots()\nsns.histplot(adata.var.loc[selg==1, 'end'] - adata.var.loc[selg==1, 'start'], log_scale=10, bins=100, stat='percent', ax=ax)\nsns.histplot(adata.var['end'] - adata.var['start'], log_scale=10, bins=100, stat='percent', ax=ax)\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/01.deg",
        "ref_id": "deg-identification",
        "headings": [
          "DEG identification"
        ]
      },
      "doc_lineno": 480002
    }
  ],
  "hba/rna_majortype/02.loop_corr": [
    {
      "source": "import numpy as np\nimport pandas as pd\nimport cooler\nimport anndata\nimport scanpy as sc\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm\nfrom matplotlib import cm as cm\nimport seaborn as sns\n\nmpl.style.use('default')\nmpl.rcParams['pdf.fonttype'] = 42\nmpl.rcParams['ps.fonttype'] = 42\nmpl.rcParams['font.family'] = 'sans-serif'\nmpl.rcParams['font.sans-serif'] = 'Helvetica'\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "indir = '/home/jzhou_salk_edu/sky_workdir/hba/loop_majortype/diff/neu/'\noutdir = '/home/jzhou_salk_edu/sky_workdir/hba/rna_majortype/'",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "# no L5ET\nleg = ['L23_IT', 'L4_IT', 'L5_IT', 'L6_IT', 'L6_IT_Car3', 'L56_NP', 'L6_CT', 'L6b', 'Amy', \n       'Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb_ChC', 'Sst', 'CHD7', \n       'MSN_D1', 'MSN_D2', 'Foxp2', 'SubCtx', \n       # 'ASC', 'ODC', 'OPC', 'MGC', 'PC', 'EC', 'VLMC'\n      ]",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "loopq = pd.read_hdf(f'{indir}loop_Q.hdf')\nloopall = pd.read_hdf(f'{indir}merged_loop.hdf')",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "expr = pd.read_hdf(f'{outdir}cluster_expr.hdf').loc[leg]\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "from scipy.stats import rankdata\n\ndeg = np.zeros(expr.shape[1])\nfor i in range(len(leg)-1):\n    for j in range(i+1, len(leg)):\n        tmp = np.load(f'{outdir}DEG/{leg[i]}-{leg[j]}.npz')\n        # deg[np.logical_and(np.abs(tmp['fc'])>1, tmp['fdr']<1e-3)] = 1\n        rank = rankdata(tmp['fdr'])\n        deg[rank<=100] = 1\n\nprint(deg.sum())\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "chrom_size_path = f'/data/hba/loop_majortype/hg38_with_chrl.main.chrom.sizes'\nchrom_sizes = cooler.read_chromsizes(chrom_size_path, all_names=True)\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "gene_meta = pd.read_csv('/home/jzhou_salk_edu/sky_workdir/hba/ref/gencode.v33.bed', sep='\\t', index_col=None, header=None)\ngene_meta.columns = ['chrom', 'start', 'end', 'gene_id', 'gene_name', 'strand']\ngene_meta = gene_meta.set_index('gene_id').loc[expr.columns[deg==1]]\ngene_meta = gene_meta.loc[gene_meta['chrom'].isin(chrom_sizes.index[:22])]\ngene_meta",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "import cooler\n# from qnorm import quantile_normalize\nfrom scipy.stats import norm\nfrom tqdm import tqdm\nfrom ALLCools.mcds.correlation import corr_array\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "def shuffle_corr_norm(rna_data, dmr_data):\n    \n    shuffle_rna_data = rna_data.copy()\n    for col, data in shuffle_rna_data.items():\n        n_gene = shuffle_rna_data.shape[0]\n        shuffle_rna_data[col] = shuffle_rna_data[col].sample(n_gene).values\n    \n    if dmr_data.shape[0] > 50000:\n        shuffle_dmr_data = dmr_data.sample(50000).copy()\n    else:\n        shuffle_dmr_data = dmr_data.copy()\n    for col, data in shuffle_dmr_data.items():\n        n_dmr = shuffle_dmr_data.shape[0]\n        shuffle_dmr_data[col] = shuffle_dmr_data[col].sample(n_dmr).values\n\n    # shuffle corr\n    shuffle_corr = corr_array(shuffle_rna_data, shuffle_dmr_data)\n    mu, std = norm.fit(shuffle_corr.ravel())\n    return mu, std, shuffle_corr.ravel()\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "null_mu, null_std, shuffle_corr = shuffle_corr_norm(expr.loc[:,  gene_meta.index].T, loopq)\nnull_mu, null_std\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "shuffle_corr.shape",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 130002
    },
    {
      "source": "gene_slop = 5000000",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 150002
    },
    {
      "source": "gene_records = []\nfor gene, row in tqdm(gene_meta.iterrows(), total=gene_meta.shape[0]):\n    gene_rna = expr[[gene]].T\n    \n    dmr_chrom = row['chrom']\n    dmr_start = row['start'] - gene_slop\n    dmr_end = row['end'] + gene_slop\n    sel_dmr = (loopall[0]==dmr_chrom) & (loopall[1] > dmr_start) & (loopall[5] < dmr_end)\n    gene_dmr = loopq.loc[sel_dmr]\n\n    gene_corr = corr_array(gene_rna, gene_dmr).ravel()\n    gene_corr = pd.Series(gene_corr, index=gene_dmr.index)\n\n    # pvalue = norm.sf(gene_corr.values, null_mu, null_std)\n    # pvalue[pvalue > 0.5] = 1 - pvalue[pvalue > 0.5]\n    # pvalue *= 2  # two tailed\n    # perform multi-test correction and  q-value\n    # _, q, *_ = fdrcorrection(pvalue)\n\n    gene_corr.name = 'corr'\n    gene_corr = gene_corr.reset_index()\n    gene_corr['gene'] = gene\n    # gene_corr[\"q\"] = q\n    \n    # minimum filter\n    # gene_corr = gene_corr[\n    #     (gene_corr[\"q\"] < min_q) & (gene_corr[\"corr\"].abs() > min_corr)\n    # ].set_index(\"dmr\")\n\n    # gene_records[gene] = gene_corr\n    gene_records.append(gene_corr)\n    ",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 160002
    },
    {
      "source": "gene_records = pd.concat(gene_records, axis=0)\ngene_records.index = np.arange(gene_records.shape[0])\ngene_records",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 170002
    },
    {
      "source": "fig, ax = plt.subplots()\nsns.distplot(np.random.choice(gene_records['corr'], 50000), ax=ax)\nsns.distplot(np.random.choice(shuffle_corr, 50000), ax=ax)",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 180002
    },
    {
      "source": "t1 = rankdata(np.concatenate((gene_records['corr'].values, shuffle_corr)))[:gene_records.shape[0]]\nt2 = rankdata(gene_records['corr'].values)\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 190002
    },
    {
      "source": "gene_records['FDRneg'] = (t1 - t2) / len(shuffle_corr) / t2 * gene_records.shape[0]\ngene_records['FDRpos'] = (len(shuffle_corr) - t1 + t2) / len(shuffle_corr) / (gene_records.shape[0] - t2) * gene_records.shape[0]\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 200002
    },
    {
      "source": "gene_meta[['TSS', 'TES']] = gene_meta[['start', 'end']]\nselg = (gene_meta['strand']=='-')\ngene_meta.loc[selg, ['TSS', 'TES']] = gene_meta.loc[selg, ['TES', 'TSS']].values\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 210002
    },
    {
      "source": "loopall['start'] = loopall[[1, 2]].mean(axis=1)\nloopall['end'] = loopall[[4, 5]].mean(axis=1)",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 220002
    },
    {
      "source": "gene_records['TSSdist1'] = loopall.loc[gene_records['index'], 'start'].values - gene_meta.loc[gene_records['gene'], 'TSS'].values\nselg = (gene_meta.loc[gene_records['gene'], 'strand']=='-')\ngene_records.loc[selg.values, 'TSSdist1'] = -gene_records.loc[selg.values, 'TSSdist1'].values\n\ngene_records['TESdist1'] = loopall.loc[gene_records['index'], 'start'].values - gene_meta.loc[gene_records['gene'], 'TES'].values\nselg = (gene_meta.loc[gene_records['gene'], 'strand']=='-')\ngene_records.loc[selg.values, 'TESdist1'] = -gene_records.loc[selg.values, 'TESdist1'].values\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 230002
    },
    {
      "source": "gene_records['TSSdist2'] = loopall.loc[gene_records['index'], 'end'].values - gene_meta.loc[gene_records['gene'], 'TSS'].values\nselg = (gene_meta.loc[gene_records['gene'], 'strand']=='-')\ngene_records.loc[selg.values, 'TSSdist2'] = -gene_records.loc[selg.values, 'TSSdist2'].values\n\ngene_records['TESdist2'] = loopall.loc[gene_records['index'], 'end'].values - gene_meta.loc[gene_records['gene'], 'TES'].values\nselg = (gene_meta.loc[gene_records['gene'], 'strand']=='-')\ngene_records.loc[selg.values, 'TESdist2'] = -gene_records.loc[selg.values, 'TESdist2'].values\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 240002
    },
    {
      "source": "gene_records.to_hdf(f'{outdir}DEG_neu_loop_5M_corr.hdf', key='data')",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 250002
    },
    {
      "source": "gene_records = pd.read_hdf(f'{outdir}DEG_neu_loop_5M_corr.hdf')",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 260002
    },
    {
      "source": "gene_records = gene_records[~gene_records['gene'].isin(gene_meta.index[gene_meta['chrom'].isin(['chrX', 'chrY'])])]\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 270002
    },
    {
      "source": "dist = 2000000",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 280002
    },
    {
      "source": "gene_records['coord1'] = 0\nselp = (gene_records['TSSdist1']<=0)\ngene_records.loc[selp, 'coord1'] = gene_records.loc[selp, 'TSSdist1'] / (dist/200) - 100\n\nselp = (gene_records['TESdist1']>=0)\ngene_records.loc[selp, 'coord1'] = gene_records.loc[selp, 'TESdist1'] / (dist/200) + 100\n\nselp = (gene_records['TESdist1']<0) & (gene_records['TSSdist1']>0)\ngene_records.loc[selp, 'coord1'] = gene_records.loc[selp, 'TSSdist1'] / (gene_records.loc[selp, 'TSSdist1'] - gene_records.loc[selp, 'TESdist1']) * 200 - 100\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 290002
    },
    {
      "source": "gene_records['coord2'] = 0\nselp = (gene_records['TSSdist2']<=0)\ngene_records.loc[selp, 'coord2'] = gene_records.loc[selp, 'TSSdist2'] / (dist/200) - 100\n\nselp = (gene_records['TESdist2']>=0)\ngene_records.loc[selp, 'coord2'] = gene_records.loc[selp, 'TESdist2'] / (dist/200) + 100\n\nselp = (gene_records['TESdist2']<0) & (gene_records['TSSdist2']>0)\ngene_records.loc[selp, 'coord2'] = gene_records.loc[selp, 'TSSdist2'] / (gene_records.loc[selp, 'TSSdist2'] - gene_records.loc[selp, 'TESdist2']) * 200 - 100\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 300002
    },
    {
      "source": "gene_records = gene_records.loc[(gene_records[['coord1','coord2']].min(axis=1)>-300) & (gene_records[['coord1','coord2']].max(axis=1)<300)]",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 310002
    },
    {
      "source": "gene_records['group1'], group1 = pd.cut(gene_records['coord1'], 300, labels=False, retbins=True)\ngene_records['group2'], group2 = pd.cut(gene_records['coord2'], 300, labels=False, retbins=True)\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 320002
    },
    {
      "source": "threspos = gene_records.loc[gene_records['FDRpos']<0.1, 'corr'].min()\nthresneg = gene_records.loc[gene_records['FDRneg']<0.1, 'corr'].max()\nprint(threspos, thresneg)\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 330002
    },
    {
      "source": "thres = np.max(np.abs([thresneg, threspos]))\nres = 10000",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 340002
    },
    {
      "source": "## promoter\ntmp = gene_records.loc[(gene_records['corr']>thres) & (((gene_records['TSSdist1']>-res) & (gene_records['TSSdist1']<res)) | ((gene_records['TSSdist2']>-res) & (gene_records['TSSdist2']<res))), 'gene'].unique()\nprint(tmp.shape[0], tmp.shape[0]/gene_records['gene'].unique().shape[0])\nnp.savetxt(f'{outdir}gene_loopposcorr_tss.csv.gz', tmp, delimiter='\\n', fmt='%s')\n\ntmp = gene_records.loc[(gene_records['corr']>thres) & (((gene_records['TESdist1']>-res) & (gene_records['TESdist1']<res)) | ((gene_records['TESdist2']>-res) & (gene_records['TESdist2']<res))), 'gene'].unique()\nprint(tmp.shape[0], tmp.shape[0]/gene_records['gene'].unique().shape[0])\nnp.savetxt(f'{outdir}gene_loopposcorr_tes.csv.gz', tmp, delimiter='\\n', fmt='%s')\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 350002
    },
    {
      "source": "tmp = gene_records.loc[(gene_records['corr']>thres) & (((gene_records['TSSdist1']>-res) & (gene_records['TESdist1']<res)) & ((gene_records['TSSdist2']>-res) & (gene_records['TESdist2']<res))), 'gene'].unique()\nprint(tmp.shape[0], tmp.shape[0]/gene_records['gene'].unique().shape[0])\nnp.savetxt(f'{outdir}gene_loopposcorr_genebodyboth.csv.gz', tmp, delimiter='\\n', fmt='%s')\n\ntmp = gene_records.loc[(gene_records['corr']<-thres) & (((gene_records['TSSdist1']>-res) & (gene_records['TESdist1']<res)) & ((gene_records['TSSdist2']>-res) & (gene_records['TESdist2']<res))), 'gene'].unique()\nprint(tmp.shape[0], tmp.shape[0]/gene_records['gene'].unique().shape[0])\n\ntmp = gene_records.loc[(gene_records['corr']>thres) & (((gene_records['TSSdist1']>-res) & (gene_records['TESdist1']<res)) | ((gene_records['TSSdist2']>-res) & (gene_records['TESdist2']<res))), 'gene'].unique()\nprint(tmp.shape[0], tmp.shape[0]/gene_records['gene'].unique().shape[0])\nnp.savetxt(f'{outdir}gene_loopposcorr_genebodyone.csv.gz', tmp, delimiter='\\n', fmt='%s')\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 360002
    },
    {
      "source": "tmp = gene_records.loc[(gene_records['corr']>threspos) | (gene_records['corr']<thresneg)].groupby(['group1','group2'])['corr'].mean()\ngroupsigcorr = np.zeros((300, 300)) / 0\ngroupsigcorr[(tmp.index.get_level_values('group1'), tmp.index.get_level_values('group2'))] = tmp.values\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 370002
    },
    {
      "source": "tmp = gene_records.groupby(['group1','group2'])['corr'].mean()\ngroupcorr = np.zeros((300, 300)) / 0\ngroupcorr[(tmp.index.get_level_values('group1'), tmp.index.get_level_values('group2'))] = tmp.values\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 380002
    },
    {
      "source": "tmp = gene_records.loc[gene_records['corr']>threspos].groupby(['group1','group2'])['corr'].count()\ngroupposcount = np.zeros((300, 300))\ngroupposcount[(tmp.index.get_level_values('group1'), tmp.index.get_level_values('group2'))] = tmp.values\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 390002
    },
    {
      "source": "tmp = gene_records.loc[gene_records['corr']<thresneg].groupby(['group1','group2'])['corr'].count()\ngroupnegcount = np.zeros((300, 300))\ngroupnegcount[(tmp.index.get_level_values('group1'), tmp.index.get_level_values('group2'))] = tmp.values\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 400002
    },
    {
      "source": "tmp = gene_records.loc[(gene_records['corr']>threspos) | (gene_records['corr']<thresneg)].groupby(['group1','group2'])['corr'].count()\ngroupsigcount = np.zeros((300, 300))\ngroupsigcount[(tmp.index.get_level_values('group1'), tmp.index.get_level_values('group2'))] = tmp.values\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 410002
    },
    {
      "source": "tmp = gene_records.groupby(['group1','group2'])['corr'].count()\ngroupcount = np.zeros((300, 300))\ngroupcount[(tmp.index.get_level_values('group1'), tmp.index.get_level_values('group2'))] = tmp.values\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 420002
    },
    {
      "source": "cmap = mpl.cm.bwr\ncmap.set_bad('black', 1.0)\n\nfig, axes = plt.subplots(1, 3, figsize=(6,2), sharex='all', sharey='all', dpi=300)\n# ax = axes[0]\n# plot = ax.imshow(groupcorr, vmin=-1, vmax=1, cmap=cmap)\n# fig.colorbar(plot, ax=ax, shrink=0.5, fraction=0.1)\nfor i,xx in enumerate([groupcount, groupposcount, groupnegcount]):\n    ax = axes[i]\n    plot = ax.imshow(xx, cmap='Reds', norm=LogNorm(vmin=1, vmax=1e3))\n    ax.set_title(['All', 'Pos', 'Neg'][i], fontsize=10)\n    \nax.set_xticks(np.arange(-0.5, 300.5, 100))\nax.set_yticks(np.arange(-0.5, 300.5, 100))\nax.set_xticklabels(['-5M', 'TSS', 'TES', '+5M'])\nax.set_yticklabels(['-5M', 'TSS', 'TES', '+5M'])\n\n# ax.set_xlabel('Zscore log Q anova')\nplt.tight_layout()\n\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 430002
    },
    {
      "source": "cmap = mpl.cm.bwr\ncmap.set_bad('black', 1.0)\n\nfig, axes = plt.subplots(1, 3, figsize=(6,2), sharex='all', sharey='all', dpi=300)\n# ax = axes[0]\n# plot = ax.imshow(groupcorr, vmin=-1, vmax=1, cmap=cmap)\n# fig.colorbar(plot, ax=ax, shrink=0.5, fraction=0.1)\nfor i,xx in enumerate([groupcount, groupposcount, groupnegcount]):\n    ax = axes[i]\n    plot = ax.imshow(xx, cmap='Reds', norm=LogNorm(vmin=1, vmax=1e3))\n    ax.set_title(['All', 'Pos', 'Neg'][i], fontsize=10)\n    \nax.set_xticks(np.arange(-0.5, 300.5, 100))\nax.set_yticks(np.arange(-0.5, 300.5, 100))\nax.set_xticklabels(['-2M', 'TSS', 'TES', '+2M'])\nax.set_yticklabels(['-2M', 'TSS', 'TES', '+2M'])\n\n# ax.set_xlabel('Zscore log Q anova')\nplt.tight_layout()\n# plt.savefig('DEG_loop_sigcorr_count.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 440002
    },
    {
      "source": "cmap = mpl.cm.bwr\ncmap.set_bad('black', 1.0)\n\nfig, axes = plt.subplots(1, 3, figsize=(7.5,2.5), sharex='all', sharey='all', dpi=300)\nax = axes[0]\nplot = ax.imshow(groupcorr, vmin=-1, vmax=1, cmap=cmap)\nfig.colorbar(plot, ax=ax, shrink=0.5, fraction=0.1)\n\nax = axes[1]\n# plot = ax.imshow(groupcount, cmap='Reds', norm=LogNorm(vmin=1, vmax=1e3))\nplot = ax.imshow(groupsigcount / groupcount, cmap='Reds', vmin=0, vmax=0.6)\nfig.colorbar(plot, ax=ax, ticks=[0, 0.6], shrink=0.5, fraction=0.1)\n\nax = axes[2]\nplot = ax.imshow((groupposcount+1) / (groupnegcount+1), cmap='bwr', norm=LogNorm(vmin=1e-2, vmax=1e2))\nfig.colorbar(plot, ax=ax, shrink=0.5, fraction=0.1)\n\nax.set_xticks(np.arange(-0.5, 300.5, 100))\nax.set_yticks(np.arange(-0.5, 300.5, 100))\nax.set_xticklabels(['-2M', 'TSS', 'TES', '+2M'])\nax.set_yticklabels(['-2M', 'TSS', 'TES', '+2M'])\n\nfor ax,xx in zip(axes, ['Corr', '%SigLoop', 'Pos/Neg']):\n    ax.set_title(xx, fontsize=10)\n    \n# ax.set_xlabel('Zscore log Q anova')\nplt.tight_layout()\n# plt.savefig('DEG_loop_sigcorr_mean.pdf', transparent=True)\n\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 450002
    },
    {
      "source": "cmap = mpl.cm.bwr\ncmap.set_bad('black', 1.0)\n\nfig, axes = plt.subplots(1, 3, figsize=(7.5,2.5), sharex='all', sharey='all', dpi=300)\nax = axes[0]\nplot = ax.imshow(groupcorr, vmin=-1, vmax=1, cmap=cmap)\nfig.colorbar(plot, ax=ax, shrink=0.5, fraction=0.1)\n\nax = axes[1]\nplot = ax.imshow(groupcount, cmap='Reds', norm=LogNorm(vmin=1, vmax=1e3))\nfig.colorbar(plot, ax=ax, shrink=0.5, fraction=0.1)\n\nax = axes[2]\nplot = ax.imshow((groupposcount+1) / (groupnegcount+1), cmap='bwr', norm=LogNorm(vmin=1e-2, vmax=1e2))\nfig.colorbar(plot, ax=ax, shrink=0.5, fraction=0.1)\n\nax.set_xticks(np.arange(-0.5, 300.5, 100))\nax.set_yticks(np.arange(-0.5, 300.5, 100))\nax.set_xticklabels(['-2M', 'TSS', 'TES', '+2M'])\nax.set_yticklabels(['-2M', 'TSS', 'TES', '+2M'])\n\nfor ax,xx in zip(axes, ['Corr', '#Loop', 'Pos/Neg']):\n    ax.set_title(xx, fontsize=10)\n    \n# ax.set_xlabel('Zscore log Q anova')\nplt.tight_layout()\n# plt.savefig('DEG_loop_sigcorr_mean.pdf', transparent=True)\n\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 460002
    },
    {
      "source": "for i in range(3):\n    for j in range(i,3):\n        print(groupposcount[(i*100):(i*100+100), (j*100):(j*100+100)].sum() / \n              (groupposcount[(i*100):(i*100+100), (j*100):(j*100+100)].sum() + \n               groupnegcount[(i*100):(i*100+100), (j*100):(j*100+100)].sum()))\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 470002
    },
    {
      "source": "for i in range(3):\n    for j in range(i,3):\n        print(groupsigcount[(i*100):(i*100+100), (j*100):(j*100+100)].sum() / groupcount[(i*100):(i*100+100), (j*100):(j*100+100)].sum())\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/02.loop_corr",
        "ref_id": "rna-correlated-loop",
        "headings": [
          "RNA correlated loop"
        ]
      },
      "doc_lineno": 480002
    }
  ],
  "hba/rna_majortype/03.domain_corr": [
    {
      "source": "import numpy as np\nimport pandas as pd\nimport cooler\nimport anndata\nimport scanpy as sc\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm\nfrom matplotlib import cm as cm\nimport seaborn as sns\n\nmpl.style.use('default')\nmpl.rcParams['pdf.fonttype'] = 42\nmpl.rcParams['ps.fonttype'] = 42\nmpl.rcParams['font.family'] = 'sans-serif'\nmpl.rcParams['font.sans-serif'] = 'Helvetica'\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/03.domain_corr",
        "ref_id": "rna-correlated-boundary",
        "headings": [
          "RNA correlated boundary"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "indir = '/data/hba/domain_majortype/'\noutdir = '/home/jzhou_salk_edu/sky_workdir/hba/rna_majortype/'",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/03.domain_corr",
        "ref_id": "rna-correlated-boundary",
        "headings": [
          "RNA correlated boundary"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "# no L5ET\nleg = ['L23_IT', 'L4_IT', 'L5_IT', 'L6_IT', 'L6_IT_Car3', 'L56_NP', 'L6_CT', 'L6b', 'Amy', \n       'Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb_ChC', 'Sst', 'CHD7', \n       'MSN_D1', 'MSN_D2', 'Foxp2', 'SubCtx', \n       # 'ASC', 'ODC', 'OPC', 'MGC', 'PC', 'EC', 'VLMC'\n      ]\nres = 25000\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/03.domain_corr",
        "ref_id": "rna-correlated-boundary",
        "headings": [
          "RNA correlated boundary"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "bound_count_ct = pd.read_hdf(f'{indir}MajorType_boundcount.hdf')\ncell_count_ct = pd.read_csv(f'{indir}MajorType_cellcount.csv.gz', header=0, index_col=0)['count_cell']",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/03.domain_corr",
        "ref_id": "rna-correlated-boundary",
        "headings": [
          "RNA correlated boundary"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "bound_prob_ct = bound_count_ct.loc[leg] / cell_count_ct.loc[leg][:, None]\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/03.domain_corr",
        "ref_id": "rna-correlated-boundary",
        "headings": [
          "RNA correlated boundary"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "expr = pd.read_hdf('/home/jzhou_salk_edu/sky_workdir/hba/rna_majortype/cluster_expr.hdf').loc[leg]\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/03.domain_corr",
        "ref_id": "rna-correlated-boundary",
        "headings": [
          "RNA correlated boundary"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "from scipy.stats import rankdata\n\ndeg = np.zeros(expr.shape[1])\nfor i in range(len(leg)-1):\n    for j in range(i+1, len(leg)):\n        tmp = np.load(f'/home/jzhou_salk_edu/sky_workdir/hba/rna_majortype/DEG/{leg[i]}-{leg[j]}.npz')\n        # deg[np.logical_and(np.abs(tmp['fc'])>1, tmp['fdr']<1e-3)] = 1\n        rank = rankdata(tmp['fdr'])\n        deg[rank<=100] = 1\n\nprint(deg.sum())\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/03.domain_corr",
        "ref_id": "rna-correlated-boundary",
        "headings": [
          "RNA correlated boundary"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "chrom_size_path = f'/data/hba/loop_majortype/hg38_with_chrl.main.chrom.sizes'\nchrom_sizes = cooler.read_chromsizes(chrom_size_path, all_names=True)\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/03.domain_corr",
        "ref_id": "rna-correlated-boundary",
        "headings": [
          "RNA correlated boundary"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "gene_meta = pd.read_csv('/home/jzhou_salk_edu/sky_workdir/hba/ref/gencode.v33.bed', sep='\\t', index_col=None, header=None)\ngene_meta.columns = ['chrom', 'start', 'end', 'gene_id', 'gene_name', 'strand']\ngene_meta = gene_meta.set_index('gene_id').loc[expr.columns[deg==1]]\ngene_meta = gene_meta.loc[gene_meta['chrom'].isin(chrom_sizes.index[:22])]\ngene_meta",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/03.domain_corr",
        "ref_id": "rna-correlated-boundary",
        "headings": [
          "RNA correlated boundary"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "binall = pd.DataFrame(index=bound_count_ct.columns)\nbinall['chrom'] = binall.index.str.split('_').str[0]\nbinall['start'] = binall.index.str.split('_').str[1].astype(int) * res\nbinall['end'] = binall['start'] + res\nbinall",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/03.domain_corr",
        "ref_id": "rna-correlated-boundary",
        "headings": [
          "RNA correlated boundary"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "import joblib\n# from qnorm import quantile_normalize\nfrom scipy.stats import norm\nfrom statsmodels.sandbox.stats.multicomp import multipletests as FDR\nfrom tqdm import tqdm\nfrom ALLCools.mcds.correlation import corr_array\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/03.domain_corr",
        "ref_id": "rna-correlated-boundary",
        "headings": [
          "RNA correlated boundary"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "bkl = pd.read_csv(f'/data/hba/loop_majortype/M1C.rowsumpb1000.blf50.merged.bed', sep='\\t', header=None, index_col=None)\nbinall['bklfilter'] = True\nfor c in chrom_sizes.index[:-1]:\n    chrfilter = (binall['chrom']==c)\n    tmp = binall.loc[chrfilter]\n    tmp.iloc[:10, -1] = False\n    tmp.iloc[-10:, -1] = False\n    for xx,yy in bkl.loc[bkl[0]==c, [1,2]].values // res:\n        tmp.iloc[max([0,xx-2]):(yy+2), -1] = False\n    binall.loc[chrfilter] = tmp.copy()\n\nprint(binall['bklfilter'].sum())\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/03.domain_corr",
        "ref_id": "rna-correlated-boundary",
        "headings": [
          "RNA correlated boundary"
        ]
      },
      "doc_lineno": 130002
    },
    {
      "source": "bound_prob_ct = bound_prob_ct.loc[:, binall['bklfilter']]\nbinall = binall.loc[binall['bklfilter']]\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/03.domain_corr",
        "ref_id": "rna-correlated-boundary",
        "headings": [
          "RNA correlated boundary"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "def shuffle_corr_norm(rna_data, dmr_data):\n    \n    shuffle_rna_data = rna_data.copy()\n    for col, data in shuffle_rna_data.items():\n        n_gene = shuffle_rna_data.shape[0]\n        shuffle_rna_data[col] = shuffle_rna_data[col].sample(n_gene).values\n    \n    if dmr_data.shape[0] > 50000:\n        shuffle_dmr_data = dmr_data.sample(50000).copy()\n    else:\n        shuffle_dmr_data = dmr_data.copy()\n    for col, data in shuffle_dmr_data.items():\n        n_dmr = shuffle_dmr_data.shape[0]\n        shuffle_dmr_data[col] = shuffle_dmr_data[col].sample(n_dmr).values\n\n    # shuffle corr\n    shuffle_corr = corr_array(shuffle_rna_data, shuffle_dmr_data)\n    mu, std = norm.fit(shuffle_corr.ravel())\n    return mu, std, shuffle_corr.ravel()\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/03.domain_corr",
        "ref_id": "rna-correlated-boundary",
        "headings": [
          "RNA correlated boundary"
        ]
      },
      "doc_lineno": 150002
    },
    {
      "source": "null_mu, null_std, shuffle_corr = shuffle_corr_norm(expr.loc[:,  expr.columns.isin(gene_meta.index)].T, bound_prob_ct.T)\nnull_mu, null_std\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/03.domain_corr",
        "ref_id": "rna-correlated-boundary",
        "headings": [
          "RNA correlated boundary"
        ]
      },
      "doc_lineno": 160002
    },
    {
      "source": "shuffle_corr.shape",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/03.domain_corr",
        "ref_id": "rna-correlated-boundary",
        "headings": [
          "RNA correlated boundary"
        ]
      },
      "doc_lineno": 170002
    },
    {
      "source": "gene_slop = 5000000\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/03.domain_corr",
        "ref_id": "rna-correlated-boundary",
        "headings": [
          "RNA correlated boundary"
        ]
      },
      "doc_lineno": 190002
    },
    {
      "source": "gene_records = []\nfor gene, row in tqdm(gene_meta.iterrows(), total=gene_meta.shape[0]):\n    gene_rna = expr[[gene]].T\n    \n    dmr_chrom = row['chrom']\n    dmr_start = row['start'] - gene_slop\n    dmr_end = row['end'] + gene_slop\n    sel_dmr = (binall['chrom']==dmr_chrom) & (binall['start'] > dmr_start) & (binall['start'] < dmr_end)\n    gene_dmr = bound_prob_ct.T.loc[sel_dmr]\n\n    gene_corr = corr_array(gene_rna, gene_dmr).ravel()\n    gene_corr = pd.Series(gene_corr, index=gene_dmr.index)\n\n    # pvalue = norm.sf(gene_corr.values, null_mu, null_std)\n    # pvalue[pvalue > 0.5] = 1 - pvalue[pvalue > 0.5]\n    # pvalue *= 2  # two tailed\n    # perform multi-test correction and  q-value\n    # _, q, *_ = fdrcorrection(pvalue)\n\n    gene_corr.name = 'corr'\n    gene_corr = gene_corr.reset_index()\n    gene_corr['gene'] = gene\n    # gene_corr[\"q\"] = q\n    \n    # minimum filter\n    # gene_corr = gene_corr[\n    #     (gene_corr[\"q\"] < min_q) & (gene_corr[\"corr\"].abs() > min_corr)\n    # ].set_index(\"dmr\")\n\n    # gene_records[gene] = gene_corr\n    gene_records.append(gene_corr)\n    ",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/03.domain_corr",
        "ref_id": "rna-correlated-boundary",
        "headings": [
          "RNA correlated boundary"
        ]
      },
      "doc_lineno": 200002
    },
    {
      "source": "gene_records = pd.concat(gene_records, axis=0)\ngene_records.index = np.arange(gene_records.shape[0])\ngene_records",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/03.domain_corr",
        "ref_id": "rna-correlated-boundary",
        "headings": [
          "RNA correlated boundary"
        ]
      },
      "doc_lineno": 210002
    },
    {
      "source": "fig, ax = plt.subplots()\nsns.distplot(np.random.choice(gene_records['corr'], 50000), ax=ax)\nsns.distplot(np.random.choice(shuffle_corr, 50000), ax=ax)",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/03.domain_corr",
        "ref_id": "rna-correlated-boundary",
        "headings": [
          "RNA correlated boundary"
        ]
      },
      "doc_lineno": 220002
    },
    {
      "source": "t1 = rankdata(np.concatenate((gene_records['corr'].values, shuffle_corr)))[:gene_records.shape[0]]\nt2 = rankdata(gene_records['corr'].values)\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/03.domain_corr",
        "ref_id": "rna-correlated-boundary",
        "headings": [
          "RNA correlated boundary"
        ]
      },
      "doc_lineno": 230002
    },
    {
      "source": "gene_records['FDRneg'] = (t1 - t2) / len(shuffle_corr) / t2 * gene_records.shape[0]\ngene_records['FDRpos'] = (len(shuffle_corr) - t1 + t2) / len(shuffle_corr) / (gene_records.shape[0] - t2) * gene_records.shape[0]\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/03.domain_corr",
        "ref_id": "rna-correlated-boundary",
        "headings": [
          "RNA correlated boundary"
        ]
      },
      "doc_lineno": 240002
    },
    {
      "source": "threspos = gene_records.loc[gene_records['FDRpos']<0.1, 'corr'].min()\nthresneg = gene_records.loc[gene_records['FDRneg']<0.1, 'corr'].max()\nprint(threspos, thresneg)\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/03.domain_corr",
        "ref_id": "rna-correlated-boundary",
        "headings": [
          "RNA correlated boundary"
        ]
      },
      "doc_lineno": 250002
    },
    {
      "source": "gene_meta[['TSS', 'TES']] = gene_meta[['start', 'end']]\nselg = (gene_meta['strand']=='-')\ngene_meta.loc[selg, ['TSS', 'TES']] = gene_meta.loc[selg, ['TES', 'TSS']].values\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/03.domain_corr",
        "ref_id": "rna-correlated-boundary",
        "headings": [
          "RNA correlated boundary"
        ]
      },
      "doc_lineno": 260002
    },
    {
      "source": "gene_records['TSSdist'] = binall.loc[gene_records['index'], 'start'].values - gene_meta.loc[gene_records['gene'], 'TSS'].values\nselg = (gene_meta.loc[gene_records['gene'], 'strand']=='-')\ngene_records.loc[selg.values, 'TSSdist'] = -gene_records.loc[selg.values, 'TSSdist'].values\n\ngene_records['TESdist'] = binall.loc[gene_records['index'], 'start'].values - gene_meta.loc[gene_records['gene'], 'TES'].values\nselg = (gene_meta.loc[gene_records['gene'], 'strand']=='-')\ngene_records.loc[selg.values, 'TESdist'] = -gene_records.loc[selg.values, 'TESdist'].values\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/03.domain_corr",
        "ref_id": "rna-correlated-boundary",
        "headings": [
          "RNA correlated boundary"
        ]
      },
      "doc_lineno": 270002
    },
    {
      "source": "gene_records['coord'] = 0\nselp = (gene_records['TSSdist']<=0)\ngene_records.loc[selp, 'coord'] = gene_records.loc[selp, 'TSSdist'] / res - 100\n\nselp = (gene_records['TESdist']>=0)\ngene_records.loc[selp, 'coord'] = gene_records.loc[selp, 'TESdist'] / res + 100\n\nselp = (gene_records['TESdist']<0) & (gene_records['TSSdist']>0)\ngene_records.loc[selp, 'coord'] = gene_records.loc[selp, 'TSSdist'] / (gene_records.loc[selp, 'TSSdist'] - gene_records.loc[selp, 'TESdist']) * 200 - 100\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/03.domain_corr",
        "ref_id": "rna-correlated-boundary",
        "headings": [
          "RNA correlated boundary"
        ]
      },
      "doc_lineno": 280002
    },
    {
      "source": "gene_records.to_hdf(f'{outdir}DEG_neu_bound_5M_corr.hdf', key='data')",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/03.domain_corr",
        "ref_id": "rna-correlated-boundary",
        "headings": [
          "RNA correlated boundary"
        ]
      },
      "doc_lineno": 290002
    },
    {
      "source": "gene_records = pd.read_hdf(f'{outdir}DEG_neu_bound_5M_corr.hdf', key='data')",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/03.domain_corr",
        "ref_id": "rna-correlated-boundary",
        "headings": [
          "RNA correlated boundary"
        ]
      },
      "doc_lineno": 300002
    },
    {
      "source": "thres = np.max(np.abs([thresneg, threspos]))\ngene_records['group'] = gene_records['coord']//2\nproppos = (gene_records.loc[gene_records['corr']>thres, 'group'].value_counts() / gene_records['group'].value_counts()).sort_index().fillna(0)\npropneg = (gene_records.loc[gene_records['corr']<-thres, 'group'].value_counts() / gene_records['group'].value_counts()).sort_index().fillna(0)\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/03.domain_corr",
        "ref_id": "rna-correlated-boundary",
        "headings": [
          "RNA correlated boundary"
        ]
      },
      "doc_lineno": 310002
    },
    {
      "source": "fig, ax = plt.subplots(figsize=(3, 1.5), dpi=300)\nax.plot(np.arange(300), proppos, c='C0', label='Pos')\nax.plot(np.arange(300), propneg, c='C1', label='Neg')\nax.set_xticks([0, 100, 200, 300])\nax.set_xticklabels(['-5M', 'TSS', 'TES', '+5M'])\nax.legend()\nplt.tight_layout()\n# plt.savefig('proportion_corr_bound.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/03.domain_corr",
        "ref_id": "rna-correlated-boundary",
        "headings": [
          "RNA correlated boundary"
        ]
      },
      "doc_lineno": 320002
    },
    {
      "source": "tmp = gene_records.loc[(gene_records['corr']>thres) & (gene_records['TSSdist']>-res) & (gene_records['TSSdist']<res), 'gene'].unique()\nprint(tmp.shape[0], tmp.shape[0]/gene_records['gene'].unique().shape[0])\nnp.savetxt(f'{outdir}gene_boundposcorr_tss.csv.gz', tmp, delimiter='\\n', fmt='%s')\n\ntmp = gene_records.loc[(gene_records['corr']>thres) & (gene_records['TESdist']>-res) & (gene_records['TESdist']<res), 'gene'].unique()\nprint(tmp.shape[0], tmp.shape[0]/gene_records['gene'].unique().shape[0])\nnp.savetxt(f'{outdir}gene_boundposcorr_tes.csv.gz', tmp, delimiter='\\n', fmt='%s')\n\ntmp = gene_records.loc[(gene_records['corr']>thres) & (((gene_records['TSSdist']>-res) & (gene_records['TSSdist']<res)) | ((gene_records['TESdist']>-res) & (gene_records['TESdist']<res))), 'gene'].unique()\nprint(tmp.shape[0], tmp.shape[0]/gene_records['gene'].unique().shape[0])\nnp.savetxt(f'{outdir}gene_boundposcorr_tsstes.csv.gz', tmp, delimiter='\\n', fmt='%s')\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/03.domain_corr",
        "ref_id": "rna-correlated-boundary",
        "headings": [
          "RNA correlated boundary"
        ]
      },
      "doc_lineno": 330002
    },
    {
      "source": "tmp = gene_records.loc[(gene_records['corr']>thres) & (gene_records['TSSdist']>-res) & (gene_records['TESdist']<res), 'gene'].unique()\nprint(tmp.shape[0], tmp.shape[0]/gene_records['gene'].unique().shape[0])\nnp.savetxt(f'{outdir}gene_boundposcorr_genebody.csv.gz', tmp, delimiter='\\n', fmt='%s')\n\ntmp = gene_records.loc[(gene_records['corr']<-thres) & (gene_records['TSSdist']>-res) & (gene_records['TESdist']<res), 'gene'].unique()\nprint(tmp.shape[0], tmp.shape[0]/gene_records['gene'].unique().shape[0])\n\ntmp = gene_records.loc[(gene_records['corr'].abs()>thres) & (gene_records['TSSdist']>-res) & (gene_records['TESdist']<res), 'gene'].unique()\nprint(tmp.shape[0], tmp.shape[0]/gene_records['gene'].unique().shape[0])\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/03.domain_corr",
        "ref_id": "rna-correlated-boundary",
        "headings": [
          "RNA correlated boundary"
        ]
      },
      "doc_lineno": 340002
    },
    {
      "source": "fig, axes = plt.subplots(2, 1, sharex='all', figsize=(3,3), dpi=300)\nax = axes[0]\ntmp = gene_records.loc[gene_records['corr']>threspos]\nsns.histplot(data=tmp, x='coord', y='corr', bins=300, ax=ax, cbar=True, cbar_kws=dict(ticks=[0,7], fraction=0.2, shrink=0.5))\nax.set_yticks([0.7, 0.8, 0.9, 1.0])\n\nax = axes[1]\n# tmp = gene_records.loc[gene_records['corr']<thresneg]\ntmp = gene_records.loc[gene_records['corr']<-threspos]\nsns.histplot(data=tmp, x='coord', y='corr', bins=300, ax=ax, cbar=True, cbar_kws=dict(ticks=[0,3], fraction=0.2, shrink=0.5))\n# ax.set_yticks([-0.6, -0.7, -0.8, -0.9])\nax.set_yticks([-0.7, -0.8, -0.9, -1.0])\n\nax.set_xticks([-300, -100, 100, 300])\nax.set_xticklabels(['-5M', 'TSS', 'TES', '+5M'])\n\n# plt.savefig('DEG_domain_sigcorr.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/03.domain_corr",
        "ref_id": "rna-correlated-boundary",
        "headings": [
          "RNA correlated boundary"
        ]
      },
      "doc_lineno": 350002
    }
  ],
  "hba/rna_majortype/04.comp_corr": [
    {
      "source": "import numpy as np\nimport pandas as pd\nimport cooler\nimport anndata\nimport scanpy as sc\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm\nfrom matplotlib import cm as cm\nimport seaborn as sns\n\nmpl.style.use('default')\nmpl.rcParams['pdf.fonttype'] = 42\nmpl.rcParams['ps.fonttype'] = 42\nmpl.rcParams['font.family'] = 'sans-serif'\nmpl.rcParams['font.sans-serif'] = 'Helvetica'\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/04.comp_corr",
        "ref_id": "rna-correlated-compartment",
        "headings": [
          "RNA correlated compartment"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "indir = f'/home/jzhou_salk_edu/sky_workdir/hba/compartment_majortype/diff/neu/'\noutdir = '/home/jzhou_salk_edu/sky_workdir/hba/rna_majortype/'",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/04.comp_corr",
        "ref_id": "rna-correlated-compartment",
        "headings": [
          "RNA correlated compartment"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "# no L5ET\nleg = ['L23_IT', 'L4_IT', 'L5_IT', 'L6_IT', 'L6_IT_Car3', 'L56_NP', 'L6_CT', 'L6b', 'Amy', \n       'Lamp5', 'Lamp5_LHX6', 'Sncg', 'Vip', 'Pvalb', 'Pvalb_ChC', 'Sst', 'CHD7', \n       'MSN_D1', 'MSN_D2', 'Foxp2', 'SubCtx', \n       # 'ASC', 'ODC', 'OPC', 'MGC', 'PC', 'EC', 'VLMC'\n      ]\nres = 100000\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/04.comp_corr",
        "ref_id": "rna-correlated-compartment",
        "headings": [
          "RNA correlated compartment"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "comp = pd.read_csv(f'{indir}DifferentialResult/fdr_result/differential.intra_sample_combined.pcQnm.bedGraph', sep='\\t', header=0, index_col=None)\ncomp.index = comp['chr'] + '_' + (comp['start'] // res).astype(str)\ncomp",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/04.comp_corr",
        "ref_id": "rna-correlated-compartment",
        "headings": [
          "RNA correlated compartment"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "binall = comp[['chr', 'start', 'end', 'sample_maha', 'pval', 'padj']]\nbinall = binall.rename({'chr':'chrom'}, axis=1)\ncomp = comp[leg]\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/04.comp_corr",
        "ref_id": "rna-correlated-compartment",
        "headings": [
          "RNA correlated compartment"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "expr = pd.read_hdf('/home/jzhou_salk_edu/sky_workdir/hba/rna_majortype/cluster_expr.hdf').loc[leg]\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/04.comp_corr",
        "ref_id": "rna-correlated-compartment",
        "headings": [
          "RNA correlated compartment"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "from scipy.stats import rankdata\n\ndeg = np.zeros(expr.shape[1])\nfor i in range(len(leg)-1):\n    for j in range(i+1, len(leg)):\n        tmp = np.load(f'/home/jzhou_salk_edu/sky_workdir/hba/rna_majortype/DEG/{leg[i]}-{leg[j]}.npz')\n        # deg[np.logical_and(np.abs(tmp['fc'])>1, tmp['fdr']<1e-3)] = 1\n        rank = rankdata(tmp['fdr'])\n        deg[rank<=100] = 1\n\nprint(deg.sum())\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/04.comp_corr",
        "ref_id": "rna-correlated-compartment",
        "headings": [
          "RNA correlated compartment"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "chrom_size_path = f'/data/hba/loop_majortype/hg38_with_chrl.main.chrom.sizes'\nchrom_sizes = cooler.read_chromsizes(chrom_size_path, all_names=True)\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/04.comp_corr",
        "ref_id": "rna-correlated-compartment",
        "headings": [
          "RNA correlated compartment"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "gene_meta = pd.read_csv('/home/jzhou_salk_edu/sky_workdir/hba/ref/gencode.v33.bed', sep='\\t', index_col=None, header=None)\ngene_meta.columns = ['chrom', 'start', 'end', 'gene_id', 'gene_name', 'strand']\ngene_meta = gene_meta.set_index('gene_id').loc[expr.columns[deg==1]]\ngene_meta = gene_meta.loc[gene_meta['chrom'].isin(chrom_sizes.index[:22])]\ngene_meta",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/04.comp_corr",
        "ref_id": "rna-correlated-compartment",
        "headings": [
          "RNA correlated compartment"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "import joblib\n# from qnorm import quantile_normalize\nfrom scipy.stats import norm\nfrom statsmodels.sandbox.stats.multicomp import multipletests as FDR\nfrom tqdm import tqdm\nfrom ALLCools.mcds.correlation import corr_array\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/04.comp_corr",
        "ref_id": "rna-correlated-compartment",
        "headings": [
          "RNA correlated compartment"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "def shuffle_corr_norm(rna_data, dmr_data):\n    \n    shuffle_rna_data = rna_data.copy()\n    for col, data in shuffle_rna_data.items():\n        n_gene = shuffle_rna_data.shape[0]\n        shuffle_rna_data[col] = shuffle_rna_data[col].sample(n_gene).values\n    \n    if dmr_data.shape[0] > 50000:\n        shuffle_dmr_data = dmr_data.sample(50000).copy()\n    else:\n        shuffle_dmr_data = dmr_data.copy()\n    for col, data in shuffle_dmr_data.items():\n        n_dmr = shuffle_dmr_data.shape[0]\n        shuffle_dmr_data[col] = shuffle_dmr_data[col].sample(n_dmr).values\n\n    # shuffle corr\n    shuffle_corr = corr_array(shuffle_rna_data, shuffle_dmr_data)\n    mu, std = norm.fit(shuffle_corr.ravel())\n    return mu, std, shuffle_corr.ravel()\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/04.comp_corr",
        "ref_id": "rna-correlated-compartment",
        "headings": [
          "RNA correlated compartment"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "null_mu, null_std, shuffle_corr = shuffle_corr_norm(expr.loc[:,  expr.columns.isin(gene_meta.index)].T, comp)\nnull_mu, null_std\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/04.comp_corr",
        "ref_id": "rna-correlated-compartment",
        "headings": [
          "RNA correlated compartment"
        ]
      },
      "doc_lineno": 130002
    },
    {
      "source": "shuffle_corr.shape",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/04.comp_corr",
        "ref_id": "rna-correlated-compartment",
        "headings": [
          "RNA correlated compartment"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "gene_slop = 5000000\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/04.comp_corr",
        "ref_id": "rna-correlated-compartment",
        "headings": [
          "RNA correlated compartment"
        ]
      },
      "doc_lineno": 160002
    },
    {
      "source": "binall['pos'] = binall[['start', 'end']].mean(axis=1)",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/04.comp_corr",
        "ref_id": "rna-correlated-compartment",
        "headings": [
          "RNA correlated compartment"
        ]
      },
      "doc_lineno": 170002
    },
    {
      "source": "gene_records = []\nfor gene, row in tqdm(gene_meta.iterrows(), total=gene_meta.shape[0]):\n    gene_rna = expr[[gene]].T\n    \n    dmr_chrom = row['chrom']\n    dmr_start = row['start'] - gene_slop\n    dmr_end = row['end'] + gene_slop\n    sel_dmr = (binall['chrom']==dmr_chrom) & (binall['pos'] > dmr_start) & (binall['pos'] < dmr_end)\n    gene_dmr = comp.loc[sel_dmr]\n\n    gene_corr = corr_array(gene_rna, gene_dmr).ravel()\n    gene_corr = pd.Series(gene_corr, index=gene_dmr.index)\n\n    # pvalue = norm.sf(gene_corr.values, null_mu, null_std)\n    # pvalue[pvalue > 0.5] = 1 - pvalue[pvalue > 0.5]\n    # pvalue *= 2  # two tailed\n    # perform multi-test correction and  q-value\n    # _, q, *_ = fdrcorrection(pvalue)\n\n    gene_corr.name = 'corr'\n    gene_corr = gene_corr.reset_index()\n    gene_corr['gene'] = gene\n    # gene_corr[\"q\"] = q\n    \n    # minimum filter\n    # gene_corr = gene_corr[\n    #     (gene_corr[\"q\"] < min_q) & (gene_corr[\"corr\"].abs() > min_corr)\n    # ].set_index(\"dmr\")\n\n    # gene_records[gene] = gene_corr\n    gene_records.append(gene_corr)\n    ",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/04.comp_corr",
        "ref_id": "rna-correlated-compartment",
        "headings": [
          "RNA correlated compartment"
        ]
      },
      "doc_lineno": 180002
    },
    {
      "source": "gene_records = pd.concat(gene_records, axis=0)\ngene_records.index = np.arange(gene_records.shape[0])\ngene_records",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/04.comp_corr",
        "ref_id": "rna-correlated-compartment",
        "headings": [
          "RNA correlated compartment"
        ]
      },
      "doc_lineno": 190002
    },
    {
      "source": "fig, ax = plt.subplots()\nsns.distplot(np.random.choice(gene_records['corr'], 50000), ax=ax)\nsns.distplot(np.random.choice(shuffle_corr, 50000), ax=ax)",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/04.comp_corr",
        "ref_id": "rna-correlated-compartment",
        "headings": [
          "RNA correlated compartment"
        ]
      },
      "doc_lineno": 200002
    },
    {
      "source": "t1 = rankdata(np.concatenate((gene_records['corr'].values, shuffle_corr)))[:gene_records.shape[0]]\nt2 = rankdata(gene_records['corr'].values)\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/04.comp_corr",
        "ref_id": "rna-correlated-compartment",
        "headings": [
          "RNA correlated compartment"
        ]
      },
      "doc_lineno": 210002
    },
    {
      "source": "gene_records['FDRneg'] = (t1 - t2) / len(shuffle_corr) / t2 * gene_records.shape[0]\ngene_records['FDRpos'] = (len(shuffle_corr) - t1 + t2) / len(shuffle_corr) / (gene_records.shape[0] - t2) * gene_records.shape[0]\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/04.comp_corr",
        "ref_id": "rna-correlated-compartment",
        "headings": [
          "RNA correlated compartment"
        ]
      },
      "doc_lineno": 220002
    },
    {
      "source": "threspos = gene_records.loc[gene_records['FDRpos']<0.1, 'corr'].min()\nthresneg = gene_records.loc[gene_records['FDRneg']<0.1, 'corr'].max()\nprint(threspos, thresneg)\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/04.comp_corr",
        "ref_id": "rna-correlated-compartment",
        "headings": [
          "RNA correlated compartment"
        ]
      },
      "doc_lineno": 230002
    },
    {
      "source": "gene_meta[['TSS', 'TES']] = gene_meta[['start', 'end']]\nselg = (gene_meta['strand']=='-')\ngene_meta.loc[selg, ['TSS', 'TES']] = gene_meta.loc[selg, ['TES', 'TSS']].values\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/04.comp_corr",
        "ref_id": "rna-correlated-compartment",
        "headings": [
          "RNA correlated compartment"
        ]
      },
      "doc_lineno": 240002
    },
    {
      "source": "gene_records['TSSdist'] = binall.loc[gene_records['index'], 'pos'].values - gene_meta.loc[gene_records['gene'], 'TSS'].values\nselg = (gene_meta.loc[gene_records['gene'], 'strand']=='-')\ngene_records.loc[selg.values, 'TSSdist'] = -gene_records.loc[selg.values, 'TSSdist'].values\n\ngene_records['TESdist'] = binall.loc[gene_records['index'], 'pos'].values - gene_meta.loc[gene_records['gene'], 'TES'].values\nselg = (gene_meta.loc[gene_records['gene'], 'strand']=='-')\ngene_records.loc[selg.values, 'TESdist'] = -gene_records.loc[selg.values, 'TESdist'].values\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/04.comp_corr",
        "ref_id": "rna-correlated-compartment",
        "headings": [
          "RNA correlated compartment"
        ]
      },
      "doc_lineno": 250002
    },
    {
      "source": "gene_records['coord'] = 0\nselp = (gene_records['TSSdist']<=0)\ngene_records.loc[selp, 'coord'] = gene_records.loc[selp, 'TSSdist'] / res * 4 - 100\n\nselp = (gene_records['TESdist']>=0)\ngene_records.loc[selp, 'coord'] = gene_records.loc[selp, 'TESdist'] / res * 4 + 100\n\nselp = (gene_records['TESdist']<0) & (gene_records['TSSdist']>0)\ngene_records.loc[selp, 'coord'] = gene_records.loc[selp, 'TSSdist'] / (gene_records.loc[selp, 'TSSdist'] - gene_records.loc[selp, 'TESdist']) * 200 - 100\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/04.comp_corr",
        "ref_id": "rna-correlated-compartment",
        "headings": [
          "RNA correlated compartment"
        ]
      },
      "doc_lineno": 260002
    },
    {
      "source": "gene_records.to_hdf(f'{outdir}DEG_neu_comp_5M_corr.hdf', key='data')",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/04.comp_corr",
        "ref_id": "rna-correlated-compartment",
        "headings": [
          "RNA correlated compartment"
        ]
      },
      "doc_lineno": 270002
    },
    {
      "source": "gene_records = pd.read_hdf(f'{outdir}DEG_neu_comp_5M_corr.hdf', key='data')",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/04.comp_corr",
        "ref_id": "rna-correlated-compartment",
        "headings": [
          "RNA correlated compartment"
        ]
      },
      "doc_lineno": 280002
    },
    {
      "source": "thres = np.max(np.abs([thresneg, threspos]))\ngene_records['group'] = gene_records['coord']//2\nproppos = (gene_records.loc[gene_records['corr']>thres, 'group'].value_counts() / gene_records['group'].value_counts()).sort_index().fillna(0)\npropneg = (gene_records.loc[gene_records['corr']<-thres, 'group'].value_counts() / gene_records['group'].value_counts()).sort_index().fillna(0)\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/04.comp_corr",
        "ref_id": "rna-correlated-compartment",
        "headings": [
          "RNA correlated compartment"
        ]
      },
      "doc_lineno": 290002
    },
    {
      "source": "fig, ax = plt.subplots(figsize=(3, 1.5), dpi=300)\nax.plot(np.arange(300), proppos, c='C0', label='Pos')\nax.plot(np.arange(300), propneg, c='C1', label='Neg')\nax.set_xticks([0, 100, 200, 300])\nax.set_xticklabels(['-5M', 'TSS', 'TES', '+5M'])\nax.legend()\nplt.tight_layout()\n# plt.savefig('proportion_corr_comp.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/04.comp_corr",
        "ref_id": "rna-correlated-compartment",
        "headings": [
          "RNA correlated compartment"
        ]
      },
      "doc_lineno": 300002
    },
    {
      "source": "tmp = gene_records.loc[(gene_records['corr']>thres) & (gene_records['TSSdist']>-res) & (gene_records['TESdist']<res), 'gene'].unique()\nprint(tmp.shape[0], tmp.shape[0]/gene_records['gene'].unique().shape[0])\nnp.savetxt(f'{outdir}gene_compposcorr_genebody.csv.gz', tmp, delimiter='\\n', fmt='%s')\n\ntmp = gene_records.loc[(gene_records['corr']<-thres) & (gene_records['TSSdist']>-res) & (gene_records['TESdist']<res), 'gene'].unique()\nprint(tmp.shape[0], tmp.shape[0]/gene_records['gene'].unique().shape[0])\n\ntmp = gene_records.loc[(gene_records['corr'].abs()>thres) & (gene_records['TSSdist']>-res) & (gene_records['TESdist']<res), 'gene'].unique()\nprint(tmp.shape[0], tmp.shape[0]/gene_records['gene'].unique().shape[0])\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/04.comp_corr",
        "ref_id": "rna-correlated-compartment",
        "headings": [
          "RNA correlated compartment"
        ]
      },
      "doc_lineno": 310002
    },
    {
      "source": "fig, axes = plt.subplots(2, 1, sharex='all', figsize=(3,3), dpi=300)\nax = axes[0]\ntmp = gene_records.loc[gene_records['corr']>thres]\nsns.histplot(data=tmp, x='coord', y='corr', bins=300, ax=ax, cbar=True, cbar_kws=dict(ticks=[0,4], fraction=0.2, shrink=0.5))\nax.set_yticks(np.arange(0.6, 1.05, 0.1))\n\nax = axes[1]\ntmp = gene_records.loc[gene_records['corr']<-thres]\n# tmp = gene_records.loc[gene_records['corr']<-threspos]\nsns.histplot(data=tmp, x='coord', y='corr', bins=300, ax=ax, cbar=True, cbar_kws=dict(ticks=[0,3], fraction=0.2, shrink=0.5))\n# ax.set_yticks([-0.6, -0.7, -0.8, -0.9])\nax.set_yticks(np.arange(-1.0, -0.55, 0.1))\n\nax.set_xticks([-300, -100, 100, 300])\nax.set_xticklabels(['-5M', 'TSS', 'TES', '+5M'])\n\n# plt.savefig('DEG_comp_sigcorr.pdf', transparent=True)\n",
      "names": [],
      "example": {
        "document": "hba/rna_majortype/04.comp_corr",
        "ref_id": "rna-correlated-compartment",
        "headings": [
          "RNA correlated compartment"
        ]
      },
      "doc_lineno": 320002
    }
  ],
  "hba/rna_majortype/intro": [],
  "intro": []
}